
PortIOtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000734  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000243  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059f  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027c  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040a  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 01 01 	call	0x202	; 0x202 <main>
  78:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <bit_init>:
  if      (byte_adr == &PORTD)   DDRD = reg_config;
  else if (byte_adr == &PORTB)   DDRB = reg_config;
  else if (byte_adr == &PORTC)   DDRC = reg_config;

  #ifndef NOPULLUPS
   if (direction == IN) *byte_adr = 0xff;	// interne Pullups aktivieren
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	51 f5       	brne	.+84     	; 0xd8 <bit_init+0x58>
  84:	8b 32       	cpi	r24, 0x2B	; 43
  86:	91 05       	cpc	r25, r1
  88:	59 f4       	brne	.+22     	; 0xa0 <bit_init+0x20>
  8a:	2a b1       	in	r18, 0x0a	; 10
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <bit_init+0x16>
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	6a 95       	dec	r22
  98:	e2 f7       	brpl	.-8      	; 0x92 <bit_init+0x12>
  9a:	82 2b       	or	r24, r18
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	08 95       	ret
  a0:	85 32       	cpi	r24, 0x25	; 37
  a2:	91 05       	cpc	r25, r1
  a4:	59 f4       	brne	.+22     	; 0xbc <bit_init+0x3c>
  a6:	24 b1       	in	r18, 0x04	; 4
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <bit_init+0x32>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <bit_init+0x2e>
  b6:	82 2b       	or	r24, r18
  b8:	84 b9       	out	0x04, r24	; 4
  ba:	08 95       	ret
  bc:	88 97       	sbiw	r24, 0x28	; 40
  be:	09 f0       	breq	.+2      	; 0xc2 <bit_init+0x42>
  c0:	47 c0       	rjmp	.+142    	; 0x150 <bit_init+0xd0>
  c2:	27 b1       	in	r18, 0x07	; 7
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <bit_init+0x4e>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <bit_init+0x4a>
  d2:	82 2b       	or	r24, r18
  d4:	87 b9       	out	0x07, r24	; 7
  d6:	08 95       	ret
  d8:	8b 32       	cpi	r24, 0x2B	; 43
  da:	91 05       	cpc	r25, r1
  dc:	69 f4       	brne	.+26     	; 0xf8 <bit_init+0x78>
  de:	5a b1       	in	r21, 0x0a	; 10
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	06 2e       	mov	r0, r22
  e6:	02 c0       	rjmp	.+4      	; 0xec <bit_init+0x6c>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <bit_init+0x68>
  f0:	20 95       	com	r18
  f2:	25 23       	and	r18, r21
  f4:	2a b9       	out	0x0a, r18	; 10
  f6:	1f c0       	rjmp	.+62     	; 0x136 <bit_init+0xb6>
  f8:	85 32       	cpi	r24, 0x25	; 37
  fa:	91 05       	cpc	r25, r1
  fc:	69 f4       	brne	.+26     	; 0x118 <bit_init+0x98>
  fe:	54 b1       	in	r21, 0x04	; 4
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	06 2e       	mov	r0, r22
 106:	02 c0       	rjmp	.+4      	; 0x10c <bit_init+0x8c>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <bit_init+0x88>
 110:	20 95       	com	r18
 112:	25 23       	and	r18, r21
 114:	24 b9       	out	0x04, r18	; 4
 116:	0f c0       	rjmp	.+30     	; 0x136 <bit_init+0xb6>
 118:	88 32       	cpi	r24, 0x28	; 40
 11a:	91 05       	cpc	r25, r1
 11c:	61 f4       	brne	.+24     	; 0x136 <bit_init+0xb6>
 11e:	57 b1       	in	r21, 0x07	; 7
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	06 2e       	mov	r0, r22
 126:	02 c0       	rjmp	.+4      	; 0x12c <bit_init+0xac>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <bit_init+0xa8>
 130:	20 95       	com	r18
 132:	25 23       	and	r18, r21
 134:	27 b9       	out	0x07, r18	; 7
 136:	41 11       	cpse	r20, r1
 138:	0b c0       	rjmp	.+22     	; 0x150 <bit_init+0xd0>
 13a:	fc 01       	movw	r30, r24
 13c:	40 81       	ld	r20, Z
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <bit_init+0xc8>
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <bit_init+0xc4>
 14c:	24 2b       	or	r18, r20
 14e:	20 83       	st	Z, r18
 150:	08 95       	ret

00000152 <bit_read>:
  #endif
}

uint8_t bit_read(volatile uint8_t *byte_adr, uint8_t bit_nr)
{
  if      (byte_adr == &PORTD)   return ((PIND>>bit_nr) & 0x01);
 152:	8b 32       	cpi	r24, 0x2B	; 43
 154:	91 05       	cpc	r25, r1
 156:	49 f4       	brne	.+18     	; 0x16a <bit_read+0x18>
 158:	89 b1       	in	r24, 0x09	; 9
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <bit_read+0x10>
 15e:	95 95       	asr	r25
 160:	87 95       	ror	r24
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <bit_read+0xc>
 166:	81 70       	andi	r24, 0x01	; 1
 168:	08 95       	ret
  else if (byte_adr == &PORTB)   return ((PINB>>bit_nr) & 0x01);
 16a:	85 32       	cpi	r24, 0x25	; 37
 16c:	91 05       	cpc	r25, r1
 16e:	49 f4       	brne	.+18     	; 0x182 <bit_read+0x30>
 170:	83 b1       	in	r24, 0x03	; 3
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <bit_read+0x28>
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <bit_read+0x24>
 17e:	81 70       	andi	r24, 0x01	; 1
 180:	08 95       	ret
  else if (byte_adr == &PORTC)   return ((PINC>>bit_nr) & 0x01);
 182:	88 97       	sbiw	r24, 0x28	; 40
 184:	49 f4       	brne	.+18     	; 0x198 <bit_read+0x46>
 186:	86 b1       	in	r24, 0x06	; 6
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <bit_read+0x3e>
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <bit_read+0x3a>
 194:	81 70       	andi	r24, 0x01	; 1
 196:	08 95       	ret
  else return 0;
 198:	80 e0       	ldi	r24, 0x00	; 0
}
 19a:	08 95       	ret

0000019c <bit_write>:

void bit_write(volatile uint8_t *byte_adr, uint8_t bit_nr, uint8_t val)
{
 19c:	fc 01       	movw	r30, r24
  val &= 0x01;
  if (val == 1)
 19e:	40 ff       	sbrs	r20, 0
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <bit_write+0x1c>
    *byte_adr |= (0x01<<bit_nr);
 1a2:	20 81       	ld	r18, Z
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <bit_write+0x12>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <bit_write+0xe>
 1b2:	82 2b       	or	r24, r18
 1b4:	80 83       	st	Z, r24
 1b6:	08 95       	ret
  else
    *byte_adr &= ~(0x01<<bit_nr);
 1b8:	90 81       	ld	r25, Z
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <bit_write+0x28>
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <bit_write+0x24>
 1c8:	20 95       	com	r18
 1ca:	29 23       	and	r18, r25
 1cc:	20 83       	st	Z, r18
 1ce:	08 95       	ret

000001d0 <setup>:
#define	S2           _PORTB_,3

void setup (void)
{
	/* Initialisierungen */
  bit_init(LED1,OUT);           // PD1
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	8b e2       	ldi	r24, 0x2B	; 43
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 40 00 	call	0x80	; 0x80 <bit_init>
  bit_init(LED2,OUT);           // PD2
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 40 00 	call	0x80	; 0x80 <bit_init>
  
  bit_init(S1,IN);              // PB2
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	85 e2       	ldi	r24, 0x25	; 37
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 40 00 	call	0x80	; 0x80 <bit_init>
  bit_init(S2,IN);              // PB3
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	63 e0       	ldi	r22, 0x03	; 3
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 40 00 	call	0x80	; 0x80 <bit_init>
 200:	08 95       	ret

00000202 <main>:
}

// Funktion main()
int main(void)
{
  setup();
 202:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setup>
    //byte_write(_PORTB_,temp);

    // Bit-Operationen:
    // mit Funktionen ...

    temp = bit_read(S1);		
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	85 e2       	ldi	r24, 0x25	; 37
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 a9 00 	call	0x152	; 0x152 <bit_read>
    bit_write(LED1,temp);          
 210:	48 2f       	mov	r20, r24
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	8b e2       	ldi	r24, 0x2B	; 43
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 ce 00 	call	0x19c	; 0x19c <bit_write>
    // Alternativ mit 3 Parametern !!!
    // bit_write(_PORTD_,1,temp);   //Port, Bit, Wert
	  temp = bit_read(S2);	
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	85 e2       	ldi	r24, 0x25	; 37
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 a9 00 	call	0x152	; 0x152 <bit_read>
	  temp = ~temp;
    bit_write(LED2,temp);			
 226:	48 2f       	mov	r20, r24
 228:	40 95       	com	r20
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	8b e2       	ldi	r24, 0x2B	; 43
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 ce 00 	call	0x19c	; 0x19c <bit_write>
 234:	e8 cf       	rjmp	.-48     	; 0x206 <main+0x4>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>


PortIOtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000336  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f9  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039e  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000339  00000000  00000000  000010a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e5  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  8e:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <delay_100us>:

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	69 f0       	breq	.+26     	; 0xb4 <delay_100us+0x1e>
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	ef e8       	ldi	r30, 0x8F	; 143
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <delay_100us+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <delay_100us+0x12>
  a8:	00 00       	nop
	{
		_delay_us(100);
		n++;
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
  ae:	28 17       	cp	r18, r24
  b0:	39 07       	cpc	r19, r25
  b2:	a9 f7       	brne	.-22     	; 0x9e <delay_100us+0x8>
  b4:	08 95       	ret

000000b6 <delay_ms>:
		n++;
	}
}

void delay_ms( uint16_t millisekunden)
{
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	uint16_t n = 0;
	
	while(n < millisekunden)
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	59 f0       	breq	.+22     	; 0xd8 <delay_ms+0x22>
  c2:	8c 01       	movw	r16, r24
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_100us(10);
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <delay_100us>
		n++;
  d0:	21 96       	adiw	r28, 0x01	; 1

void delay_ms( uint16_t millisekunden)
{
	uint16_t n = 0;
	
	while(n < millisekunden)
  d2:	c0 17       	cp	r28, r16
  d4:	d1 07       	cpc	r29, r17
  d6:	c1 f7       	brne	.-16     	; 0xc8 <delay_ms+0x12>
	{
		delay_100us(10);
		n++;
	}
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	0f 91       	pop	r16
  e0:	08 95       	ret

000000e2 <bit_init>:
//***************************************************************
// ab hier Funktionen für Port-Ein-/Ausgabe
//***************************************************************
void bit_init(volatile uint8_t *byte_adr, uint8_t bit_nr, uint8_t direction)
{
  if (direction == OUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	51 f5       	brne	.+84     	; 0x13a <bit_init+0x58>
  {
    if      (byte_adr == &PORTD)  DDRD |= (0x01<<bit_nr);
  e6:	8b 32       	cpi	r24, 0x2B	; 43
  e8:	91 05       	cpc	r25, r1
  ea:	59 f4       	brne	.+22     	; 0x102 <bit_init+0x20>
  ec:	2a b1       	in	r18, 0x0a	; 10
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <bit_init+0x16>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <bit_init+0x12>
  fc:	82 2b       	or	r24, r18
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	08 95       	ret
    else if (byte_adr == &PORTB)  DDRB |= (0x01<<bit_nr);
 102:	85 32       	cpi	r24, 0x25	; 37
 104:	91 05       	cpc	r25, r1
 106:	59 f4       	brne	.+22     	; 0x11e <bit_init+0x3c>
 108:	24 b1       	in	r18, 0x04	; 4
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <bit_init+0x32>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <bit_init+0x2e>
 118:	82 2b       	or	r24, r18
 11a:	84 b9       	out	0x04, r24	; 4
 11c:	08 95       	ret
    else if (byte_adr == &PORTC)  DDRC |= (0x01<<bit_nr);
 11e:	88 97       	sbiw	r24, 0x28	; 40
 120:	09 f0       	breq	.+2      	; 0x124 <bit_init+0x42>
 122:	47 c0       	rjmp	.+142    	; 0x1b2 <bit_init+0xd0>
 124:	27 b1       	in	r18, 0x07	; 7
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <bit_init+0x4e>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <bit_init+0x4a>
 134:	82 2b       	or	r24, r18
 136:	87 b9       	out	0x07, r24	; 7
 138:	08 95       	ret
  }
  else
  {
    if      (byte_adr == &PORTD)  DDRD &= ~(0x01<<bit_nr);
 13a:	8b 32       	cpi	r24, 0x2B	; 43
 13c:	91 05       	cpc	r25, r1
 13e:	69 f4       	brne	.+26     	; 0x15a <bit_init+0x78>
 140:	5a b1       	in	r21, 0x0a	; 10
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	06 2e       	mov	r0, r22
 148:	02 c0       	rjmp	.+4      	; 0x14e <bit_init+0x6c>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <bit_init+0x68>
 152:	20 95       	com	r18
 154:	25 23       	and	r18, r21
 156:	2a b9       	out	0x0a, r18	; 10
 158:	1f c0       	rjmp	.+62     	; 0x198 <bit_init+0xb6>
    else if (byte_adr == &PORTB)  DDRB &= ~(0x01<<bit_nr);
 15a:	85 32       	cpi	r24, 0x25	; 37
 15c:	91 05       	cpc	r25, r1
 15e:	69 f4       	brne	.+26     	; 0x17a <bit_init+0x98>
 160:	54 b1       	in	r21, 0x04	; 4
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	06 2e       	mov	r0, r22
 168:	02 c0       	rjmp	.+4      	; 0x16e <bit_init+0x8c>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <bit_init+0x88>
 172:	20 95       	com	r18
 174:	25 23       	and	r18, r21
 176:	24 b9       	out	0x04, r18	; 4
 178:	0f c0       	rjmp	.+30     	; 0x198 <bit_init+0xb6>
    else if (byte_adr == &PORTC)  DDRC &= ~(0x01<<bit_nr);
 17a:	88 32       	cpi	r24, 0x28	; 40
 17c:	91 05       	cpc	r25, r1
 17e:	61 f4       	brne	.+24     	; 0x198 <bit_init+0xb6>
 180:	57 b1       	in	r21, 0x07	; 7
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	06 2e       	mov	r0, r22
 188:	02 c0       	rjmp	.+4      	; 0x18e <bit_init+0xac>
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <bit_init+0xa8>
 192:	20 95       	com	r18
 194:	25 23       	and	r18, r21
 196:	27 b9       	out	0x07, r18	; 7
  }
  #ifndef	NOPULLUPS
   if (direction == IN) *byte_adr |= (0x01<<bit_nr);			// internen Pullup aktivieren
 198:	41 11       	cpse	r20, r1
 19a:	0b c0       	rjmp	.+22     	; 0x1b2 <bit_init+0xd0>
 19c:	fc 01       	movw	r30, r24
 19e:	40 81       	ld	r20, Z
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <bit_init+0xc8>
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <bit_init+0xc4>
 1ae:	24 2b       	or	r18, r20
 1b0:	20 83       	st	Z, r18
 1b2:	08 95       	ret

000001b4 <bit_read>:
  #endif
}

uint8_t bit_read(volatile uint8_t *byte_adr, uint8_t bit_nr)
{
  if      (byte_adr == &PORTD)   return ((PIND>>bit_nr) & 0x01);
 1b4:	8b 32       	cpi	r24, 0x2B	; 43
 1b6:	91 05       	cpc	r25, r1
 1b8:	49 f4       	brne	.+18     	; 0x1cc <bit_read+0x18>
 1ba:	89 b1       	in	r24, 0x09	; 9
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <bit_read+0x10>
 1c0:	95 95       	asr	r25
 1c2:	87 95       	ror	r24
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <bit_read+0xc>
 1c8:	81 70       	andi	r24, 0x01	; 1
 1ca:	08 95       	ret
  else if (byte_adr == &PORTB)   return ((PINB>>bit_nr) & 0x01);
 1cc:	85 32       	cpi	r24, 0x25	; 37
 1ce:	91 05       	cpc	r25, r1
 1d0:	49 f4       	brne	.+18     	; 0x1e4 <bit_read+0x30>
 1d2:	83 b1       	in	r24, 0x03	; 3
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <bit_read+0x28>
 1d8:	95 95       	asr	r25
 1da:	87 95       	ror	r24
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <bit_read+0x24>
 1e0:	81 70       	andi	r24, 0x01	; 1
 1e2:	08 95       	ret
  else if (byte_adr == &PORTC)   return ((PINC>>bit_nr) & 0x01);
 1e4:	88 97       	sbiw	r24, 0x28	; 40
 1e6:	49 f4       	brne	.+18     	; 0x1fa <bit_read+0x46>
 1e8:	86 b1       	in	r24, 0x06	; 6
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <bit_read+0x3e>
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <bit_read+0x3a>
 1f6:	81 70       	andi	r24, 0x01	; 1
 1f8:	08 95       	ret
  else return 0;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
}
 1fc:	08 95       	ret

000001fe <bit_write>:

void bit_write(volatile uint8_t *byte_adr, uint8_t bit_nr, uint8_t val)
{
 1fe:	fc 01       	movw	r30, r24
  val &= 0x01;
  if (val == 1)
 200:	40 ff       	sbrs	r20, 0
 202:	0b c0       	rjmp	.+22     	; 0x21a <bit_write+0x1c>
    *byte_adr |= (0x01<<bit_nr);
 204:	20 81       	ld	r18, Z
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <bit_write+0x12>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <bit_write+0xe>
 214:	82 2b       	or	r24, r18
 216:	80 83       	st	Z, r24
 218:	08 95       	ret
  else
    *byte_adr &= ~(0x01<<bit_nr);
 21a:	90 81       	ld	r25, Z
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <bit_write+0x28>
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <bit_write+0x24>
 22a:	20 95       	com	r18
 22c:	29 23       	and	r18, r25
 22e:	20 83       	st	Z, r18
 230:	08 95       	ret

00000232 <setup>:
void srg_write(uint8_t data);

// Initialisierungen
void setup( void )
{
    bit_init(HCT595,DATA ,OUT);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 71 00 	call	0xe2	; 0xe2 <bit_init>
    bit_init(HCT595,SHIFT,OUT);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 71 00 	call	0xe2	; 0xe2 <bit_init>
    bit_init(HCT595,STORE,OUT);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	85 e2       	ldi	r24, 0x25	; 37
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 71 00 	call	0xe2	; 0xe2 <bit_init>
    bit_init(Taster,S1,IN);
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	8b e2       	ldi	r24, 0x2B	; 43
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 71 00 	call	0xe2	; 0xe2 <bit_init>
 262:	08 95       	ret

00000264 <srg_write>:
        }
    }
}

void srg_write(uint8_t data)
{
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	08 2f       	mov	r16, r24
    int8_t n;                               // n muss < 0 werden können!!

    bit_write(HCT595,STORE,0);              // STCP = 0
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	85 e2       	ldi	r24, 0x25	; 37
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 ff 00 	call	0x1fe	; 0x1fe <bit_write>

    //Schieberegister füllen
    bit_write(HCT595,SHIFT,0);              // SHCP = 0
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	85 e2       	ldi	r24, 0x25	; 37
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 ff 00 	call	0x1fe	; 0x1fe <bit_write>
 286:	c7 e0       	ldi	r28, 0x07	; 7
 288:	d0 e0       	ldi	r29, 0x00	; 0
    for (n = 7; n >= 0; n--)
    {
        bit_write(HCT595,DATA,data>>n);     // schieben msb first
 28a:	10 e0       	ldi	r17, 0x00	; 0
 28c:	a8 01       	movw	r20, r16
 28e:	0c 2e       	mov	r0, r28
 290:	02 c0       	rjmp	.+4      	; 0x296 <srg_write+0x32>
 292:	55 95       	asr	r21
 294:	47 95       	ror	r20
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <srg_write+0x2e>
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	85 e2       	ldi	r24, 0x25	; 37
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <bit_write>
        bit_write(HCT595,SHIFT,1);          // 0 --> 1 Flanke
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	85 e2       	ldi	r24, 0x25	; 37
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <bit_write>
        bit_write(HCT595,SHIFT,0);          // SHCP = 0
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	85 e2       	ldi	r24, 0x25	; 37
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <bit_write>
 2bc:	21 97       	sbiw	r28, 0x01	; 1
 2be:	30 f7       	brcc	.-52     	; 0x28c <srg_write+0x28>
    }

    bit_write(HCT595,STORE,1);              // STCP = 1 (ausgeben)   
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	85 e2       	ldi	r24, 0x25	; 37
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <bit_write>
    bit_write(HCT595,STORE,0);              // STCP = 0
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	85 e2       	ldi	r24, 0x25	; 37
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <bit_write>
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <main>:

int main( void )
{
    uint8_t i;
    
    setup();
 2e2:	0e 94 19 01 	call	0x232	; 0x232 <setup>
 2e6:	0f 2e       	mov	r0, r31
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ef 2e       	mov	r14, r31
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	ff 2e       	mov	r15, r31
 2f0:	f0 2d       	mov	r31, r0
 2f2:	00 e1       	ldi	r16, 0x10	; 16
 2f4:	11 e0       	ldi	r17, 0x01	; 1
 2f6:	e7 01       	movw	r28, r14

    while(1)
    {
        for(i=0;i<16;i++)
        {
            srg_write(seg7code[i]);
 2f8:	89 91       	ld	r24, Y+
 2fa:	0e 94 32 01 	call	0x264	; 0x264 <srg_write>
            while(bit_read(Taster,S1) == 1);
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	8b e2       	ldi	r24, 0x2B	; 43
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 da 00 	call	0x1b4	; 0x1b4 <bit_read>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	c9 f3       	breq	.-14     	; 0x2fe <main+0x1c>
            delay_ms(20);
 30c:	84 e1       	ldi	r24, 0x14	; 20
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
            while(bit_read(Taster,S1) == 0);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8b e2       	ldi	r24, 0x2B	; 43
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <bit_read>
 31e:	88 23       	and	r24, r24
 320:	c9 f3       	breq	.-14     	; 0x314 <main+0x32>
            delay_ms(20);
 322:	84 e1       	ldi	r24, 0x14	; 20
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
    
    setup();

    while(1)
    {
        for(i=0;i<16;i++)
 32a:	c0 17       	cp	r28, r16
 32c:	d1 07       	cpc	r29, r17
 32e:	21 f7       	brne	.-56     	; 0x2f8 <main+0x16>
 330:	e2 cf       	rjmp	.-60     	; 0x2f6 <main+0x14>

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>

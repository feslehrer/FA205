
7_1_Ampelsteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002d0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800118  00800118  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108e  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e5  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c64  00000000  00000000  00001c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  00002e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb9  00000000  00000000  00003417  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_1>
   8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9e:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
uint8_t Ampelwerte[] = {0x09, 0x0b, 0x0c, 0x0a, 0x09, 0x19, 0x21, 0x11};	//Ampelwerte
uint16_t zeit[]      = {2000,  800, 3000,  400, 1000,  800, 5000,  400};	//Zeitwerte

void setup ( void )
{  // Initialisierungen
  byte_init(Ampel,OUT);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	88 e2       	ldi	r24, 0x28	; 40
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 4a 01 	call	0x294	; 0x294 <byte_init>
  b0:	08 95       	ret

000000b2 <main>:
}

int main(void)
{
  setup();
  b2:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
  
  while (1)                 // Endlosschleife loop()
  {
    for (phase = 0; phase< 8; ++phase)		// Zähler 0 bis 7
  b6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
  ba:	e0 e0       	ldi	r30, 0x00	; 0
    {
      byte_write(Ampel,Ampelwerte[phase]);
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	e0 5f       	subi	r30, 0xF0	; 240
  c0:	fe 4f       	sbci	r31, 0xFE	; 254
  c2:	60 81       	ld	r22, Z
  c4:	88 e2       	ldi	r24, 0x28	; 40
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <byte_write>
      delay_ms(zeit[phase]);
  cc:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 81       	ld	r24, Z
  dc:	91 81       	ldd	r25, Z+1	; 0x01
  de:	0e 94 88 00 	call	0x110	; 0x110 <delay_ms>
{
  setup();
  
  while (1)                 // Endlosschleife loop()
  {
    for (phase = 0; phase< 8; ++phase)		// Zähler 0 bis 7
  e2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
  e6:	ef 5f       	subi	r30, 0xFF	; 255
  e8:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <__data_end>
  ec:	e8 30       	cpi	r30, 0x08	; 8
  ee:	30 f3       	brcs	.-52     	; 0xbc <main+0xa>
  f0:	e2 cf       	rjmp	.-60     	; 0xb6 <main+0x4>

000000f2 <delay_100us>:

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	61 f0       	breq	.+24     	; 0x10e <delay_100us+0x1c>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fa:	40 e9       	ldi	r20, 0x90	; 144
  fc:	51 e0       	ldi	r21, 0x01	; 1
  fe:	fa 01       	movw	r30, r20
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <delay_100us+0xe>
	{
		_delay_us(100);
		n++;
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
 108:	82 17       	cp	r24, r18
 10a:	93 07       	cpc	r25, r19
 10c:	c1 f7       	brne	.-16     	; 0xfe <delay_100us+0xc>
 10e:	08 95       	ret

00000110 <delay_ms>:
		n++;
	}
}

void delay_ms( uint16_t millisekunden)
{
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	uint16_t n = 0;
	
	while(n < millisekunden)
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	59 f0       	breq	.+22     	; 0x132 <delay_ms+0x22>
 11c:	8c 01       	movw	r16, r24
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_100us(10);
 122:	8a e0       	ldi	r24, 0x0A	; 10
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 79 00 	call	0xf2	; 0xf2 <delay_100us>
		n++;
 12a:	21 96       	adiw	r28, 0x01	; 1

void delay_ms( uint16_t millisekunden)
{
	uint16_t n = 0;
	
	while(n < millisekunden)
 12c:	0c 17       	cp	r16, r28
 12e:	1d 07       	cpc	r17, r29
 130:	c1 f7       	brne	.-16     	; 0x122 <delay_ms+0x12>
	{
		delay_100us(10);
		n++;
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <__vector_1>:

void serial_interrupt_init( void (*sr) (void))
{ 
	rs232_init();  // Serielle Schnittstelle initialisieren
	my_datareceived = sr;
}
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	e8 98       	cbi	0x1d, 0	; 29
 160:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <my_interrupt0>
 164:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <my_interrupt0+0x1>
 168:	09 95       	icall
 16a:	e8 9a       	sbi	0x1d, 0	; 29
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_2>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
 1b0:	e9 98       	cbi	0x1d, 1	; 29
 1b2:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <my_interrupt1>
 1b6:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <my_interrupt1+0x1>
 1ba:	09 95       	icall
 1bc:	e9 9a       	sbi	0x1d, 1	; 29
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_14>:
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
 206:	ce e6       	ldi	r28, 0x6E	; 110
 208:	d0 e0       	ldi	r29, 0x00	; 0
 20a:	88 81       	ld	r24, Y
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	88 83       	st	Y, r24
 210:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <my_timer>
 214:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <my_timer+0x1>
 218:	09 95       	icall
 21a:	88 81       	ld	r24, Y
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	88 83       	st	Y, r24
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <__vector_18>:

ISR(USART_RX_vect)                  // Interrupt-Vektor
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	//UCSR0B &= ~(1<<RXCIE0);         // Empfangsinterrupt ausschalten
	my_datareceived();                // Aufruf der Benutzer-ISR
 268:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <my_datareceived>
 26c:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <my_datareceived+0x1>
 270:	09 95       	icall
  //UCSR0B |= (1<<RXCIE0);          // Empfangsinterrupt einschalten
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <byte_init>:
{
  if      (byte_adr == &PORTD)   return PIND;
  else if (byte_adr == &PORTB)   return PINB;
  else if (byte_adr == &PORTC)   return PINC;
  else return 0;
}
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	61 30       	cpi	r22, 0x01	; 1
 298:	09 f0       	breq	.+2      	; 0x29c <byte_init+0x8>
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	21 95       	neg	r18
 29e:	8b 32       	cpi	r24, 0x2B	; 43
 2a0:	91 05       	cpc	r25, r1
 2a2:	11 f4       	brne	.+4      	; 0x2a8 <byte_init+0x14>
 2a4:	2a b9       	out	0x0a, r18	; 10
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <byte_init+0x26>
 2a8:	85 32       	cpi	r24, 0x25	; 37
 2aa:	91 05       	cpc	r25, r1
 2ac:	11 f4       	brne	.+4      	; 0x2b2 <byte_init+0x1e>
 2ae:	24 b9       	out	0x04, r18	; 4
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <byte_init+0x26>
 2b2:	88 32       	cpi	r24, 0x28	; 40
 2b4:	91 05       	cpc	r25, r1
 2b6:	09 f4       	brne	.+2      	; 0x2ba <byte_init+0x26>
 2b8:	27 b9       	out	0x07, r18	; 7
 2ba:	61 11       	cpse	r22, r1
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <byte_init+0x30>
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
 2c4:	08 95       	ret

000002c6 <byte_write>:

//PORT als Ausgabe
void byte_write(volatile uint8_t *byte_adr, uint8_t byte_wert)
{
  *byte_adr = byte_wert;
 2c6:	fc 01       	movw	r30, r24
 2c8:	60 83       	st	Z, r22
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>

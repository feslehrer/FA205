
6_3_Datenlogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028c  00800100  00001b12  00001ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080038c  0080038c  00001e32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a59  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113e  00000000  00000000  00005ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c7f  00000000  00000000  00006ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a1c  00000000  00000000  00008a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b09  00000000  00000000  0000947c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027d0  00000000  00000000  00009f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000c755  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__vector_1>
       8:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_2>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__vector_14>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_18>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      68:	02 01       	movw	r0, r4
      6a:	94 00       	.word	0x0094	; ????
      6c:	36 01       	movw	r6, r12
      6e:	1a 01       	movw	r2, r20
      70:	36 01       	movw	r6, r12
      72:	36 01       	movw	r6, r12
      74:	36 01       	movw	r6, r12
      76:	36 01       	movw	r6, r12
      78:	9f 00       	.word	0x009f	; ????
      7a:	bb 00       	.word	0x00bb	; ????
      7c:	36 01       	movw	r6, r12
      7e:	b8 00       	.word	0x00b8	; ????
      80:	36 01       	movw	r6, r12
      82:	36 01       	movw	r6, r12
      84:	d7 00       	.word	0x00d7	; ????
      86:	b2 00       	.word	0x00b2	; ????
      88:	36 01       	movw	r6, r12
      8a:	36 01       	movw	r6, r12
      8c:	36 01       	movw	r6, r12
      8e:	36 01       	movw	r6, r12
      90:	36 01       	movw	r6, r12
      92:	36 01       	movw	r6, r12
      94:	36 01       	movw	r6, r12
      96:	36 01       	movw	r6, r12
      98:	36 01       	movw	r6, r12
      9a:	36 01       	movw	r6, r12
      9c:	36 01       	movw	r6, r12
      9e:	36 01       	movw	r6, r12
      a0:	36 01       	movw	r6, r12
      a2:	36 01       	movw	r6, r12
      a4:	36 01       	movw	r6, r12
      a6:	36 01       	movw	r6, r12
      a8:	02 01       	movw	r0, r4
      aa:	94 00       	.word	0x0094	; ????
      ac:	36 01       	movw	r6, r12
      ae:	1a 01       	movw	r2, r20
      b0:	36 01       	movw	r6, r12
      b2:	36 01       	movw	r6, r12
      b4:	36 01       	movw	r6, r12
      b6:	36 01       	movw	r6, r12
      b8:	9f 00       	.word	0x009f	; ????
      ba:	bb 00       	.word	0x00bb	; ????
      bc:	36 01       	movw	r6, r12
      be:	b8 00       	.word	0x00b8	; ????
      c0:	36 01       	movw	r6, r12
      c2:	36 01       	movw	r6, r12
      c4:	d7 00       	.word	0x00d7	; ????
      c6:	b2 00       	.word	0x00b2	; ????

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	13 e0       	ldi	r17, 0x03	; 3
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e2 e1       	ldi	r30, 0x12	; 18
      dc:	fb e1       	ldi	r31, 0x1B	; 27
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 38       	cpi	r26, 0x8C	; 140
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	23 e0       	ldi	r18, 0x03	; 3
      ec:	ac e8       	ldi	r26, 0x8C	; 140
      ee:	b3 e0       	ldi	r27, 0x03	; 3
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a8 3a       	cpi	r26, 0xA8	; 168
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 c2 01 	call	0x384	; 0x384 <main>
      fe:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <serial_interrupt_isr>:
		delay_ms(1000);
  }
}
//*******************************************************************
void serial_interrupt_isr(void)
{
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	cf 93       	push	r28
  uint8_t c;
  uint32_t n;
  int8_t test = 0;
  
  c=rs232_get();
     10c:	0e 94 de 02 	call	0x5bc	; 0x5bc <rs232_get>
  
  switch (c)
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	fc 01       	movw	r30, r24
     114:	e5 54       	subi	r30, 0x45	; 69
     116:	f1 09       	sbc	r31, r1
     118:	e0 33       	cpi	r30, 0x30	; 48
     11a:	f1 05       	cpc	r31, r1
     11c:	08 f0       	brcs	.+2      	; 0x120 <serial_interrupt_isr+0x1a>
     11e:	a6 c0       	rjmp	.+332    	; 0x26c <serial_interrupt_isr+0x166>
     120:	ec 5c       	subi	r30, 0xCC	; 204
     122:	ff 4f       	sbci	r31, 0xFF	; 255
     124:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__tablejump2__>
  {
    case 'f':
    case 'F': //Toggle Temperaturanzeige
              if (temp_anz == 0) temp_anz = 1;
     128:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <temp_anz>
     12c:	81 11       	cpse	r24, r1
     12e:	04 c0       	rjmp	.+8      	; 0x138 <serial_interrupt_isr+0x32>
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <temp_anz>
     136:	9a c0       	rjmp	.+308    	; 0x26c <serial_interrupt_isr+0x166>
              else               temp_anz = 0;
     138:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <temp_anz>
     13c:	97 c0       	rjmp	.+302    	; 0x26c <serial_interrupt_isr+0x166>
              break;
    case 'm':
    case 'M': //Toggle Anzeigemodus (plain, name)
              switch (anz_mode)
     13e:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <__data_end>
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	41 f0       	breq	.+16     	; 0x156 <serial_interrupt_isr+0x50>
     146:	18 f0       	brcs	.+6      	; 0x14e <serial_interrupt_isr+0x48>
     148:	82 30       	cpi	r24, 0x02	; 2
     14a:	49 f0       	breq	.+18     	; 0x15e <serial_interrupt_isr+0x58>
     14c:	8f c0       	rjmp	.+286    	; 0x26c <serial_interrupt_isr+0x166>
              {
                case 0: anz_mode = 1;break;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <__data_end>
     154:	8b c0       	rjmp	.+278    	; 0x26c <serial_interrupt_isr+0x166>
                case 1: anz_mode = 2;break;
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <__data_end>
     15c:	87 c0       	rjmp	.+270    	; 0x26c <serial_interrupt_isr+0x166>
                case 2: anz_mode = 0;break;
     15e:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <__data_end>
     162:	84 c0       	rjmp	.+264    	; 0x26c <serial_interrupt_isr+0x166>
                default: break;
              }              
              break;
    case 't':
    case 'T': // Zeit einstellen
              rs232_set_time();
     164:	0e 94 80 04 	call	0x900	; 0x900 <rs232_set_time>
              rs232_put('\n');
     168:	8a e0       	ldi	r24, 0x0A	; 10
     16a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
              break;
     16e:	7e c0       	rjmp	.+252    	; 0x26c <serial_interrupt_isr+0x166>
    case 'p':
    case 'P': // alle Datensätze drucken
              serial_print_all_records();
     170:	0e 94 35 05 	call	0xa6a	; 0xa6a <serial_print_all_records>
              break;
     174:	7b c0       	rjmp	.+246    	; 0x26c <serial_interrupt_isr+0x166>
    case 'n':  
    case 'N': // Aufzeichnung neustarten
              rs232_print("Alle Datensätze werden gelöscht [j/n]: ");
     176:	8a e1       	ldi	r24, 0x1A	; 26
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              while((c=rs232_get())== 0);
     17e:	0e 94 de 02 	call	0x5bc	; 0x5bc <rs232_get>
     182:	c8 2f       	mov	r28, r24
     184:	88 23       	and	r24, r24
     186:	d9 f3       	breq	.-10     	; 0x17e <serial_interrupt_isr+0x78>
              rs232_put(c);
     188:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
              if ((c=='j')||(c=='J'))  
     18c:	cf 7d       	andi	r28, 0xDF	; 223
     18e:	ca 34       	cpi	r28, 0x4A	; 74
     190:	51 f4       	brne	.+20     	; 0x1a6 <serial_interrupt_isr+0xa0>
              {
                aktueller_Datensatz = 0;
     192:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <aktueller_Datensatz+0x1>
     196:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <aktueller_Datensatz>
                write_current_recordnumber_to_rtc(aktueller_Datensatz);
     19a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <aktueller_Datensatz>
     19e:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <aktueller_Datensatz+0x1>
     1a2:	0e 94 0b 05 	call	0xa16	; 0xa16 <write_current_recordnumber_to_rtc>
              }                
              rs232_put('\n');
     1a6:	8a e0       	ldi	r24, 0x0A	; 10
     1a8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
              break;
     1ac:	5f c0       	rjmp	.+190    	; 0x26c <serial_interrupt_isr+0x166>
    case 's':
    case 'S': // Sample-Zeit ändern
              rs232_print("\nSample-Zeit in s[");rs232_int(_SAMPLE_TIME_);rs232_print("]: ");
     1ae:	82 e4       	ldi	r24, 0x42	; 66
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_SAMPLE_TIME_>
     1ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_SAMPLE_TIME_+0x1>
     1be:	0e 94 37 03 	call	0x66e	; 0x66e <rs232_int>
     1c2:	83 ee       	ldi	r24, 0xE3	; 227
     1c4:	92 e0       	ldi	r25, 0x02	; 2
     1c6:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              if (((n = rs232_get_sampletime()) >= 60)&&(n<=0xffff)) 
     1ca:	0e 94 83 06 	call	0xd06	; 0xd06 <rs232_get_sampletime>
     1ce:	8b 01       	movw	r16, r22
     1d0:	9c 01       	movw	r18, r24
     1d2:	0c 53       	subi	r16, 0x3C	; 60
     1d4:	11 09       	sbc	r17, r1
     1d6:	21 09       	sbc	r18, r1
     1d8:	31 09       	sbc	r19, r1
     1da:	04 3c       	cpi	r16, 0xC4	; 196
     1dc:	1f 4f       	sbci	r17, 0xFF	; 255
     1de:	21 05       	cpc	r18, r1
     1e0:	31 05       	cpc	r19, r1
     1e2:	58 f4       	brcc	.+22     	; 0x1fa <serial_interrupt_isr+0xf4>
              {
                _SAMPLE_TIME_ = n;
     1e4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_SAMPLE_TIME_+0x1>
     1e8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_SAMPLE_TIME_>
                write_current_sampletime_to_rtc(_SAMPLE_TIME_);
     1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_SAMPLE_TIME_>
     1f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_SAMPLE_TIME_+0x1>
     1f4:	0e 94 29 05 	call	0xa52	; 0xa52 <write_current_sampletime_to_rtc>
     1f8:	39 c0       	rjmp	.+114    	; 0x26c <serial_interrupt_isr+0x166>
              }              
              else rs232_print("60s <= Sampeltime <= 65535s !!!\n");            
     1fa:	85 e5       	ldi	r24, 0x55	; 85
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     202:	34 c0       	rjmp	.+104    	; 0x26c <serial_interrupt_isr+0x166>
              break;
    case 'e':
    case 'E': // EEPROM Speichertest
              lcd_clear();
     204:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <lcd_clear>
              lcd_setcursor(1,1);
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
              lcd_print("EEPROM #1 test");
     210:	86 e7       	ldi	r24, 0x76	; 118
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
              test = eeprom_memtest(EEPROM_1);
     218:	80 ea       	ldi	r24, 0xA0	; 160
     21a:	0e 94 65 07 	call	0xeca	; 0xeca <eeprom_memtest>
              if (test == -1) {lcd_setcursor(1,1); lcd_print("!Speicherfehler!");while(1);}              
     21e:	8f 3f       	cpi	r24, 0xFF	; 255
     220:	29 f5       	brne	.+74     	; 0x26c <serial_interrupt_isr+0x166>
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
     22a:	85 e8       	ldi	r24, 0x85	; 133
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
     232:	ff cf       	rjmp	.-2      	; 0x232 <serial_interrupt_isr+0x12c>
              break;
    case 'h':
    case 'H': // Hilfe anzeigen
              rs232_print("\nHilfe:\n");
     234:	86 e9       	ldi	r24, 0x96	; 150
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              rs232_print("t: Datum und Zeit einstellen\n");
     23c:	8f e9       	ldi	r24, 0x9F	; 159
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              rs232_print("f: Temperatur fortlaufend ausgeben\n   [m: Umschalten des Anzeige-Modus]\n");              
     244:	8d eb       	ldi	r24, 0xBD	; 189
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              rs232_print("p: Alle Datensätze drucken\n");
     24c:	86 e0       	ldi	r24, 0x06	; 6
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              rs232_print("n: Aufzeichnung neustarten\n");
     254:	82 e2       	ldi	r24, 0x22	; 34
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              rs232_print("s: Sample-Zeit einstellen [default 120s]\n");
     25c:	8e e3       	ldi	r24, 0x3E	; 62
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              rs232_print("e: EEPROM Speichertest\n"); 
     264:	88 e6       	ldi	r24, 0x68	; 104
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
              break;
    default:  break;           
  }
}
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <setup>:
volatile uint8_t  temp_anz = 0;               // Merker für Fortlaufende Temperaturanzeige rs232
volatile uint8_t  anz_mode = 0;               // Merker für Anzeigemodus (plain, name)
//*******************************************************************
void setup(void)
{  // Initialisierungen
  lcd_init(); 
     274:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_init>
	i2c_init();
     278:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_init>
	rtc_init();
     27c:	0e 94 32 0a 	call	0x1464	; 0x1464 <rtc_init>
	eeprom_init();
     280:	0e 94 0e 07 	call	0xe1c	; 0xe1c <eeprom_init>
  rs232_init();
     284:	0e 94 d7 02 	call	0x5ae	; 0x5ae <rs232_init>
  serial_interrupt_init(serial_interrupt_isr);
     288:	83 e8       	ldi	r24, 0x83	; 131
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 41 08 	call	0x1082	; 0x1082 <serial_interrupt_init>
  
  // Definition der Sendezeichen
  lcd_defchar(zeichen1,1);
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	8e e8       	ldi	r24, 0x8E	; 142
     294:	93 e0       	ldi	r25, 0x03	; 3
     296:	0e 94 a7 09 	call	0x134e	; 0x134e <lcd_defchar>
  lcd_defchar(zeichen2,2);
     29a:	62 e0       	ldi	r22, 0x02	; 2
     29c:	82 e1       	ldi	r24, 0x12	; 18
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 a7 09 	call	0x134e	; 0x134e <lcd_defchar>
  lcd_defchar(zeichen3,3);
     2a4:	63 e0       	ldi	r22, 0x03	; 3
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 a7 09 	call	0x134e	; 0x134e <lcd_defchar>
  lcd_defchar(zeichen4,4);
     2ae:	64 e0       	ldi	r22, 0x04	; 4
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	0e 94 a7 09 	call	0x134e	; 0x134e <lcd_defchar>
  //-Startbildschirm-------------------------  
	lcd_clear();
     2b8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <lcd_clear>
	lcd_setcursor(1,1);
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
	lcd_print("FES Datenlogger");
     2c4:	80 e8       	ldi	r24, 0x80	; 128
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
	lcd_setcursor(2,1);
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
	lcd_print("COM: 9600Bd");
     2d4:	80 e9       	ldi	r24, 0x90	; 144
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
  delay_ms(4000);
     2dc:	80 ea       	ldi	r24, 0xA0	; 160
     2de:	9f e0       	ldi	r25, 0x0F	; 15
     2e0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <delay_ms>
	lcd_clear();
     2e4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <lcd_clear>
  //--------------------------
  aktueller_Datensatz = read_current_recordnumber_from_rtc();
     2e8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <read_current_recordnumber_from_rtc>
     2ec:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <aktueller_Datensatz+0x1>
     2f0:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <aktueller_Datensatz>
	aktueller_Datensatz++;		// Damit die letzten Daten nicht überschrieben werden.
     2f4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <aktueller_Datensatz>
     2f8:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <aktueller_Datensatz+0x1>
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <aktueller_Datensatz+0x1>
     302:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <aktueller_Datensatz>
  _SAMPLE_TIME_ = read_current_sampletime_from_rtc();
     306:	0e 94 17 05 	call	0xa2e	; 0xa2e <read_current_sampletime_from_rtc>
     30a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_SAMPLE_TIME_+0x1>
     30e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_SAMPLE_TIME_>
  if(_SAMPLE_TIME_ < 60) {_SAMPLE_TIME_ = 60; write_current_sampletime_to_rtc(_SAMPLE_TIME_);}
     312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_SAMPLE_TIME_>
     316:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_SAMPLE_TIME_+0x1>
     31a:	cc 97       	sbiw	r24, 0x3c	; 60
     31c:	60 f4       	brcc	.+24     	; 0x336 <setup+0xc2>
     31e:	8c e3       	ldi	r24, 0x3C	; 60
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_SAMPLE_TIME_+0x1>
     326:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_SAMPLE_TIME_>
     32a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_SAMPLE_TIME_>
     32e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_SAMPLE_TIME_+0x1>
     332:	0e 94 29 05 	call	0xa52	; 0xa52 <write_current_sampletime_to_rtc>
     336:	08 95       	ret

00000338 <lcd_print_timestamp>:
  }
}
//*******************************************************************
void lcd_print_timestamp(void)
{
	lcd_setcursor(1,1);
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
	lcd_dd(tag); lcd_char('.'); lcd_dd(monat); lcd_char('.');	lcd_dd(jahr);
     340:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <tag>
     344:	0e 94 cb 09 	call	0x1396	; 0x1396 <lcd_dd>
     348:	8e e2       	ldi	r24, 0x2E	; 46
     34a:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
     34e:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <monat>
     352:	0e 94 cb 09 	call	0x1396	; 0x1396 <lcd_dd>
     356:	8e e2       	ldi	r24, 0x2E	; 46
     358:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
     35c:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <jahr>
     360:	0e 94 cb 09 	call	0x1396	; 0x1396 <lcd_dd>
  lcd_print("   "); lcd_dd(stunde); lcd_char(':'); lcd_dd(minute);
     364:	8c e9       	ldi	r24, 0x9C	; 156
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
     36c:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <stunde>
     370:	0e 94 cb 09 	call	0x1396	; 0x1396 <lcd_dd>
     374:	8a e3       	ldi	r24, 0x3A	; 58
     376:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
     37a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
     37e:	0e 94 cb 09 	call	0x1396	; 0x1396 <lcd_dd>
     382:	08 95       	ret

00000384 <main>:
  _SAMPLE_TIME_ = read_current_sampletime_from_rtc();
  if(_SAMPLE_TIME_ < 60) {_SAMPLE_TIME_ = 60; write_current_sampletime_to_rtc(_SAMPLE_TIME_);}
}
//*******************************************************************
int main(void)
{
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <main+0x6>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t sample_sekunde;
  uint8_t n=1;
  
  setup();
     38e:	0e 94 3a 01 	call	0x274	; 0x274 <setup>
	
	serial_interrupt_enable();
     392:	0e 94 74 08 	call	0x10e8	; 0x10e8 <serial_interrupt_enable>
}
//*******************************************************************
int main(void)
{
	volatile uint16_t sample_sekunde;
  uint8_t n=1;
     396:	ff 24       	eor	r15, r15
     398:	f3 94       	inc	r15

  while (1)      // Endlosschleife loop()
  { 
		temperatur = lm75_read();
		rtc_get();
		sample_sekunde = sekunde + minute * 60 + stunde * 60*60;
     39a:	0f 2e       	mov	r0, r31
     39c:	fc e3       	ldi	r31, 0x3C	; 60
     39e:	ef 2e       	mov	r14, r31
     3a0:	f0 2d       	mov	r31, r0
     3a2:	00 e1       	ldi	r16, 0x10	; 16
     3a4:	1e e0       	ldi	r17, 0x0E	; 14
	
	serial_interrupt_enable();

  while (1)      // Endlosschleife loop()
  { 
		temperatur = lm75_read();
     3a6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <lm75_read>
     3aa:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <temperatur+0x1>
     3ae:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <temperatur>
		rtc_get();
     3b2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <rtc_get>
		sample_sekunde = sekunde + minute * 60 + stunde * 60*60;
     3b6:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <sekunde>
     3ba:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <minute>
     3be:	40 91 9b 03 	lds	r20, 0x039B	; 0x80039b <stunde>
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	e2 9e       	mul	r14, r18
     3c6:	80 0d       	add	r24, r0
     3c8:	91 1d       	adc	r25, r1
     3ca:	11 24       	eor	r1, r1
     3cc:	40 9f       	mul	r20, r16
     3ce:	90 01       	movw	r18, r0
     3d0:	41 9f       	mul	r20, r17
     3d2:	30 0d       	add	r19, r0
     3d4:	11 24       	eor	r1, r1
     3d6:	82 0f       	add	r24, r18
     3d8:	93 1f       	adc	r25, r19
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
		if((sample_sekunde % _SAMPLE_TIME_) == 0)
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	9a 81       	ldd	r25, Y+2	; 0x02
     3e2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_SAMPLE_TIME_>
     3e6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_SAMPLE_TIME_+0x1>
     3ea:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__udivmodhi4>
     3ee:	89 2b       	or	r24, r25
     3f0:	f1 f4       	brne	.+60     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
      if(aktueller_Datensatz >= MAX_RECORD) aktueller_Datensatz = 0; // Neubeginn der Aufzeichnung
     3f2:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <aktueller_Datensatz>
     3f6:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <aktueller_Datensatz+0x1>
     3fa:	8f 3f       	cpi	r24, 0xFF	; 255
     3fc:	9f 40       	sbci	r25, 0x0F	; 15
     3fe:	20 f0       	brcs	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     400:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <aktueller_Datensatz+0x1>
     404:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <aktueller_Datensatz>
      write_current_recordnumber_to_rtc(aktueller_Datensatz);
     408:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <aktueller_Datensatz>
     40c:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <aktueller_Datensatz+0x1>
     410:	0e 94 0b 05 	call	0xa16	; 0xa16 <write_current_recordnumber_to_rtc>
			eeprom_set_record(EEPROM_1,aktueller_Datensatz++);
     414:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <aktueller_Datensatz>
     418:	70 91 9a 03 	lds	r23, 0x039A	; 0x80039a <aktueller_Datensatz+0x1>
     41c:	cb 01       	movw	r24, r22
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <aktueller_Datensatz+0x1>
     424:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <aktueller_Datensatz>
     428:	80 ea       	ldi	r24, 0xA0	; 160
     42a:	0e 94 05 04 	call	0x80a	; 0x80a <eeprom_set_record>
		}
	  lcd_print_timestamp();
     42e:	0e 94 9c 01 	call	0x338	; 0x338 <lcd_print_timestamp>
		lcd_setcursor(2,1);
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
    lcd_int(aktueller_Datensatz); lcd_char(':');
     43a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <aktueller_Datensatz>
     43e:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <aktueller_Datensatz+0x1>
     442:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_int>
     446:	8a e3       	ldi	r24, 0x3A	; 58
     448:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
    lcd_setcursor(2,8);
     44c:	68 e0       	ldi	r22, 0x08	; 8
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
		lcd_print_temperatur(temperatur);   // Ausgabe
     454:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <temperatur>
     458:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <temperatur+0x1>
     45c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <lcd_print_temperatur>
    lcd_setcursor(2,16);                // Sendeanzeige
     460:	60 e1       	ldi	r22, 0x10	; 16
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
    if(temp_anz)
     468:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <temp_anz>
     46c:	88 23       	and	r24, r24
     46e:	a1 f0       	breq	.+40     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
    {
      rs232_print_temperatur(temperatur,anz_mode);
     470:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <__data_end>
     474:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <temperatur>
     478:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <temperatur+0x1>
     47c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <rs232_print_temperatur>
      lcd_char(n++);
     480:	dd 24       	eor	r13, r13
     482:	d3 94       	inc	r13
     484:	df 0c       	add	r13, r15
     486:	8f 2d       	mov	r24, r15
     488:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
      if (n>4) n = 1;
     48c:	84 e0       	ldi	r24, 0x04	; 4
     48e:	8d 15       	cp	r24, r13
     490:	38 f4       	brcc	.+14     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     492:	ff 24       	eor	r15, r15
     494:	f3 94       	inc	r15
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
    }
    else lcd_char(' ');    
     498:	80 e2       	ldi	r24, 0x20	; 32
     49a:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		lcd_print_temperatur(temperatur);   // Ausgabe
    lcd_setcursor(2,16);                // Sendeanzeige
    if(temp_anz)
    {
      rs232_print_temperatur(temperatur,anz_mode);
      lcd_char(n++);
     4a0:	fd 2c       	mov	r15, r13
      if (n>4) n = 1;
    }
    else lcd_char(' ');    
		delay_ms(1000);
     4a2:	88 ee       	ldi	r24, 0xE8	; 232
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <delay_ms>
  }
     4aa:	7d cf       	rjmp	.-262    	; 0x3a6 <main+0x22>

000004ac <i2c_init>:
	#ifdef _ATMEGA328_
		#ifdef _ATMEGA328PB_
		  TWSR0 &= ~((1<<TWPS0)|(1<<TWPS1));	// Prescaler = 1
		  TWBR0 = ((F_CPU / _I2C_FREQUENZ_) - 16) / 2;
		#else
		  TWSR &= ~((1<<TWPS0)|(1<<TWPS1));	// Prescaler = 1
     4ac:	e9 eb       	ldi	r30, 0xB9	; 185
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	8c 7f       	andi	r24, 0xFC	; 252
     4b4:	80 83       	st	Z, r24
		  TWBR = ((F_CPU / _I2C_FREQUENZ_) - 16) / 2;
     4b6:	80 ec       	ldi	r24, 0xC0	; 192
     4b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     4bc:	08 95       	ret

000004be <i2c_start>:
			TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// Control Register
			/*wait, until start condition has been sent --> ACK*/
			while (!(TWCR0 & (1<<TWINT)));
		#else
			/*writing a one to TWINT clears it, TWSTA=Start, TWEN=TWI-enable*/
			TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// Control Register
     4be:	84 ea       	ldi	r24, 0xA4	; 164
     4c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			/*wait, until start condition has been sent --> ACK*/
			while (!(TWCR & (1<<TWINT)));
     4c4:	ec eb       	ldi	r30, 0xBC	; 188
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	88 23       	and	r24, r24
     4cc:	ec f7       	brge	.-6      	; 0x4c8 <i2c_start+0xa>
		#endif
	#endif
}
     4ce:	08 95       	ret

000004d0 <i2c_stop>:
  	#ifdef _ATMEGA328PB_
  	  /*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
  	  TWCR0 = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    #else
		  /*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
		  TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     4d0:	84 e9       	ldi	r24, 0x94	; 148
     4d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     4d6:	08 95       	ret

000004d8 <i2c_write>:
      if (((TWSR0 & 0xf8)== 0x18) || ((TWSR0 & 0xf8)== 0x28)) return ACK;
      if (((TWSR0 & 0xf8)== 0x20) || ((TWSR0 & 0xf8)== 0x30)) return NACK;
      return 0;	//Status Register
    #else
		  /*TWDR contains byte to send*/
		  TWDR = byte;
     4d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		  /*send content of TWDR*/
		  TWCR = (1<<TWINT) | (1<<TWEN);
     4dc:	84 e8       	ldi	r24, 0x84	; 132
     4de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		  /*wait, until byte has been sent --> ACK*/
		  while (!(TWCR & (1<<TWINT)));
     4e2:	ec eb       	ldi	r30, 0xBC	; 188
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	88 23       	and	r24, r24
     4ea:	ec f7       	brge	.-6      	; 0x4e6 <i2c_write+0xe>
		  // Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
		  if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
     4ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     4f0:	88 7f       	andi	r24, 0xF8	; 248
     4f2:	88 31       	cpi	r24, 0x18	; 24
     4f4:	91 f0       	breq	.+36     	; 0x51a <i2c_write+0x42>
     4f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     4fa:	88 7f       	andi	r24, 0xF8	; 248
     4fc:	88 32       	cpi	r24, 0x28	; 40
     4fe:	79 f0       	breq	.+30     	; 0x51e <i2c_write+0x46>
		  if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
     500:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     504:	88 7f       	andi	r24, 0xF8	; 248
     506:	80 32       	cpi	r24, 0x20	; 32
     508:	61 f0       	breq	.+24     	; 0x522 <i2c_write+0x4a>
     50a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
		  /*send content of TWDR*/
		  TWCR = (1<<TWINT) | (1<<TWEN);
		  /*wait, until byte has been sent --> ACK*/
		  while (!(TWCR & (1<<TWINT)));
		  // Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
		  if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
     50e:	98 7f       	andi	r25, 0xF8	; 248
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 33       	cpi	r25, 0x30	; 48
     514:	39 f0       	breq	.+14     	; 0x524 <i2c_write+0x4c>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	08 95       	ret
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	08 95       	ret
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	08 95       	ret
		  if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
     522:	81 e0       	ldi	r24, 0x01	; 1
		  return 0;	//Status Register
    #endif
	#endif
}
     524:	08 95       	ret

00000526 <i2c_read>:
  	
  	  /*wait, until byte has been received --> ACK*/
  	  while (!(TWCR0 & (1<<TWINT)));
  	  return TWDR0;
    #else
		  if (ack == ACK)
     526:	81 11       	cpse	r24, r1
     528:	04 c0       	rjmp	.+8      	; 0x532 <i2c_read+0xc>
			  /*send content of TWDR; TWEA = enable ACK*/
			  TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     52a:	84 ec       	ldi	r24, 0xC4	; 196
     52c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     530:	03 c0       	rjmp	.+6      	; 0x538 <i2c_read+0x12>
		  else 
			  /*send content of TWDR; NACK*/
			  TWCR = (1<<TWINT) | (1<<TWEN);
     532:	84 e8       	ldi	r24, 0x84	; 132
     534:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			
		  /*wait, until byte has been received --> ACK*/
		  while (!(TWCR & (1<<TWINT)));
     538:	ec eb       	ldi	r30, 0xBC	; 188
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	88 23       	and	r24, r24
     540:	ec f7       	brge	.-6      	; 0x53c <i2c_read+0x16>
		  return TWDR;
     542:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    #endif
	#endif
}
     546:	08 95       	ret

00000548 <rs232_baud>:
    UCSRC |= (1<<URSEL)|(3<<UCSZ0);    // Asynchron 8N1
    UBRRH = (uint8_t)( UART_UBRR_CALC( baud, F_CPU ) >> 8 );
    UBRRL = (uint8_t)  UART_UBRR_CALC( baud, F_CPU );
    #endif
    #ifdef _ATMEGA328_
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0);    // UART TX und RX einschalten
     548:	e1 ec       	ldi	r30, 0xC1	; 193
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	20 81       	ld	r18, Z
     54e:	28 61       	ori	r18, 0x18	; 24
     550:	20 83       	st	Z, r18
    UCSR0C |= (1<<USBS0) | (3<<UCSZ00);   // Asynchron 8N1
     552:	e2 ec       	ldi	r30, 0xC2	; 194
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	20 81       	ld	r18, Z
     558:	2e 60       	ori	r18, 0x0E	; 14
     55a:	20 83       	st	Z, r18
    UBRR0H = (uint8_t)( UART_UBRR_CALC( baud, F_CPU ) >> 8 );
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	aa 1f       	adc	r26, r26
     566:	bb 1f       	adc	r27, r27
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	aa 1f       	adc	r26, r26
     56e:	bb 1f       	adc	r27, r27
     570:	9c 01       	movw	r18, r24
     572:	ad 01       	movw	r20, r26
     574:	22 0f       	add	r18, r18
     576:	33 1f       	adc	r19, r19
     578:	44 1f       	adc	r20, r20
     57a:	55 1f       	adc	r21, r21
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	44 1f       	adc	r20, r20
     582:	55 1f       	adc	r21, r21
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	74 e2       	ldi	r23, 0x24	; 36
     588:	84 ef       	ldi	r24, 0xF4	; 244
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__udivmodsi4>
     590:	da 01       	movw	r26, r20
     592:	c9 01       	movw	r24, r18
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	a1 09       	sbc	r26, r1
     598:	b1 09       	sbc	r27, r1
     59a:	89 2f       	mov	r24, r25
     59c:	9a 2f       	mov	r25, r26
     59e:	ab 2f       	mov	r26, r27
     5a0:	bb 27       	eor	r27, r27
     5a2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t)  UART_UBRR_CALC( baud, F_CPU );
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     5ac:	08 95       	ret

000005ae <rs232_init>:
// RS232-Routinen zur Kommunikation mit PC-Terminal
//
// ****************************************************************************
void rs232_init(void)
{ 
  rs232_baud(BAUD);
     5ae:	60 e8       	ldi	r22, 0x80	; 128
     5b0:	75 e2       	ldi	r23, 0x25	; 37
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 a4 02 	call	0x548	; 0x548 <rs232_baud>
     5ba:	08 95       	ret

000005bc <rs232_get>:
  #ifdef _ATMEGA8_
   if (!(UCSRA & (1<<RXC))) return ('\0');    // Wenn kein Zeichen im Puffer, dann 0 zurückgeben!
   return UDR;                                // Zeichen zurückliefern
  #endif
  #ifdef _ATMEGA328_
   if (!(UCSR0A & (1<<RXC0))) return ('\0');    // Wenn kein Zeichen im Puffer, dann 0 zurückgeben!
     5bc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     5c0:	88 23       	and	r24, r24
     5c2:	1c f4       	brge	.+6      	; 0x5ca <rs232_get+0xe>
   return UDR0;                                // Zeichen zurückliefern
     5c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     5c8:	08 95       	ret
  #ifdef _ATMEGA8_
   if (!(UCSRA & (1<<RXC))) return ('\0');    // Wenn kein Zeichen im Puffer, dann 0 zurückgeben!
   return UDR;                                // Zeichen zurückliefern
  #endif
  #ifdef _ATMEGA328_
   if (!(UCSR0A & (1<<RXC0))) return ('\0');    // Wenn kein Zeichen im Puffer, dann 0 zurückgeben!
     5ca:	80 e0       	ldi	r24, 0x00	; 0
   return UDR0;                                // Zeichen zurückliefern
  #endif
}
     5cc:	08 95       	ret

000005ce <rs232_put>:
  #ifdef _ATMEGA8_
   while (!(UCSRA & (1<<UDRE)));              // Warten bis Sendebereit!
   UDR = value;
  #endif
  #ifdef _ATMEGA328_
   while (!(UCSR0A & (1<<UDRE0)));              // Warten bis Sendebereit!
     5ce:	e0 ec       	ldi	r30, 0xC0	; 192
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	90 81       	ld	r25, Z
     5d4:	95 ff       	sbrs	r25, 5
     5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <rs232_put+0x4>
   UDR0 = value;
     5d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     5dc:	08 95       	ret

000005de <rs232_print>:
  #endif
}

void rs232_print ( uint8_t *text )
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	ec 01       	movw	r28, r24
  while (*text != '\0')
     5e4:	88 81       	ld	r24, Y
     5e6:	88 23       	and	r24, r24
     5e8:	31 f0       	breq	.+12     	; 0x5f6 <rs232_print+0x18>
     5ea:	21 96       	adiw	r28, 0x01	; 1
  rs232_put(*text++);
     5ec:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
  #endif
}

void rs232_print ( uint8_t *text )
{
  while (*text != '\0')
     5f0:	89 91       	ld	r24, Y+
     5f2:	81 11       	cpse	r24, r1
     5f4:	fb cf       	rjmp	.-10     	; 0x5ec <rs232_print+0xe>
  rs232_put(*text++);
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <rs232_inputdd>:

// RS232-Erweiterungen sind nicht Teil der Technischen Richtlinie FA205!!
// Erzeugt ein Eingabeprompt am Terminal 00 .. 99
uint8_t rs232_inputdd(void )
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
  uint8_t buf1,buf2;
  do
  {
    while((buf1 = rs232_get()) == 0);
     600:	0e 94 de 02 	call	0x5bc	; 0x5bc <rs232_get>
     604:	88 23       	and	r24, r24
     606:	e1 f3       	breq	.-8      	; 0x600 <rs232_inputdd+0x4>
  } while ((buf1 < '0') || (buf1 > '9'));
     608:	d0 ed       	ldi	r29, 0xD0	; 208
     60a:	d8 0f       	add	r29, r24
     60c:	da 30       	cpi	r29, 0x0A	; 10
     60e:	c0 f7       	brcc	.-16     	; 0x600 <rs232_inputdd+0x4>

  rs232_put(buf1);    // Echo
     610:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>

  do
  {
    while((buf2 = rs232_get()) == 0);
     614:	0e 94 de 02 	call	0x5bc	; 0x5bc <rs232_get>
     618:	c8 2f       	mov	r28, r24
     61a:	88 23       	and	r24, r24
     61c:	d9 f3       	breq	.-10     	; 0x614 <rs232_inputdd+0x18>
  } while ((buf1 < '0') || (buf1 > '9'));

  rs232_put(buf2);    // Echo
     61e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>

  buf1 -= '0';
  buf2 -= '0';

  return (buf1*10 + buf2);
     622:	dd 0f       	add	r29, r29
     624:	8d 2f       	mov	r24, r29
     626:	88 0f       	add	r24, r24
     628:	88 0f       	add	r24, r24
     62a:	d8 0f       	add	r29, r24
     62c:	80 ed       	ldi	r24, 0xD0	; 208
     62e:	8d 0f       	add	r24, r29
}
     630:	8c 0f       	add	r24, r28
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <rs232_printdd>:

// Ausgabe einer Dezimalzahl 00..99 auf RS232
void rs232_printdd(uint8_t value)
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	d8 2f       	mov	r29, r24
  uint8_t buf;

  buf = value / 10;
  rs232_put(buf+'0');      // 10er-Stelle anzeigen
     63e:	cd ec       	ldi	r28, 0xCD	; 205
     640:	8c 9f       	mul	r24, r28
     642:	c1 2d       	mov	r28, r1
     644:	11 24       	eor	r1, r1
     646:	c6 95       	lsr	r28
     648:	c6 95       	lsr	r28
     64a:	c6 95       	lsr	r28
     64c:	80 e3       	ldi	r24, 0x30	; 48
     64e:	8c 0f       	add	r24, r28
     650:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
  buf = value % 10;
  rs232_put(buf+'0');      // 1er-Stelle anzeigen
     654:	cc 0f       	add	r28, r28
     656:	8c 2f       	mov	r24, r28
     658:	88 0f       	add	r24, r24
     65a:	88 0f       	add	r24, r24
     65c:	c8 0f       	add	r28, r24
     65e:	8d 2f       	mov	r24, r29
     660:	8c 1b       	sub	r24, r28
     662:	80 5d       	subi	r24, 0xD0	; 208
     664:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <rs232_int>:

void rs232_int(uint16_t val)
{
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	00 d0       	rcall	.+0      	; 0x678 <rs232_int+0xa>
     678:	00 d0       	rcall	.+0      	; 0x67a <rs232_int+0xc>
     67a:	1f 92       	push	r1
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	fc 01       	movw	r30, r24
  uint8_t buffer[5];
  uint8_t n = 0;
     682:	80 e0       	ldi	r24, 0x00	; 0
  
  do
  {
    buffer[n++] = val%10 + '0';
     684:	41 e0       	ldi	r20, 0x01	; 1
     686:	48 0f       	add	r20, r24
     688:	01 e0       	ldi	r16, 0x01	; 1
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	0c 0f       	add	r16, r28
     68e:	1d 1f       	adc	r17, r29
     690:	08 0f       	add	r16, r24
     692:	11 1d       	adc	r17, r1
     694:	9f 01       	movw	r18, r30
     696:	ad ec       	ldi	r26, 0xCD	; 205
     698:	bc ec       	ldi	r27, 0xCC	; 204
     69a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__umulhisi3>
     69e:	96 95       	lsr	r25
     6a0:	87 95       	ror	r24
     6a2:	96 95       	lsr	r25
     6a4:	87 95       	ror	r24
     6a6:	96 95       	lsr	r25
     6a8:	87 95       	ror	r24
     6aa:	9c 01       	movw	r18, r24
     6ac:	22 0f       	add	r18, r18
     6ae:	33 1f       	adc	r19, r19
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
     6c0:	9f 01       	movw	r18, r30
     6c2:	28 1b       	sub	r18, r24
     6c4:	39 0b       	sbc	r19, r25
     6c6:	c9 01       	movw	r24, r18
     6c8:	80 5d       	subi	r24, 0xD0	; 208
     6ca:	d8 01       	movw	r26, r16
     6cc:	8c 93       	st	X, r24
  } while ((val /= 10) > 0);
     6ce:	9f 01       	movw	r18, r30
     6d0:	ad ec       	ldi	r26, 0xCD	; 205
     6d2:	bc ec       	ldi	r27, 0xCC	; 204
     6d4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__umulhisi3>
     6d8:	fc 01       	movw	r30, r24
     6da:	f6 95       	lsr	r31
     6dc:	e7 95       	ror	r30
     6de:	f6 95       	lsr	r31
     6e0:	e7 95       	ror	r30
     6e2:	f6 95       	lsr	r31
     6e4:	e7 95       	ror	r30
  uint8_t buffer[5];
  uint8_t n = 0;
  
  do
  {
    buffer[n++] = val%10 + '0';
     6e6:	84 2f       	mov	r24, r20
  } while ((val /= 10) > 0);
     6e8:	30 97       	sbiw	r30, 0x00	; 0
     6ea:	61 f6       	brne	.-104    	; 0x684 <rs232_int+0x16>
  
  while (n<5)                   // Rest von buffer mit blank füllen
     6ec:	45 30       	cpi	r20, 0x05	; 5
     6ee:	70 f4       	brcc	.+28     	; 0x70c <rs232_int+0x9e>
  {
    buffer[n++] = ' ';
     6f0:	80 e2       	ldi	r24, 0x20	; 32
     6f2:	11 e0       	ldi	r17, 0x01	; 1
     6f4:	14 0f       	add	r17, r20
     6f6:	e1 e0       	ldi	r30, 0x01	; 1
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	ec 0f       	add	r30, r28
     6fc:	fd 1f       	adc	r31, r29
     6fe:	e4 0f       	add	r30, r20
     700:	f1 1d       	adc	r31, r1
     702:	80 83       	st	Z, r24
     704:	41 2f       	mov	r20, r17
  do
  {
    buffer[n++] = val%10 + '0';
  } while ((val /= 10) > 0);
  
  while (n<5)                   // Rest von buffer mit blank füllen
     706:	15 30       	cpi	r17, 0x05	; 5
     708:	a1 f7       	brne	.-24     	; 0x6f2 <rs232_int+0x84>
     70a:	03 c0       	rjmp	.+6      	; 0x712 <rs232_int+0xa4>
  {
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
     70c:	44 23       	and	r20, r20
     70e:	69 f0       	breq	.+26     	; 0x72a <rs232_int+0xbc>
  uint8_t buffer[5];
  uint8_t n = 0;
  
  do
  {
    buffer[n++] = val%10 + '0';
     710:	14 2f       	mov	r17, r20
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
  {
    n--;
     712:	11 50       	subi	r17, 0x01	; 1
    rs232_put(buffer[n]);
     714:	e1 e0       	ldi	r30, 0x01	; 1
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	ec 0f       	add	r30, r28
     71a:	fd 1f       	adc	r31, r29
     71c:	e1 0f       	add	r30, r17
     71e:	f1 1d       	adc	r31, r1
     720:	80 81       	ld	r24, Z
     722:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
  while (n<5)                   // Rest von buffer mit blank füllen
  {
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
     726:	11 11       	cpse	r17, r1
     728:	f4 cf       	rjmp	.-24     	; 0x712 <rs232_int+0xa4>
  {
    n--;
    rs232_put(buffer[n]);
  }
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	08 95       	ret

0000073e <eeprom_get_record>:
	lcd_print("EEPROM #1 test");
	test = eeprom_memtest(EEPROM_1);
  if (test == -1) 
  {
    lcd_setcursor(1,1);
    lcd_print("!Speicherfehler!");
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	00 d0       	rcall	.+0      	; 0x74a <eeprom_get_record+0xc>
     74a:	00 d0       	rcall	.+0      	; 0x74c <eeprom_get_record+0xe>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	f8 2e       	mov	r15, r24
     752:	8b 01       	movw	r16, r22
     754:	00 0f       	add	r16, r16
     756:	11 1f       	adc	r17, r17
     758:	00 0f       	add	r16, r16
     75a:	11 1f       	adc	r17, r17
     75c:	00 0f       	add	r16, r16
     75e:	11 1f       	adc	r17, r17
     760:	b8 01       	movw	r22, r16
     762:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     766:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <jahr>
     76a:	b8 01       	movw	r22, r16
     76c:	6f 5f       	subi	r22, 0xFF	; 255
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	8f 2d       	mov	r24, r15
     772:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     776:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <monat>
     77a:	b8 01       	movw	r22, r16
     77c:	6e 5f       	subi	r22, 0xFE	; 254
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	8f 2d       	mov	r24, r15
     782:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     786:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <tag>
     78a:	b8 01       	movw	r22, r16
     78c:	6d 5f       	subi	r22, 0xFD	; 253
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	8f 2d       	mov	r24, r15
     792:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     796:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <stunde>
     79a:	b8 01       	movw	r22, r16
     79c:	6c 5f       	subi	r22, 0xFC	; 252
     79e:	7f 4f       	sbci	r23, 0xFF	; 255
     7a0:	8f 2d       	mov	r24, r15
     7a2:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     7a6:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
     7aa:	b8 01       	movw	r22, r16
     7ac:	6b 5f       	subi	r22, 0xFB	; 251
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	8f 2d       	mov	r24, r15
     7b2:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     7b6:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <sekunde>
     7ba:	b8 01       	movw	r22, r16
     7bc:	6a 5f       	subi	r22, 0xFA	; 250
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	8f 2d       	mov	r24, r15
     7c2:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	b8 01       	movw	r22, r16
     7ce:	69 5f       	subi	r22, 0xF9	; 249
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	8f 2d       	mov	r24, r15
     7d4:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	9c 83       	std	Y+4, r25	; 0x04
     7dc:	8b 83       	std	Y+3, r24	; 0x03
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	2b 81       	ldd	r18, Y+3	; 0x03
     7e4:	3c 81       	ldd	r19, Y+4	; 0x04
     7e6:	98 2f       	mov	r25, r24
     7e8:	88 27       	eor	r24, r24
     7ea:	82 2b       	or	r24, r18
     7ec:	93 2b       	or	r25, r19
     7ee:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <temperatur+0x1>
     7f2:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <temperatur>
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	08 95       	ret

0000080a <eeprom_set_record>:
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	1f 92       	push	r1
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	f8 2e       	mov	r15, r24
     81c:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <jahr>
     820:	8b 01       	movw	r16, r22
     822:	00 0f       	add	r16, r16
     824:	11 1f       	adc	r17, r17
     826:	00 0f       	add	r16, r16
     828:	11 1f       	adc	r17, r17
     82a:	00 0f       	add	r16, r16
     82c:	11 1f       	adc	r17, r17
     82e:	b8 01       	movw	r22, r16
     830:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
     834:	40 91 96 03 	lds	r20, 0x0396	; 0x800396 <monat>
     838:	b8 01       	movw	r22, r16
     83a:	6f 5f       	subi	r22, 0xFF	; 255
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	8f 2d       	mov	r24, r15
     840:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
     844:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <tag>
     848:	b8 01       	movw	r22, r16
     84a:	6e 5f       	subi	r22, 0xFE	; 254
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	8f 2d       	mov	r24, r15
     850:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
     854:	40 91 9b 03 	lds	r20, 0x039B	; 0x80039b <stunde>
     858:	b8 01       	movw	r22, r16
     85a:	6d 5f       	subi	r22, 0xFD	; 253
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	8f 2d       	mov	r24, r15
     860:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
     864:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <minute>
     868:	b8 01       	movw	r22, r16
     86a:	6c 5f       	subi	r22, 0xFC	; 252
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	8f 2d       	mov	r24, r15
     870:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
     874:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <sekunde>
     878:	b8 01       	movw	r22, r16
     87a:	6b 5f       	subi	r22, 0xFB	; 251
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	8f 2d       	mov	r24, r15
     880:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
     884:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <temperatur>
     888:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <temperatur+0x1>
     88c:	99 83       	std	Y+1, r25	; 0x01
     88e:	49 81       	ldd	r20, Y+1	; 0x01
     890:	b8 01       	movw	r22, r16
     892:	6a 5f       	subi	r22, 0xFA	; 250
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	8f 2d       	mov	r24, r15
     898:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
     89c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <temperatur>
     8a0:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <temperatur+0x1>
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	49 81       	ldd	r20, Y+1	; 0x01
     8a8:	b8 01       	movw	r22, r16
     8aa:	69 5f       	subi	r22, 0xF9	; 249
     8ac:	7f 4f       	sbci	r23, 0xFF	; 255
     8ae:	8f 2d       	mov	r24, r15
     8b0:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	08 95       	ret

000008c2 <rtc_set>:
     8c2:	60 91 9f 03 	lds	r22, 0x039F	; 0x80039f <jahr>
     8c6:	86 e0       	ldi	r24, 0x06	; 6
     8c8:	0e 94 3d 0a 	call	0x147a	; 0x147a <rtc_write>
     8cc:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <monat>
     8d0:	85 e0       	ldi	r24, 0x05	; 5
     8d2:	0e 94 3d 0a 	call	0x147a	; 0x147a <rtc_write>
     8d6:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <tag>
     8da:	84 e0       	ldi	r24, 0x04	; 4
     8dc:	0e 94 3d 0a 	call	0x147a	; 0x147a <rtc_write>
     8e0:	60 91 9b 03 	lds	r22, 0x039B	; 0x80039b <stunde>
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	0e 94 3d 0a 	call	0x147a	; 0x147a <rtc_write>
     8ea:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <minute>
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 3d 0a 	call	0x147a	; 0x147a <rtc_write>
     8f4:	60 91 9e 03 	lds	r22, 0x039E	; 0x80039e <sekunde>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 3d 0a 	call	0x147a	; 0x147a <rtc_write>
     8fe:	08 95       	ret

00000900 <rs232_set_time>:
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	80 ea       	ldi	r24, 0xA0	; 160
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     90c:	c5 e3       	ldi	r28, 0x35	; 53
     90e:	8c 2f       	mov	r24, r28
     910:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     914:	88 e0       	ldi	r24, 0x08	; 8
     916:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     91a:	88 ee       	ldi	r24, 0xE8	; 232
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <delay_ms>
     922:	0e 94 de 02 	call	0x5bc	; 0x5bc <rs232_get>
     926:	d8 2f       	mov	r29, r24
     928:	81 11       	cpse	r24, r1
     92a:	04 c0       	rjmp	.+8      	; 0x934 <rs232_set_time+0x34>
     92c:	c1 50       	subi	r28, 0x01	; 1
     92e:	cf 32       	cpi	r28, 0x2F	; 47
     930:	71 f7       	brne	.-36     	; 0x90e <rs232_set_time+0xe>
     932:	3a c0       	rjmp	.+116    	; 0x9a8 <rs232_set_time+0xa8>
     934:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     938:	df 7d       	andi	r29, 0xDF	; 223
     93a:	da 34       	cpi	r29, 0x4A	; 74
     93c:	c1 f5       	brne	.+112    	; 0x9ae <rs232_set_time+0xae>
     93e:	86 eb       	ldi	r24, 0xB6	; 182
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     946:	83 ed       	ldi	r24, 0xD3	; 211
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     94e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <rs232_inputdd>
     952:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <tag>
     956:	87 ee       	ldi	r24, 0xE7	; 231
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     95e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <rs232_inputdd>
     962:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <monat>
     966:	8b ef       	ldi	r24, 0xFB	; 251
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     96e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <rs232_inputdd>
     972:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <jahr>
     976:	8f e0       	ldi	r24, 0x0F	; 15
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     97e:	82 e2       	ldi	r24, 0x22	; 34
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     986:	0e 94 fe 02 	call	0x5fc	; 0x5fc <rs232_inputdd>
     98a:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <stunde>
     98e:	86 e3       	ldi	r24, 0x36	; 54
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     996:	0e 94 fe 02 	call	0x5fc	; 0x5fc <rs232_inputdd>
     99a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
     99e:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <sekunde>
     9a2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <rtc_set>
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <rs232_set_time+0xae>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <rtc_get>:
     9b4:	86 e0       	ldi	r24, 0x06	; 6
     9b6:	0e 94 0e 0a 	call	0x141c	; 0x141c <rtc_read>
     9ba:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <jahr>
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	0e 94 0e 0a 	call	0x141c	; 0x141c <rtc_read>
     9c4:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <monat>
     9c8:	84 e0       	ldi	r24, 0x04	; 4
     9ca:	0e 94 0e 0a 	call	0x141c	; 0x141c <rtc_read>
     9ce:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <tag>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	0e 94 0e 0a 	call	0x141c	; 0x141c <rtc_read>
     9d8:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <stunde>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	0e 94 0e 0a 	call	0x141c	; 0x141c <rtc_read>
     9e2:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 0e 0a 	call	0x141c	; 0x141c <rtc_read>
     9ec:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <sekunde>
     9f0:	08 95       	ret

000009f2 <read_current_recordnumber_from_rtc>:
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	88 e0       	ldi	r24, 0x08	; 8
     9f8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <rtc_lowlevel_read>
     9fc:	c8 2f       	mov	r28, r24
     9fe:	d0 e0       	ldi	r29, 0x00	; 0
     a00:	dc 2f       	mov	r29, r28
     a02:	cc 27       	eor	r28, r28
     a04:	89 e0       	ldi	r24, 0x09	; 9
     a06:	0e 94 f6 09 	call	0x13ec	; 0x13ec <rtc_lowlevel_read>
     a0a:	9e 01       	movw	r18, r28
     a0c:	28 2b       	or	r18, r24
     a0e:	c9 01       	movw	r24, r18
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <write_current_recordnumber_to_rtc>:
     a16:	cf 93       	push	r28
     a18:	c8 2f       	mov	r28, r24
     a1a:	69 2f       	mov	r22, r25
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	0e 94 1e 0a 	call	0x143c	; 0x143c <rtc_lowlevel_write>
     a22:	6c 2f       	mov	r22, r28
     a24:	89 e0       	ldi	r24, 0x09	; 9
     a26:	0e 94 1e 0a 	call	0x143c	; 0x143c <rtc_lowlevel_write>
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <read_current_sampletime_from_rtc>:
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	8a e0       	ldi	r24, 0x0A	; 10
     a34:	0e 94 f6 09 	call	0x13ec	; 0x13ec <rtc_lowlevel_read>
     a38:	c8 2f       	mov	r28, r24
     a3a:	d0 e0       	ldi	r29, 0x00	; 0
     a3c:	dc 2f       	mov	r29, r28
     a3e:	cc 27       	eor	r28, r28
     a40:	8b e0       	ldi	r24, 0x0B	; 11
     a42:	0e 94 f6 09 	call	0x13ec	; 0x13ec <rtc_lowlevel_read>
     a46:	9e 01       	movw	r18, r28
     a48:	28 2b       	or	r18, r24
     a4a:	c9 01       	movw	r24, r18
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <write_current_sampletime_to_rtc>:
     a52:	cf 93       	push	r28
     a54:	c8 2f       	mov	r28, r24
     a56:	69 2f       	mov	r22, r25
     a58:	8a e0       	ldi	r24, 0x0A	; 10
     a5a:	0e 94 1e 0a 	call	0x143c	; 0x143c <rtc_lowlevel_write>
     a5e:	6c 2f       	mov	r22, r28
     a60:	8b e0       	ldi	r24, 0x0B	; 11
     a62:	0e 94 1e 0a 	call	0x143c	; 0x143c <rtc_lowlevel_write>
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <serial_print_all_records>:
     a6a:	bf 92       	push	r11
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <serial_print_all_records+0x14>
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <serial_print_all_records+0x16>
     a80:	00 d0       	rcall	.+0      	; 0xa82 <serial_print_all_records+0x18>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	84 e1       	ldi	r24, 0x14	; 20
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <delay_ms>
     a8e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <aktueller_Datensatz>
     a92:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <aktueller_Datensatz+0x1>
     a96:	89 2b       	or	r24, r25
     a98:	09 f4       	brne	.+2      	; 0xa9c <serial_print_all_records+0x32>
     a9a:	67 c0       	rjmp	.+206    	; 0xb6a <serial_print_all_records+0x100>
     a9c:	00 e0       	ldi	r16, 0x00	; 0
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	0f 2e       	mov	r0, r31
     aa2:	f5 e0       	ldi	r31, 0x05	; 5
     aa4:	bf 2e       	mov	r11, r31
     aa6:	f0 2d       	mov	r31, r0
     aa8:	0f 2e       	mov	r0, r31
     aaa:	fa e4       	ldi	r31, 0x4A	; 74
     aac:	cf 2e       	mov	r12, r31
     aae:	f3 e0       	ldi	r31, 0x03	; 3
     ab0:	df 2e       	mov	r13, r31
     ab2:	f0 2d       	mov	r31, r0
     ab4:	9e 01       	movw	r18, r28
     ab6:	2f 5f       	subi	r18, 0xFF	; 255
     ab8:	3f 4f       	sbci	r19, 0xFF	; 255
     aba:	79 01       	movw	r14, r18
     abc:	b8 01       	movw	r22, r16
     abe:	80 ea       	ldi	r24, 0xA0	; 160
     ac0:	0e 94 9f 03 	call	0x73e	; 0x73e <eeprom_get_record>
     ac4:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <tag>
     ac8:	0e 94 1c 03 	call	0x638	; 0x638 <rs232_printdd>
     acc:	8e e2       	ldi	r24, 0x2E	; 46
     ace:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     ad2:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <monat>
     ad6:	0e 94 1c 03 	call	0x638	; 0x638 <rs232_printdd>
     ada:	8e e2       	ldi	r24, 0x2E	; 46
     adc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     ae0:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <jahr>
     ae4:	0e 94 1c 03 	call	0x638	; 0x638 <rs232_printdd>
     ae8:	80 e2       	ldi	r24, 0x20	; 32
     aea:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     aee:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <stunde>
     af2:	0e 94 1c 03 	call	0x638	; 0x638 <rs232_printdd>
     af6:	8a e3       	ldi	r24, 0x3A	; 58
     af8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     afc:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
     b00:	0e 94 1c 03 	call	0x638	; 0x638 <rs232_printdd>
     b04:	8a e3       	ldi	r24, 0x3A	; 58
     b06:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     b0a:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <sekunde>
     b0e:	0e 94 1c 03 	call	0x638	; 0x638 <rs232_printdd>
     b12:	8b e3       	ldi	r24, 0x3B	; 59
     b14:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
     b18:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <temperatur>
     b1c:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <temperatur+0x1>
     b20:	81 11       	cpse	r24, r1
     b22:	8b 2d       	mov	r24, r11
     b24:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <temperatur>
     b28:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <temperatur+0x1>
     b2c:	1f 92       	push	r1
     b2e:	8f 93       	push	r24
     b30:	83 2f       	mov	r24, r19
     b32:	33 0f       	add	r19, r19
     b34:	99 0b       	sbc	r25, r25
     b36:	9f 93       	push	r25
     b38:	8f 93       	push	r24
     b3a:	df 92       	push	r13
     b3c:	cf 92       	push	r12
     b3e:	ff 92       	push	r15
     b40:	ef 92       	push	r14
     b42:	0e 94 9d 0a 	call	0x153a	; 0x153a <sprintf>
     b46:	c7 01       	movw	r24, r14
     b48:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
     b4c:	0f 5f       	subi	r16, 0xFF	; 255
     b4e:	1f 4f       	sbci	r17, 0xFF	; 255
     b50:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <aktueller_Datensatz>
     b54:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <aktueller_Datensatz+0x1>
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	08 17       	cp	r16, r24
     b64:	19 07       	cpc	r17, r25
     b66:	08 f4       	brcc	.+2      	; 0xb6a <serial_print_all_records+0x100>
     b68:	a9 cf       	rjmp	.-174    	; 0xabc <serial_print_all_records+0x52>
     b6a:	26 96       	adiw	r28, 0x06	; 6
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	08 95       	ret

00000b8a <lcd_print_temperatur>:
	//lcd_print("EEPROM #3 test");
	//test = eeprom_memtest(EEPROM_3);
}
//---------------------------------------------------------------------------
void lcd_print_temperatur(int16_t degree)
{
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	61 97       	sbiw	r28, 0x11	; 17
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	29 2f       	mov	r18, r25
	uint8_t  buffer[LCD_LEN+1];
	uint8_t  dezimale,ganzzahl;

	// Nachkommastelle. Auflösung 0,5°C
  dezimale = degree & 0x80;   //nur Bit lsb:  0000 0000 1000 0000
     ba4:	80 78       	andi	r24, 0x80	; 128
  if (dezimale!=0) dezimale = 5; else dezimale = 0;
     ba6:	09 f0       	breq	.+2      	; 0xbaa <lcd_print_temperatur+0x20>
     ba8:	85 e0       	ldi	r24, 0x05	; 5
  ganzzahl = degree >>8;
    
  // Zusammenbauen der Zeichenkette mit der Bibliotheksfunktion sprintf()
  sprintf(buffer,"%3d,%1u°C",ganzzahl,dezimale);
     baa:	1f 92       	push	r1
     bac:	8f 93       	push	r24
     bae:	82 2f       	mov	r24, r18
     bb0:	92 2f       	mov	r25, r18
     bb2:	99 0f       	add	r25, r25
     bb4:	99 0b       	sbc	r25, r25
     bb6:	99 27       	eor	r25, r25
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	83 e5       	ldi	r24, 0x53	; 83
     bbe:	93 e0       	ldi	r25, 0x03	; 3
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	8e 01       	movw	r16, r28
     bc6:	0f 5f       	subi	r16, 0xFF	; 255
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
     bca:	1f 93       	push	r17
     bcc:	0f 93       	push	r16
     bce:	0e 94 9d 0a 	call	0x153a	; 0x153a <sprintf>
  
	// Ausgabe auf LC-Display
	lcd_print(buffer);
     bd2:	c8 01       	movw	r24, r16
     bd4:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
}
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	61 96       	adiw	r28, 0x11	; 17
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <rs232_print_temperatur>:
//---------------------------------------------------------------------------
void rs232_print_temperatur(int16_t degree, uint8_t mode)
{
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	61 97       	sbiw	r28, 0x11	; 17
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  buffer[LCD_LEN+1];
	uint8_t  dezimale,ganzzahl;

	// Nachkommastelle. Auflösung 0,5°C
  dezimale = degree & 0x80;   //nur Bit lsb:  0000 0000 1000 0000
     c0c:	80 78       	andi	r24, 0x80	; 128
  if (dezimale!=0) dezimale = 5; else dezimale = 0;
     c0e:	09 f0       	breq	.+2      	; 0xc12 <rs232_print_temperatur+0x1a>
     c10:	85 e0       	ldi	r24, 0x05	; 5
  ganzzahl = degree >>8;
     c12:	29 2f       	mov	r18, r25
     c14:	39 2f       	mov	r19, r25
     c16:	33 0f       	add	r19, r19
     c18:	33 0b       	sbc	r19, r19
  
  // Zusammenbauen der Zeichenkette mit der Bibliotheksfunktion sprintf()
  //sprintf(buffer,"%3d,%1u°C",ganzzahl,dezimale);
  switch (mode)
     c1a:	61 30       	cpi	r22, 0x01	; 1
     c1c:	c9 f0       	breq	.+50     	; 0xc50 <rs232_print_temperatur+0x58>
     c1e:	18 f0       	brcs	.+6      	; 0xc26 <rs232_print_temperatur+0x2e>
     c20:	62 30       	cpi	r22, 0x02	; 2
     c22:	59 f1       	breq	.+86     	; 0xc7a <rs232_print_temperatur+0x82>
     c24:	3e c0       	rjmp	.+124    	; 0xca2 <rs232_print_temperatur+0xaa>
  {
    case 0:    sprintf(buffer,"T1=%3d.%1u\r\n",ganzzahl,dezimale); break;
     c26:	1f 92       	push	r1
     c28:	8f 93       	push	r24
     c2a:	33 27       	eor	r19, r19
     c2c:	3f 93       	push	r19
     c2e:	2f 93       	push	r18
     c30:	8d e5       	ldi	r24, 0x5D	; 93
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	0e 94 9d 0a 	call	0x153a	; 0x153a <sprintf>
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	29 c0       	rjmp	.+82     	; 0xca2 <rs232_print_temperatur+0xaa>
    
    case 1:    sprintf(buffer,"%3d.%1u\r",ganzzahl,dezimale); break;
     c50:	1f 92       	push	r1
     c52:	8f 93       	push	r24
     c54:	33 27       	eor	r19, r19
     c56:	3f 93       	push	r19
     c58:	2f 93       	push	r18
     c5a:	8a e6       	ldi	r24, 0x6A	; 106
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	9f 93       	push	r25
     c60:	8f 93       	push	r24
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	0e 94 9d 0a 	call	0x153a	; 0x153a <sprintf>
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <rs232_print_temperatur+0xaa>
    
    case 2:    sprintf(buffer,"%3d.%1u°C\r",ganzzahl,dezimale); break;
     c7a:	1f 92       	push	r1
     c7c:	8f 93       	push	r24
     c7e:	33 27       	eor	r19, r19
     c80:	3f 93       	push	r19
     c82:	2f 93       	push	r18
     c84:	83 e7       	ldi	r24, 0x73	; 115
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	0e 94 9d 0a 	call	0x153a	; 0x153a <sprintf>
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
    default: break;
  }  
	// Ausgabe auf LC-Display
	rs232_print(buffer);           //rs232_put('\n');
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 ef 02 	call	0x5de	; 0x5de <rs232_print>
}
     caa:	61 96       	adiw	r28, 0x11	; 17
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <lm75_read>:
//---------------------------------------------------------------------------
int16_t lm75_read(void)
{
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
  uint16_t msb,lsb,data16;
  
  i2c_start();                // Startbedingung
     cc2:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
  i2c_write(LM75_ADDR_W);     // Schreibwunsch an LM75 senden
     cc6:	80 e9       	ldi	r24, 0x90	; 144
     cc8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
  i2c_write(0x00);            // Pointer auf 0 setzen
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
  i2c_stop();
     cd2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2c_stop>
  
  i2c_start();
     cd6:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
  i2c_write(LM75_ADDR_R);     // Lesewunsch an LM75 senden
     cda:	81 e9       	ldi	r24, 0x91	; 145
     cdc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
  msb = i2c_read(ACK);        // MSB lesen und weiteren Wert anfordern.
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	0e 94 93 02 	call	0x526	; 0x526 <i2c_read>
     ce6:	c8 2f       	mov	r28, r24
     ce8:	d0 e0       	ldi	r29, 0x00	; 0
  lsb = i2c_read(NACK);       // LSB lesen
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	0e 94 93 02 	call	0x526	; 0x526 <i2c_read>
     cf0:	18 2f       	mov	r17, r24
  i2c_stop();                 // Stoppbedingung
     cf2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2c_stop>
  
  msb <<= 8;
  data16 = msb | lsb;
     cf6:	9c 2f       	mov	r25, r28
     cf8:	88 27       	eor	r24, r24
     cfa:	81 2b       	or	r24, r17
  data16 &= 0xff80;           // niederwertige Bits ausmaskieren! 
  return data16;              // Genauigkeit: +/- 0,5°C
}
     cfc:	80 78       	andi	r24, 0x80	; 128
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	08 95       	ret

00000d06 <rs232_get_sampletime>:
//---------------------------------------------------------------------------
uint32_t rs232_get_sampletime(void)
{
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <rs232_get_sampletime+0x6>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <rs232_get_sampletime+0x8>
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <rs232_get_sampletime+0xa>
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t c,i;
  volatile uint32_t buf;

  buf = 0, i = 0;
     d14:	1b 82       	std	Y+3, r1	; 0x03
     d16:	1c 82       	std	Y+4, r1	; 0x04
     d18:	1d 82       	std	Y+5, r1	; 0x05
     d1a:	1e 82       	std	Y+6, r1	; 0x06
     d1c:	1a 82       	std	Y+2, r1	; 0x02
  
  do
  {
    while((c = rs232_get()) == 0);
     d1e:	0e 94 de 02 	call	0x5bc	; 0x5bc <rs232_get>
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	88 23       	and	r24, r24
     d26:	d9 f3       	breq	.-10     	; 0xd1e <rs232_get_sampletime+0x18>
    if(c == '\n' || c == '\r')
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	8a 30       	cpi	r24, 0x0A	; 10
     d2c:	09 f4       	brne	.+2      	; 0xd30 <rs232_get_sampletime+0x2a>
     d2e:	41 c0       	rjmp	.+130    	; 0xdb2 <rs232_get_sampletime+0xac>
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	8d 30       	cpi	r24, 0x0D	; 13
     d34:	f1 f1       	breq	.+124    	; 0xdb2 <rs232_get_sampletime+0xac>
    break;
    else if ((c >= '0') && (c <= '9'))
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	80 33       	cpi	r24, 0x30	; 48
     d3a:	b8 f1       	brcs	.+110    	; 0xdaa <rs232_get_sampletime+0xa4>
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	8a 33       	cpi	r24, 0x3A	; 58
     d40:	a0 f5       	brcc	.+104    	; 0xdaa <rs232_get_sampletime+0xa4>
    {
      buf *= 10;
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	ad 81       	ldd	r26, Y+5	; 0x05
     d48:	be 81       	ldd	r27, Y+6	; 0x06
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	aa 1f       	adc	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	ac 01       	movw	r20, r24
     d54:	bd 01       	movw	r22, r26
     d56:	44 0f       	add	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	66 1f       	adc	r22, r22
     d5c:	77 1f       	adc	r23, r23
     d5e:	44 0f       	add	r20, r20
     d60:	55 1f       	adc	r21, r21
     d62:	66 1f       	adc	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	84 0f       	add	r24, r20
     d68:	95 1f       	adc	r25, r21
     d6a:	a6 1f       	adc	r26, r22
     d6c:	b7 1f       	adc	r27, r23
     d6e:	8b 83       	std	Y+3, r24	; 0x03
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	ad 83       	std	Y+5, r26	; 0x05
     d74:	be 83       	std	Y+6, r27	; 0x06
      buf += (c-'0');
     d76:	29 81       	ldd	r18, Y+1	; 0x01
     d78:	4b 81       	ldd	r20, Y+3	; 0x03
     d7a:	5c 81       	ldd	r21, Y+4	; 0x04
     d7c:	6d 81       	ldd	r22, Y+5	; 0x05
     d7e:	7e 81       	ldd	r23, Y+6	; 0x06
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	c9 01       	movw	r24, r18
     d84:	c0 97       	sbiw	r24, 0x30	; 48
     d86:	09 2e       	mov	r0, r25
     d88:	00 0c       	add	r0, r0
     d8a:	aa 0b       	sbc	r26, r26
     d8c:	bb 0b       	sbc	r27, r27
     d8e:	84 0f       	add	r24, r20
     d90:	95 1f       	adc	r25, r21
     d92:	a6 1f       	adc	r26, r22
     d94:	b7 1f       	adc	r27, r23
     d96:	8b 83       	std	Y+3, r24	; 0x03
     d98:	9c 83       	std	Y+4, r25	; 0x04
     d9a:	ad 83       	std	Y+5, r26	; 0x05
     d9c:	be 83       	std	Y+6, r27	; 0x06
      i++;
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	8a 83       	std	Y+2, r24	; 0x02
      rs232_put(c);       // Echo
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
    }
  } while (i<5);
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	85 30       	cpi	r24, 0x05	; 5
     dae:	08 f4       	brcc	.+2      	; 0xdb2 <rs232_get_sampletime+0xac>
     db0:	b6 cf       	rjmp	.-148    	; 0xd1e <rs232_get_sampletime+0x18>
  
  rs232_put('\n');
     db2:	8a e0       	ldi	r24, 0x0A	; 10
     db4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <rs232_put>
  return buf;
     db8:	6b 81       	ldd	r22, Y+3	; 0x03
     dba:	7c 81       	ldd	r23, Y+4	; 0x04
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	26 96       	adiw	r28, 0x06	; 6
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <delay_100us>:

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	61 f0       	breq	.+24     	; 0xdee <delay_100us+0x1c>
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dda:	40 e9       	ldi	r20, 0x90	; 144
     ddc:	51 e0       	ldi	r21, 0x01	; 1
     dde:	fa 01       	movw	r30, r20
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <delay_100us+0xe>
	{
		_delay_us(100);
		n++;
     de4:	2f 5f       	subi	r18, 0xFF	; 255
     de6:	3f 4f       	sbci	r19, 0xFF	; 255

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
     de8:	82 17       	cp	r24, r18
     dea:	93 07       	cpc	r25, r19
     dec:	c1 f7       	brne	.-16     	; 0xdde <delay_100us+0xc>
     dee:	08 95       	ret

00000df0 <delay_ms>:
		n++;
	}
}

void delay_ms( uint16_t millisekunden)
{
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
	uint16_t n = 0;
	
	while(n < millisekunden)
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	59 f0       	breq	.+22     	; 0xe12 <delay_ms+0x22>
     dfc:	8c 01       	movw	r16, r24
     dfe:	c0 e0       	ldi	r28, 0x00	; 0
     e00:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_100us(10);
     e02:	8a e0       	ldi	r24, 0x0A	; 10
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_100us>
		n++;
     e0a:	21 96       	adiw	r28, 0x01	; 1

void delay_ms( uint16_t millisekunden)
{
	uint16_t n = 0;
	
	while(n < millisekunden)
     e0c:	0c 17       	cp	r16, r28
     e0e:	1d 07       	cpc	r17, r29
     e10:	c1 f7       	brne	.-16     	; 0xe02 <delay_ms+0x12>
	{
		delay_100us(10);
		n++;
	}
}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	08 95       	ret

00000e1c <eeprom_init>:
#include "controller.h"
#include "eeprom.h"

void eeprom_init(void)
{
  i2c_init();     // Zugriff auf EEPROM über i2C-Bus
     e1c:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_init>
     e20:	08 95       	ret

00000e22 <eeprom_read>:
}

uint8_t eeprom_read (uint8_t i2c_address, uint16_t address)
{
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	1f 92       	push	r1
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	18 2f       	mov	r17, r24
     e34:	06 2f       	mov	r16, r22
     e36:	f7 2e       	mov	r15, r23
  volatile uint8_t temp;

  i2c_start();
     e38:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
  i2c_write(i2c_address);				// I2C-Adresse EEPROM1
     e3c:	81 2f       	mov	r24, r17
     e3e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
  i2c_write((address>>8) & 0x00ff);	// Address High Byte schreiben
     e42:	8f 2d       	mov	r24, r15
     e44:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
	i2c_write(address & 0x00ff);			// Address Low Byte schreiben
     e48:	80 2f       	mov	r24, r16
     e4a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
	
  i2c_start();								// Repeated Start
     e4e:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
	i2c_write(i2c_address | 0x01);
     e52:	81 2f       	mov	r24, r17
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
  temp = i2c_read(NACK);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	0e 94 93 02 	call	0x526	; 0x526 <i2c_read>
     e60:	89 83       	std	Y+1, r24	; 0x01
  i2c_stop();
     e62:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2c_stop>
  return temp;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
}
     e68:	0f 90       	pop	r0
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	08 95       	ret

00000e76 <eeprom_write>:

void eeprom_write(uint8_t i2c_address, uint16_t address, uint8_t value)
{
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	c8 2f       	mov	r28, r24
     e80:	16 2f       	mov	r17, r22
     e82:	07 2f       	mov	r16, r23
     e84:	d4 2f       	mov	r29, r20
	uint8_t	response;
	
  i2c_start();
     e86:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
  i2c_write(i2c_address);
     e8a:	8c 2f       	mov	r24, r28
     e8c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
  i2c_write((address>>8) & 0x00ff);				// EEPROM-Adresse High Byte schreiben
     e90:	80 2f       	mov	r24, r16
     e92:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
	i2c_write(address & 0x00ff);						// EEPROM-Adresse Low Byte schreiben
     e96:	81 2f       	mov	r24, r17
     e98:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
  
  i2c_write(value);	
     e9c:	8d 2f       	mov	r24, r29
     e9e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
  i2c_stop();
     ea2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2c_stop>
	delay_100us(1);													// Kurze Pause nötig!!
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_100us>
	response = NACK;
	do																			// Acknowledge-Polling bis Schreibvorgang
	{																				// beendet.
		i2c_start();
     eae:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
		response = i2c_write(i2c_address);
     eb2:	8c 2f       	mov	r24, r28
     eb4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
	} while (response == NACK);
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	c9 f3       	breq	.-14     	; 0xeae <eeprom_write+0x38>
	i2c_stop();
     ebc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2c_stop>
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <eeprom_memtest>:
// testet den gewählten EEPROM durch wiederholtes
// schreiben und lesen von 0xaa und 0x55 auf jede 
// Speicherstelle bis zur Endadresse (eeprom.h)
// Der ursrüngliche Wert wird wieder hergestellt.
int8_t eeprom_memtest(uint8_t i2c_address)
{
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	18 2f       	mov	r17, r24
	uint16_t adresse;
	uint8_t buf,temp;
	
	for(adresse = 0x0000;adresse <= EEPROM_END_ADDRESS;adresse++)
     ed4:	c0 e0       	ldi	r28, 0x00	; 0
     ed6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		temp = eeprom_read(i2c_address,adresse);
     ed8:	be 01       	movw	r22, r28
     eda:	81 2f       	mov	r24, r17
     edc:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
     ee0:	08 2f       	mov	r16, r24
		lcd_setcursor(2,1);
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
		lcd_int(adresse);
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_int>
		lcd_print(" AA:");
     ef0:	8e e7       	ldi	r24, 0x7E	; 126
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
		eeprom_write(i2c_address,adresse,0xAA);
     ef8:	4a ea       	ldi	r20, 0xAA	; 170
     efa:	be 01       	movw	r22, r28
     efc:	81 2f       	mov	r24, r17
     efe:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
		buf = eeprom_read(i2c_address,adresse);
     f02:	be 01       	movw	r22, r28
     f04:	81 2f       	mov	r24, r17
     f06:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
		if (buf == 0xAA)
     f0a:	8a 3a       	cpi	r24, 0xAA	; 170
     f0c:	a1 f4       	brne	.+40     	; 0xf36 <eeprom_memtest+0x6c>
		{
			lcd_print("o");
     f0e:	83 e8       	ldi	r24, 0x83	; 131
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
		{
			lcd_print("x");
			return -1;
		}
		
		lcd_print(" 55:");
     f16:	85 e8       	ldi	r24, 0x85	; 133
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
		eeprom_write(i2c_address,adresse,0x55);
     f1e:	45 e5       	ldi	r20, 0x55	; 85
     f20:	be 01       	movw	r22, r28
     f22:	81 2f       	mov	r24, r17
     f24:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
		buf = eeprom_read(i2c_address,adresse);
     f28:	be 01       	movw	r22, r28
     f2a:	81 2f       	mov	r24, r17
     f2c:	0e 94 11 07 	call	0xe22	; 0xe22 <eeprom_read>
		if (buf == 0x55)
     f30:	85 35       	cpi	r24, 0x55	; 85
     f32:	39 f0       	breq	.+14     	; 0xf42 <eeprom_memtest+0x78>
     f34:	17 c0       	rjmp	.+46     	; 0xf64 <eeprom_memtest+0x9a>
		{
			lcd_print("o");
		}
		else
		{
			lcd_print("x");
     f36:	8a e8       	ldi	r24, 0x8A	; 138
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
			return -1;
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	16 c0       	rjmp	.+44     	; 0xf6e <eeprom_memtest+0xa4>
		lcd_print(" 55:");
		eeprom_write(i2c_address,adresse,0x55);
		buf = eeprom_read(i2c_address,adresse);
		if (buf == 0x55)
		{
			lcd_print("o");
     f42:	83 e8       	ldi	r24, 0x83	; 131
     f44:	93 e0       	ldi	r25, 0x03	; 3
     f46:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
		else
		{
			lcd_print("x");
			return -1;
		}
		eeprom_write(i2c_address,adresse,temp);
     f4a:	40 2f       	mov	r20, r16
     f4c:	be 01       	movw	r22, r28
     f4e:	81 2f       	mov	r24, r17
     f50:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_write>
int8_t eeprom_memtest(uint8_t i2c_address)
{
	uint16_t adresse;
	uint8_t buf,temp;
	
	for(adresse = 0x0000;adresse <= EEPROM_END_ADDRESS;adresse++)
     f54:	21 96       	adiw	r28, 0x01	; 1
     f56:	c1 15       	cp	r28, r1
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	d8 07       	cpc	r29, r24
     f5c:	09 f0       	breq	.+2      	; 0xf60 <eeprom_memtest+0x96>
     f5e:	bc cf       	rjmp	.-136    	; 0xed8 <eeprom_memtest+0xe>
			lcd_print("x");
			return -1;
		}
		eeprom_write(i2c_address,adresse,temp);
	}
  return 0;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <eeprom_memtest+0xa4>
		{
			lcd_print("o");
		}
		else
		{
			lcd_print("x");
     f64:	8a e8       	ldi	r24, 0x8A	; 138
     f66:	93 e0       	ldi	r25, 0x03	; 3
     f68:	0e 94 30 09 	call	0x1260	; 0x1260 <lcd_print>
			return -1;
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
		}
		eeprom_write(i2c_address,adresse,temp);
	}
  return 0;
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <__vector_1>:
  #endif
}

void timer1ms_disable( void )
{
  timer_ms_disable();
     f78:	1f 92       	push	r1
     f7a:	0f 92       	push	r0
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	0f 92       	push	r0
     f80:	11 24       	eor	r1, r1
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
     f9a:	e8 98       	cbi	0x1d, 0	; 29
     f9c:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <my_interrupt0>
     fa0:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <my_interrupt0+0x1>
     fa4:	09 95       	icall
     fa6:	e8 9a       	sbi	0x1d, 0	; 29
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	bf 91       	pop	r27
     fae:	af 91       	pop	r26
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	7f 91       	pop	r23
     fb6:	6f 91       	pop	r22
     fb8:	5f 91       	pop	r21
     fba:	4f 91       	pop	r20
     fbc:	3f 91       	pop	r19
     fbe:	2f 91       	pop	r18
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <__vector_2>:
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	2f 93       	push	r18
     fd6:	3f 93       	push	r19
     fd8:	4f 93       	push	r20
     fda:	5f 93       	push	r21
     fdc:	6f 93       	push	r22
     fde:	7f 93       	push	r23
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
     fe4:	af 93       	push	r26
     fe6:	bf 93       	push	r27
     fe8:	ef 93       	push	r30
     fea:	ff 93       	push	r31
     fec:	e9 98       	cbi	0x1d, 1	; 29
     fee:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <my_interrupt1>
     ff2:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <my_interrupt1+0x1>
     ff6:	09 95       	icall
     ff8:	e9 9a       	sbi	0x1d, 1	; 29
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	bf 91       	pop	r27
    1000:	af 91       	pop	r26
    1002:	9f 91       	pop	r25
    1004:	8f 91       	pop	r24
    1006:	7f 91       	pop	r23
    1008:	6f 91       	pop	r22
    100a:	5f 91       	pop	r21
    100c:	4f 91       	pop	r20
    100e:	3f 91       	pop	r19
    1010:	2f 91       	pop	r18
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <__vector_14>:
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	2f 93       	push	r18
    1028:	3f 93       	push	r19
    102a:	4f 93       	push	r20
    102c:	5f 93       	push	r21
    102e:	6f 93       	push	r22
    1030:	7f 93       	push	r23
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
    1042:	ce e6       	ldi	r28, 0x6E	; 110
    1044:	d0 e0       	ldi	r29, 0x00	; 0
    1046:	88 81       	ld	r24, Y
    1048:	8d 7f       	andi	r24, 0xFD	; 253
    104a:	88 83       	st	Y, r24
    104c:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <my_timer>
    1050:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <my_timer+0x1>
    1054:	09 95       	icall
    1056:	88 81       	ld	r24, Y
    1058:	82 60       	ori	r24, 0x02	; 2
    105a:	88 83       	st	Y, r24
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <serial_interrupt_init>:
}

#endif

void serial_interrupt_init( void (*sr) (void))
{ 
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	ec 01       	movw	r28, r24
	rs232_init();  // Serielle Schnittstelle initialisieren
    1088:	0e 94 d7 02 	call	0x5ae	; 0x5ae <rs232_init>
	my_datareceived = sr;
    108c:	d0 93 a5 03 	sts	0x03A5, r29	; 0x8003a5 <my_datareceived+0x1>
    1090:	c0 93 a4 03 	sts	0x03A4, r28	; 0x8003a4 <my_datareceived>
}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <__vector_18>:

ISR(USART_RX_vect)                  // Interrupt-Vektor
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
	//UCSR0B &= ~(1<<RXCIE0);         // Empfangsinterrupt ausschalten
	my_datareceived();                // Aufruf der Benutzer-ISR
    10bc:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <my_datareceived>
    10c0:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <my_datareceived+0x1>
    10c4:	09 95       	icall
  //UCSR0B |= (1<<RXCIE0);          // Empfangsinterrupt einschalten
}
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	7f 91       	pop	r23
    10d4:	6f 91       	pop	r22
    10d6:	5f 91       	pop	r21
    10d8:	4f 91       	pop	r20
    10da:	3f 91       	pop	r19
    10dc:	2f 91       	pop	r18
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <serial_interrupt_enable>:

extern void serial_interrupt_enable  ( void )
{
  UCSR0B |= (1<<RXCIE0);            // Empfangsinterrupt einschalten
    10e8:	e1 ec       	ldi	r30, 0xC1	; 193
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	80 68       	ori	r24, 0x80	; 128
    10f0:	80 83       	st	Z, r24
	sei();
    10f2:	78 94       	sei
    10f4:	08 95       	ret

000010f6 <lcd_waitwhilebusy>:
{
  uint8_t n;

  lcd_setcursor(line,0);
  for (n=0; n < LCD_LEN; n++)  lcd_char(' ');
}
    10f6:	8a e0       	ldi	r24, 0x0A	; 10
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_100us>
    10fe:	08 95       	ret

00001100 <port_out>:
    1100:	cf 93       	push	r28
    1102:	c8 2f       	mov	r28, r24
    1104:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
    1108:	8e e4       	ldi	r24, 0x4E	; 78
    110a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
    110e:	8c 2f       	mov	r24, r28
    1110:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
    1114:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2c_stop>
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <lowlevel_write>:
    111c:	cf 93       	push	r28
    111e:	c8 2f       	mov	r28, r24
    1120:	8c 60       	ori	r24, 0x0C	; 12
    1122:	0e 94 80 08 	call	0x1100	; 0x1100 <port_out>
    1126:	8c 2f       	mov	r24, r28
    1128:	8b 7f       	andi	r24, 0xFB	; 251
    112a:	88 60       	ori	r24, 0x08	; 8
    112c:	0e 94 80 08 	call	0x1100	; 0x1100 <port_out>
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <lcd_befehl>:
    1134:	cf 93       	push	r28
    1136:	c8 2f       	mov	r28, r24
    1138:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <lcd_waitwhilebusy>
    113c:	8c 2f       	mov	r24, r28
    113e:	80 7f       	andi	r24, 0xF0	; 240
    1140:	0e 94 8e 08 	call	0x111c	; 0x111c <lowlevel_write>
    1144:	8c 2f       	mov	r24, r28
    1146:	82 95       	swap	r24
    1148:	80 7f       	andi	r24, 0xF0	; 240
    114a:	0e 94 8e 08 	call	0x111c	; 0x111c <lowlevel_write>
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <lcd_daten>:
    1152:	cf 93       	push	r28
    1154:	c8 2f       	mov	r28, r24
    1156:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <lcd_waitwhilebusy>
    115a:	8c 2f       	mov	r24, r28
    115c:	80 7f       	andi	r24, 0xF0	; 240
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	0e 94 8e 08 	call	0x111c	; 0x111c <lowlevel_write>
    1164:	8c 2f       	mov	r24, r28
    1166:	82 95       	swap	r24
    1168:	80 7f       	andi	r24, 0xF0	; 240
    116a:	81 60       	ori	r24, 0x01	; 1
    116c:	0e 94 8e 08 	call	0x111c	; 0x111c <lowlevel_write>
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <lcd_init>:
    1174:	8c e3       	ldi	r24, 0x3C	; 60
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <delay_ms>
    117c:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_init>
    1180:	80 e3       	ldi	r24, 0x30	; 48
    1182:	0e 94 8e 08 	call	0x111c	; 0x111c <lowlevel_write>
    1186:	84 e1       	ldi	r24, 0x14	; 20
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <delay_ms>
    118e:	80 e3       	ldi	r24, 0x30	; 48
    1190:	0e 94 8e 08 	call	0x111c	; 0x111c <lowlevel_write>
    1194:	8a e0       	ldi	r24, 0x0A	; 10
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <delay_ms>
    119c:	80 e3       	ldi	r24, 0x30	; 48
    119e:	0e 94 8e 08 	call	0x111c	; 0x111c <lowlevel_write>
    11a2:	8a e0       	ldi	r24, 0x0A	; 10
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <delay_ms>
    11aa:	80 e2       	ldi	r24, 0x20	; 32
    11ac:	0e 94 8e 08 	call	0x111c	; 0x111c <lowlevel_write>
    11b0:	88 e2       	ldi	r24, 0x28	; 40
    11b2:	0e 94 9a 08 	call	0x1134	; 0x1134 <lcd_befehl>
    11b6:	8c e0       	ldi	r24, 0x0C	; 12
    11b8:	0e 94 9a 08 	call	0x1134	; 0x1134 <lcd_befehl>
    11bc:	84 e1       	ldi	r24, 0x14	; 20
    11be:	0e 94 9a 08 	call	0x1134	; 0x1134 <lcd_befehl>
    11c2:	08 95       	ret

000011c4 <lcd_clear>:
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 9a 08 	call	0x1134	; 0x1134 <lcd_befehl>
    11ca:	08 95       	ret

000011cc <lcd_setcursor>:
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	31 f0       	breq	.+12     	; 0x11dc <lcd_setcursor+0x10>
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	31 f0       	breq	.+12     	; 0x11e0 <lcd_setcursor+0x14>
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	31 f4       	brne	.+12     	; 0x11e4 <lcd_setcursor+0x18>
    11d8:	90 e4       	ldi	r25, 0x40	; 64
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <lcd_setcursor+0x1a>
    11dc:	90 e1       	ldi	r25, 0x10	; 16
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <lcd_setcursor+0x1a>
    11e0:	90 e5       	ldi	r25, 0x50	; 80
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <lcd_setcursor+0x1a>
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	86 0f       	add	r24, r22
    11ea:	89 0f       	add	r24, r25
    11ec:	80 68       	ori	r24, 0x80	; 128
    11ee:	0e 94 9a 08 	call	0x1134	; 0x1134 <lcd_befehl>
    11f2:	08 95       	ret

000011f4 <lcd_lookup>:
    11f4:	86 3d       	cpi	r24, 0xD6	; 214
    11f6:	09 f1       	breq	.+66     	; 0x123a <lcd_lookup+0x46>
    11f8:	68 f4       	brcc	.+26     	; 0x1214 <lcd_lookup+0x20>
    11fa:	80 3b       	cpi	r24, 0xB0	; 176
    11fc:	51 f1       	breq	.+84     	; 0x1252 <lcd_lookup+0x5e>
    11fe:	28 f4       	brcc	.+10     	; 0x120a <lcd_lookup+0x16>
    1200:	8c 35       	cpi	r24, 0x5C	; 92
    1202:	19 f1       	breq	.+70     	; 0x124a <lcd_lookup+0x56>
    1204:	80 38       	cpi	r24, 0x80	; 128
    1206:	19 f1       	breq	.+70     	; 0x124e <lcd_lookup+0x5a>
    1208:	08 95       	ret
    120a:	85 3b       	cpi	r24, 0xB5	; 181
    120c:	e1 f0       	breq	.+56     	; 0x1246 <lcd_lookup+0x52>
    120e:	84 3c       	cpi	r24, 0xC4	; 196
    1210:	71 f0       	breq	.+28     	; 0x122e <lcd_lookup+0x3a>
    1212:	08 95       	ret
    1214:	84 3e       	cpi	r24, 0xE4	; 228
    1216:	59 f0       	breq	.+22     	; 0x122e <lcd_lookup+0x3a>
    1218:	28 f4       	brcc	.+10     	; 0x1224 <lcd_lookup+0x30>
    121a:	8c 3d       	cpi	r24, 0xDC	; 220
    121c:	81 f0       	breq	.+32     	; 0x123e <lcd_lookup+0x4a>
    121e:	8f 3d       	cpi	r24, 0xDF	; 223
    1220:	81 f0       	breq	.+32     	; 0x1242 <lcd_lookup+0x4e>
    1222:	08 95       	ret
    1224:	86 3f       	cpi	r24, 0xF6	; 246
    1226:	29 f0       	breq	.+10     	; 0x1232 <lcd_lookup+0x3e>
    1228:	8c 3f       	cpi	r24, 0xFC	; 252
    122a:	29 f0       	breq	.+10     	; 0x1236 <lcd_lookup+0x42>
    122c:	08 95       	ret
    122e:	81 ee       	ldi	r24, 0xE1	; 225
    1230:	08 95       	ret
    1232:	8f ee       	ldi	r24, 0xEF	; 239
    1234:	08 95       	ret
    1236:	85 ef       	ldi	r24, 0xF5	; 245
    1238:	08 95       	ret
    123a:	8f ee       	ldi	r24, 0xEF	; 239
    123c:	08 95       	ret
    123e:	85 ef       	ldi	r24, 0xF5	; 245
    1240:	08 95       	ret
    1242:	82 ee       	ldi	r24, 0xE2	; 226
    1244:	08 95       	ret
    1246:	84 ee       	ldi	r24, 0xE4	; 228
    1248:	08 95       	ret
    124a:	84 ea       	ldi	r24, 0xA4	; 164
    124c:	08 95       	ret
    124e:	83 ed       	ldi	r24, 0xD3	; 211
    1250:	08 95       	ret
    1252:	8f ed       	ldi	r24, 0xDF	; 223
    1254:	08 95       	ret

00001256 <lcd_char>:
    1256:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_lookup>
    125a:	0e 94 a9 08 	call	0x1152	; 0x1152 <lcd_daten>
    125e:	08 95       	ret

00001260 <lcd_print>:
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	ec 01       	movw	r28, r24
    1266:	88 81       	ld	r24, Y
    1268:	88 23       	and	r24, r24
    126a:	31 f0       	breq	.+12     	; 0x1278 <lcd_print+0x18>
    126c:	21 96       	adiw	r28, 0x01	; 1
    126e:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
    1272:	89 91       	ld	r24, Y+
    1274:	81 11       	cpse	r24, r1
    1276:	fb cf       	rjmp	.-10     	; 0x126e <lcd_print+0xe>
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <lcd_int>:
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	00 d0       	rcall	.+0      	; 0x1288 <lcd_int+0xa>
    1288:	00 d0       	rcall	.+0      	; 0x128a <lcd_int+0xc>
    128a:	1f 92       	push	r1
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	fc 01       	movw	r30, r24
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	41 e0       	ldi	r20, 0x01	; 1
    1296:	48 0f       	add	r20, r24
    1298:	01 e0       	ldi	r16, 0x01	; 1
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	0c 0f       	add	r16, r28
    129e:	1d 1f       	adc	r17, r29
    12a0:	08 0f       	add	r16, r24
    12a2:	11 1d       	adc	r17, r1
    12a4:	9f 01       	movw	r18, r30
    12a6:	ad ec       	ldi	r26, 0xCD	; 205
    12a8:	bc ec       	ldi	r27, 0xCC	; 204
    12aa:	0e 94 8e 0a 	call	0x151c	; 0x151c <__umulhisi3>
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	96 95       	lsr	r25
    12b8:	87 95       	ror	r24
    12ba:	9c 01       	movw	r18, r24
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	82 0f       	add	r24, r18
    12ce:	93 1f       	adc	r25, r19
    12d0:	9f 01       	movw	r18, r30
    12d2:	28 1b       	sub	r18, r24
    12d4:	39 0b       	sbc	r19, r25
    12d6:	c9 01       	movw	r24, r18
    12d8:	80 5d       	subi	r24, 0xD0	; 208
    12da:	d8 01       	movw	r26, r16
    12dc:	8c 93       	st	X, r24
    12de:	9f 01       	movw	r18, r30
    12e0:	ad ec       	ldi	r26, 0xCD	; 205
    12e2:	bc ec       	ldi	r27, 0xCC	; 204
    12e4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__umulhisi3>
    12e8:	fc 01       	movw	r30, r24
    12ea:	f6 95       	lsr	r31
    12ec:	e7 95       	ror	r30
    12ee:	f6 95       	lsr	r31
    12f0:	e7 95       	ror	r30
    12f2:	f6 95       	lsr	r31
    12f4:	e7 95       	ror	r30
    12f6:	84 2f       	mov	r24, r20
    12f8:	30 97       	sbiw	r30, 0x00	; 0
    12fa:	61 f6       	brne	.-104    	; 0x1294 <lcd_int+0x16>
    12fc:	45 30       	cpi	r20, 0x05	; 5
    12fe:	70 f4       	brcc	.+28     	; 0x131c <lcd_int+0x9e>
    1300:	80 e2       	ldi	r24, 0x20	; 32
    1302:	11 e0       	ldi	r17, 0x01	; 1
    1304:	14 0f       	add	r17, r20
    1306:	e1 e0       	ldi	r30, 0x01	; 1
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	ec 0f       	add	r30, r28
    130c:	fd 1f       	adc	r31, r29
    130e:	e4 0f       	add	r30, r20
    1310:	f1 1d       	adc	r31, r1
    1312:	80 83       	st	Z, r24
    1314:	41 2f       	mov	r20, r17
    1316:	15 30       	cpi	r17, 0x05	; 5
    1318:	a1 f7       	brne	.-24     	; 0x1302 <lcd_int+0x84>
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <lcd_int+0xa4>
    131c:	44 23       	and	r20, r20
    131e:	69 f0       	breq	.+26     	; 0x133a <lcd_int+0xbc>
    1320:	14 2f       	mov	r17, r20
    1322:	11 50       	subi	r17, 0x01	; 1
    1324:	e1 e0       	ldi	r30, 0x01	; 1
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	ec 0f       	add	r30, r28
    132a:	fd 1f       	adc	r31, r29
    132c:	e1 0f       	add	r30, r17
    132e:	f1 1d       	adc	r31, r1
    1330:	80 81       	ld	r24, Z
    1332:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
    1336:	11 11       	cpse	r17, r1
    1338:	f4 cf       	rjmp	.-24     	; 0x1322 <lcd_int+0xa4>
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <lcd_defchar>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	8c 01       	movw	r16, r24
    1358:	68 30       	cpi	r22, 0x08	; 8
    135a:	a0 f4       	brcc	.+40     	; 0x1384 <lcd_defchar+0x36>
    135c:	66 0f       	add	r22, r22
    135e:	66 0f       	add	r22, r22
    1360:	66 0f       	add	r22, r22
    1362:	86 2f       	mov	r24, r22
    1364:	88 73       	andi	r24, 0x38	; 56
    1366:	80 64       	ori	r24, 0x40	; 64
    1368:	0e 94 9a 08 	call	0x1134	; 0x1134 <lcd_befehl>
    136c:	0b c0       	rjmp	.+22     	; 0x1384 <lcd_defchar+0x36>
    136e:	89 91       	ld	r24, Y+
    1370:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
    1374:	c0 17       	cp	r28, r16
    1376:	d1 07       	cpc	r29, r17
    1378:	d1 f7       	brne	.-12     	; 0x136e <lcd_defchar+0x20>
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_setcursor>
    1382:	04 c0       	rjmp	.+8      	; 0x138c <lcd_defchar+0x3e>
    1384:	e8 01       	movw	r28, r16
    1386:	08 5f       	subi	r16, 0xF8	; 248
    1388:	1f 4f       	sbci	r17, 0xFF	; 255
    138a:	f1 cf       	rjmp	.-30     	; 0x136e <lcd_defchar+0x20>
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	08 95       	ret

00001396 <lcd_dd>:

// Zeigt 00 bis 99 auf dem Display an!
void lcd_dd(uint8_t val)
{
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	00 d0       	rcall	.+0      	; 0x139c <lcd_dd+0x6>
    139c:	1f 92       	push	r1
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	fe 01       	movw	r30, r28
    13a4:	31 96       	adiw	r30, 0x01	; 1
    13a6:	be 01       	movw	r22, r28
    13a8:	6c 5f       	subi	r22, 0xFC	; 252
    13aa:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t buffer[3];
	uint8_t n = 0;
	
	do
	{
		buffer[n++] = val%10 + '0';
    13ac:	4d ec       	ldi	r20, 0xCD	; 205
    13ae:	84 9f       	mul	r24, r20
    13b0:	91 2d       	mov	r25, r1
    13b2:	11 24       	eor	r1, r1
    13b4:	96 95       	lsr	r25
    13b6:	96 95       	lsr	r25
    13b8:	96 95       	lsr	r25
    13ba:	39 2f       	mov	r19, r25
    13bc:	33 0f       	add	r19, r19
    13be:	23 2f       	mov	r18, r19
    13c0:	22 0f       	add	r18, r18
    13c2:	22 0f       	add	r18, r18
    13c4:	23 0f       	add	r18, r19
    13c6:	82 1b       	sub	r24, r18
    13c8:	80 5d       	subi	r24, 0xD0	; 208
    13ca:	81 93       	st	Z+, r24
		val /= 10;
    13cc:	89 2f       	mov	r24, r25
	} while (n<3);
    13ce:	e6 17       	cp	r30, r22
    13d0:	f7 07       	cpc	r31, r23
    13d2:	69 f7       	brne	.-38     	; 0x13ae <lcd_dd+0x18>

	n = 2;				// Nur 2 Stellen anzeigen
	while (n > 0)   
	{
		n--;
		lcd_char(buffer[n]);
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	0e 94 2b 09 	call	0x1256	; 0x1256 <lcd_char>
	}
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <rtc_lowlevel_read>:
	
	rtc_lowlevel_write(reg,value);
}
//-Lesen aus internem Ram des RTC-------------------------
uint8_t rtc_lowlevel_read (uint8_t reg)
{
    13ec:	cf 93       	push	r28
    13ee:	c8 2f       	mov	r28, r24
    uint8_t temp;

    i2c_start();
    13f0:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
    i2c_write(RTC_ADDR_W);
    13f4:	80 ed       	ldi	r24, 0xD0	; 208
    13f6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
    i2c_write(reg);
    13fa:	8c 2f       	mov	r24, r28
    13fc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>

    i2c_start();  // Repeated Start
    1400:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
		i2c_write(RTC_ADDR_R);
    1404:	81 ed       	ldi	r24, 0xD1	; 209
    1406:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
    temp = i2c_read(NACK);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	0e 94 93 02 	call	0x526	; 0x526 <i2c_read>
    1410:	c8 2f       	mov	r28, r24
    i2c_stop();
    1412:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2c_stop>
		
    return temp;
}
    1416:	8c 2f       	mov	r24, r28
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <rtc_read>:
//-Lesen der Timekeeper-Register--------------------------
uint8_t rtc_read (uint8_t reg)
{
    uint8_t temp;
		
		temp = rtc_lowlevel_read( reg );
    141c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <rtc_lowlevel_read>
		
    temp = (temp & 0x0f) + ((temp & 0x70)>>4)*10;
    1420:	38 2f       	mov	r19, r24
    1422:	3f 70       	andi	r19, 0x0F	; 15
    1424:	98 2f       	mov	r25, r24
    1426:	90 77       	andi	r25, 0x70	; 112
    1428:	96 95       	lsr	r25
    142a:	96 95       	lsr	r25
    142c:	96 95       	lsr	r25
    142e:	29 2f       	mov	r18, r25
    1430:	22 0f       	add	r18, r18
    1432:	22 0f       	add	r18, r18
    1434:	89 2f       	mov	r24, r25
    1436:	82 0f       	add	r24, r18
		
    return temp;
}
    1438:	83 0f       	add	r24, r19
    143a:	08 95       	ret

0000143c <rtc_lowlevel_write>:
		
    return temp;
}
//-Schreiben ins interne RAM des RTC----------------------
void rtc_lowlevel_write(uint8_t reg, uint8_t value)
{   
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	d8 2f       	mov	r29, r24
    1442:	c6 2f       	mov	r28, r22
   i2c_start();
    1444:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_start>
   i2c_write(RTC_ADDR_W);
    1448:	80 ed       	ldi	r24, 0xD0	; 208
    144a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
   i2c_write(reg);
    144e:	8d 2f       	mov	r24, r29
    1450:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
   
   i2c_write(value);
    1454:	8c 2f       	mov	r24, r28
    1456:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_write>
   i2c_stop();
    145a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2c_stop>
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <rtc_init>:
#include "rtc.h"

void rtc_init(void)
{
	uint8_t temp;
  i2c_init();			   							// Zugriff auf RTC über i2C-Bus
    1464:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_init>
	temp = rtc_lowlevel_read(_SEC_);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <rtc_lowlevel_read>
	rtc_lowlevel_write(_SEC_,temp & 0x7F);		// ClockHalt(CH)-Bit 0 --> Clock startet
    146e:	68 2f       	mov	r22, r24
    1470:	6f 77       	andi	r22, 0x7F	; 127
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	0e 94 1e 0a 	call	0x143c	; 0x143c <rtc_lowlevel_write>
    1478:	08 95       	ret

0000147a <rtc_write>:
    return temp;
}
//-Schreiben der Timekeeper-Register----------------------
void rtc_write(uint8_t reg, uint8_t value)
{
	value = ((value/10)<<4) | (value%10);
    147a:	9d ec       	ldi	r25, 0xCD	; 205
    147c:	69 9f       	mul	r22, r25
    147e:	91 2d       	mov	r25, r1
    1480:	11 24       	eor	r1, r1
    1482:	96 95       	lsr	r25
    1484:	96 95       	lsr	r25
    1486:	96 95       	lsr	r25
    1488:	40 e1       	ldi	r20, 0x10	; 16
    148a:	94 9f       	mul	r25, r20
    148c:	90 01       	movw	r18, r0
    148e:	11 24       	eor	r1, r1
    1490:	99 0f       	add	r25, r25
    1492:	39 2f       	mov	r19, r25
    1494:	33 0f       	add	r19, r19
    1496:	33 0f       	add	r19, r19
    1498:	93 0f       	add	r25, r19
    149a:	69 1b       	sub	r22, r25
    149c:	62 2b       	or	r22, r18
	
	rtc_lowlevel_write(reg,value);
    149e:	0e 94 1e 0a 	call	0x143c	; 0x143c <rtc_lowlevel_write>
    14a2:	08 95       	ret

000014a4 <__udivmodhi4>:
    14a4:	aa 1b       	sub	r26, r26
    14a6:	bb 1b       	sub	r27, r27
    14a8:	51 e1       	ldi	r21, 0x11	; 17
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <__udivmodhi4_ep>

000014ac <__udivmodhi4_loop>:
    14ac:	aa 1f       	adc	r26, r26
    14ae:	bb 1f       	adc	r27, r27
    14b0:	a6 17       	cp	r26, r22
    14b2:	b7 07       	cpc	r27, r23
    14b4:	10 f0       	brcs	.+4      	; 0x14ba <__udivmodhi4_ep>
    14b6:	a6 1b       	sub	r26, r22
    14b8:	b7 0b       	sbc	r27, r23

000014ba <__udivmodhi4_ep>:
    14ba:	88 1f       	adc	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	5a 95       	dec	r21
    14c0:	a9 f7       	brne	.-22     	; 0x14ac <__udivmodhi4_loop>
    14c2:	80 95       	com	r24
    14c4:	90 95       	com	r25
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	08 95       	ret

000014cc <__udivmodsi4>:
    14cc:	a1 e2       	ldi	r26, 0x21	; 33
    14ce:	1a 2e       	mov	r1, r26
    14d0:	aa 1b       	sub	r26, r26
    14d2:	bb 1b       	sub	r27, r27
    14d4:	fd 01       	movw	r30, r26
    14d6:	0d c0       	rjmp	.+26     	; 0x14f2 <__udivmodsi4_ep>

000014d8 <__udivmodsi4_loop>:
    14d8:	aa 1f       	adc	r26, r26
    14da:	bb 1f       	adc	r27, r27
    14dc:	ee 1f       	adc	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	a2 17       	cp	r26, r18
    14e2:	b3 07       	cpc	r27, r19
    14e4:	e4 07       	cpc	r30, r20
    14e6:	f5 07       	cpc	r31, r21
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__udivmodsi4_ep>
    14ea:	a2 1b       	sub	r26, r18
    14ec:	b3 0b       	sbc	r27, r19
    14ee:	e4 0b       	sbc	r30, r20
    14f0:	f5 0b       	sbc	r31, r21

000014f2 <__udivmodsi4_ep>:
    14f2:	66 1f       	adc	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	1a 94       	dec	r1
    14fc:	69 f7       	brne	.-38     	; 0x14d8 <__udivmodsi4_loop>
    14fe:	60 95       	com	r22
    1500:	70 95       	com	r23
    1502:	80 95       	com	r24
    1504:	90 95       	com	r25
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	bd 01       	movw	r22, r26
    150c:	cf 01       	movw	r24, r30
    150e:	08 95       	ret

00001510 <__tablejump2__>:
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	05 90       	lpm	r0, Z+
    1516:	f4 91       	lpm	r31, Z
    1518:	e0 2d       	mov	r30, r0
    151a:	09 94       	ijmp

0000151c <__umulhisi3>:
    151c:	a2 9f       	mul	r26, r18
    151e:	b0 01       	movw	r22, r0
    1520:	b3 9f       	mul	r27, r19
    1522:	c0 01       	movw	r24, r0
    1524:	a3 9f       	mul	r26, r19
    1526:	70 0d       	add	r23, r0
    1528:	81 1d       	adc	r24, r1
    152a:	11 24       	eor	r1, r1
    152c:	91 1d       	adc	r25, r1
    152e:	b2 9f       	mul	r27, r18
    1530:	70 0d       	add	r23, r0
    1532:	81 1d       	adc	r24, r1
    1534:	11 24       	eor	r1, r1
    1536:	91 1d       	adc	r25, r1
    1538:	08 95       	ret

0000153a <sprintf>:
    153a:	ae e0       	ldi	r26, 0x0E	; 14
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 ea       	ldi	r30, 0xA3	; 163
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__prologue_saves__+0x1c>
    1546:	0d 89       	ldd	r16, Y+21	; 0x15
    1548:	1e 89       	ldd	r17, Y+22	; 0x16
    154a:	86 e0       	ldi	r24, 0x06	; 6
    154c:	8c 83       	std	Y+4, r24	; 0x04
    154e:	1a 83       	std	Y+2, r17	; 0x02
    1550:	09 83       	std	Y+1, r16	; 0x01
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	9f e7       	ldi	r25, 0x7F	; 127
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
    155a:	ae 01       	movw	r20, r28
    155c:	47 5e       	subi	r20, 0xE7	; 231
    155e:	5f 4f       	sbci	r21, 0xFF	; 255
    1560:	6f 89       	ldd	r22, Y+23	; 0x17
    1562:	78 8d       	ldd	r23, Y+24	; 0x18
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	0e 94 bf 0a 	call	0x157e	; 0x157e <vfprintf>
    156c:	ef 81       	ldd	r30, Y+7	; 0x07
    156e:	f8 85       	ldd	r31, Y+8	; 0x08
    1570:	e0 0f       	add	r30, r16
    1572:	f1 1f       	adc	r31, r17
    1574:	10 82       	st	Z, r1
    1576:	2e 96       	adiw	r28, 0x0e	; 14
    1578:	e4 e0       	ldi	r30, 0x04	; 4
    157a:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x1c>

0000157e <vfprintf>:
    157e:	ab e0       	ldi	r26, 0x0B	; 11
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 ec       	ldi	r30, 0xC5	; 197
    1584:	fa e0       	ldi	r31, 0x0A	; 10
    1586:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__prologue_saves__>
    158a:	6c 01       	movw	r12, r24
    158c:	7b 01       	movw	r14, r22
    158e:	8a 01       	movw	r16, r20
    1590:	fc 01       	movw	r30, r24
    1592:	17 82       	std	Z+7, r1	; 0x07
    1594:	16 82       	std	Z+6, r1	; 0x06
    1596:	83 81       	ldd	r24, Z+3	; 0x03
    1598:	81 ff       	sbrs	r24, 1
    159a:	cc c1       	rjmp	.+920    	; 0x1934 <vfprintf+0x3b6>
    159c:	ce 01       	movw	r24, r28
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	3c 01       	movw	r6, r24
    15a2:	f6 01       	movw	r30, r12
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	f7 01       	movw	r30, r14
    15a8:	93 fd       	sbrc	r25, 3
    15aa:	85 91       	lpm	r24, Z+
    15ac:	93 ff       	sbrs	r25, 3
    15ae:	81 91       	ld	r24, Z+
    15b0:	7f 01       	movw	r14, r30
    15b2:	88 23       	and	r24, r24
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <vfprintf+0x3a>
    15b6:	ba c1       	rjmp	.+884    	; 0x192c <vfprintf+0x3ae>
    15b8:	85 32       	cpi	r24, 0x25	; 37
    15ba:	39 f4       	brne	.+14     	; 0x15ca <vfprintf+0x4c>
    15bc:	93 fd       	sbrc	r25, 3
    15be:	85 91       	lpm	r24, Z+
    15c0:	93 ff       	sbrs	r25, 3
    15c2:	81 91       	ld	r24, Z+
    15c4:	7f 01       	movw	r14, r30
    15c6:	85 32       	cpi	r24, 0x25	; 37
    15c8:	29 f4       	brne	.+10     	; 0x15d4 <vfprintf+0x56>
    15ca:	b6 01       	movw	r22, r12
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    15d2:	e7 cf       	rjmp	.-50     	; 0x15a2 <vfprintf+0x24>
    15d4:	91 2c       	mov	r9, r1
    15d6:	21 2c       	mov	r2, r1
    15d8:	31 2c       	mov	r3, r1
    15da:	ff e1       	ldi	r31, 0x1F	; 31
    15dc:	f3 15       	cp	r31, r3
    15de:	d8 f0       	brcs	.+54     	; 0x1616 <vfprintf+0x98>
    15e0:	8b 32       	cpi	r24, 0x2B	; 43
    15e2:	79 f0       	breq	.+30     	; 0x1602 <vfprintf+0x84>
    15e4:	38 f4       	brcc	.+14     	; 0x15f4 <vfprintf+0x76>
    15e6:	80 32       	cpi	r24, 0x20	; 32
    15e8:	79 f0       	breq	.+30     	; 0x1608 <vfprintf+0x8a>
    15ea:	83 32       	cpi	r24, 0x23	; 35
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <vfprintf+0x98>
    15ee:	23 2d       	mov	r18, r3
    15f0:	20 61       	ori	r18, 0x10	; 16
    15f2:	1d c0       	rjmp	.+58     	; 0x162e <vfprintf+0xb0>
    15f4:	8d 32       	cpi	r24, 0x2D	; 45
    15f6:	61 f0       	breq	.+24     	; 0x1610 <vfprintf+0x92>
    15f8:	80 33       	cpi	r24, 0x30	; 48
    15fa:	69 f4       	brne	.+26     	; 0x1616 <vfprintf+0x98>
    15fc:	23 2d       	mov	r18, r3
    15fe:	21 60       	ori	r18, 0x01	; 1
    1600:	16 c0       	rjmp	.+44     	; 0x162e <vfprintf+0xb0>
    1602:	83 2d       	mov	r24, r3
    1604:	82 60       	ori	r24, 0x02	; 2
    1606:	38 2e       	mov	r3, r24
    1608:	e3 2d       	mov	r30, r3
    160a:	e4 60       	ori	r30, 0x04	; 4
    160c:	3e 2e       	mov	r3, r30
    160e:	2a c0       	rjmp	.+84     	; 0x1664 <vfprintf+0xe6>
    1610:	f3 2d       	mov	r31, r3
    1612:	f8 60       	ori	r31, 0x08	; 8
    1614:	1d c0       	rjmp	.+58     	; 0x1650 <vfprintf+0xd2>
    1616:	37 fc       	sbrc	r3, 7
    1618:	2d c0       	rjmp	.+90     	; 0x1674 <vfprintf+0xf6>
    161a:	20 ed       	ldi	r18, 0xD0	; 208
    161c:	28 0f       	add	r18, r24
    161e:	2a 30       	cpi	r18, 0x0A	; 10
    1620:	40 f0       	brcs	.+16     	; 0x1632 <vfprintf+0xb4>
    1622:	8e 32       	cpi	r24, 0x2E	; 46
    1624:	b9 f4       	brne	.+46     	; 0x1654 <vfprintf+0xd6>
    1626:	36 fc       	sbrc	r3, 6
    1628:	81 c1       	rjmp	.+770    	; 0x192c <vfprintf+0x3ae>
    162a:	23 2d       	mov	r18, r3
    162c:	20 64       	ori	r18, 0x40	; 64
    162e:	32 2e       	mov	r3, r18
    1630:	19 c0       	rjmp	.+50     	; 0x1664 <vfprintf+0xe6>
    1632:	36 fe       	sbrs	r3, 6
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <vfprintf+0xc4>
    1636:	8a e0       	ldi	r24, 0x0A	; 10
    1638:	98 9e       	mul	r9, r24
    163a:	20 0d       	add	r18, r0
    163c:	11 24       	eor	r1, r1
    163e:	92 2e       	mov	r9, r18
    1640:	11 c0       	rjmp	.+34     	; 0x1664 <vfprintf+0xe6>
    1642:	ea e0       	ldi	r30, 0x0A	; 10
    1644:	2e 9e       	mul	r2, r30
    1646:	20 0d       	add	r18, r0
    1648:	11 24       	eor	r1, r1
    164a:	22 2e       	mov	r2, r18
    164c:	f3 2d       	mov	r31, r3
    164e:	f0 62       	ori	r31, 0x20	; 32
    1650:	3f 2e       	mov	r3, r31
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <vfprintf+0xe6>
    1654:	8c 36       	cpi	r24, 0x6C	; 108
    1656:	21 f4       	brne	.+8      	; 0x1660 <vfprintf+0xe2>
    1658:	83 2d       	mov	r24, r3
    165a:	80 68       	ori	r24, 0x80	; 128
    165c:	38 2e       	mov	r3, r24
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0xe6>
    1660:	88 36       	cpi	r24, 0x68	; 104
    1662:	41 f4       	brne	.+16     	; 0x1674 <vfprintf+0xf6>
    1664:	f7 01       	movw	r30, r14
    1666:	93 fd       	sbrc	r25, 3
    1668:	85 91       	lpm	r24, Z+
    166a:	93 ff       	sbrs	r25, 3
    166c:	81 91       	ld	r24, Z+
    166e:	7f 01       	movw	r14, r30
    1670:	81 11       	cpse	r24, r1
    1672:	b3 cf       	rjmp	.-154    	; 0x15da <vfprintf+0x5c>
    1674:	98 2f       	mov	r25, r24
    1676:	9f 7d       	andi	r25, 0xDF	; 223
    1678:	95 54       	subi	r25, 0x45	; 69
    167a:	93 30       	cpi	r25, 0x03	; 3
    167c:	28 f4       	brcc	.+10     	; 0x1688 <vfprintf+0x10a>
    167e:	0c 5f       	subi	r16, 0xFC	; 252
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	9f e3       	ldi	r25, 0x3F	; 63
    1684:	99 83       	std	Y+1, r25	; 0x01
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <vfprintf+0x124>
    1688:	83 36       	cpi	r24, 0x63	; 99
    168a:	31 f0       	breq	.+12     	; 0x1698 <vfprintf+0x11a>
    168c:	83 37       	cpi	r24, 0x73	; 115
    168e:	71 f0       	breq	.+28     	; 0x16ac <vfprintf+0x12e>
    1690:	83 35       	cpi	r24, 0x53	; 83
    1692:	09 f0       	breq	.+2      	; 0x1696 <vfprintf+0x118>
    1694:	59 c0       	rjmp	.+178    	; 0x1748 <vfprintf+0x1ca>
    1696:	21 c0       	rjmp	.+66     	; 0x16da <vfprintf+0x15c>
    1698:	f8 01       	movw	r30, r16
    169a:	80 81       	ld	r24, Z
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	0e 5f       	subi	r16, 0xFE	; 254
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	88 24       	eor	r8, r8
    16a4:	83 94       	inc	r8
    16a6:	91 2c       	mov	r9, r1
    16a8:	53 01       	movw	r10, r6
    16aa:	13 c0       	rjmp	.+38     	; 0x16d2 <vfprintf+0x154>
    16ac:	28 01       	movw	r4, r16
    16ae:	f2 e0       	ldi	r31, 0x02	; 2
    16b0:	4f 0e       	add	r4, r31
    16b2:	51 1c       	adc	r5, r1
    16b4:	f8 01       	movw	r30, r16
    16b6:	a0 80       	ld	r10, Z
    16b8:	b1 80       	ldd	r11, Z+1	; 0x01
    16ba:	36 fe       	sbrs	r3, 6
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <vfprintf+0x146>
    16be:	69 2d       	mov	r22, r9
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <vfprintf+0x14a>
    16c4:	6f ef       	ldi	r22, 0xFF	; 255
    16c6:	7f ef       	ldi	r23, 0xFF	; 255
    16c8:	c5 01       	movw	r24, r10
    16ca:	0e 94 ab 0c 	call	0x1956	; 0x1956 <strnlen>
    16ce:	4c 01       	movw	r8, r24
    16d0:	82 01       	movw	r16, r4
    16d2:	f3 2d       	mov	r31, r3
    16d4:	ff 77       	andi	r31, 0x7F	; 127
    16d6:	3f 2e       	mov	r3, r31
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <vfprintf+0x188>
    16da:	28 01       	movw	r4, r16
    16dc:	22 e0       	ldi	r18, 0x02	; 2
    16de:	42 0e       	add	r4, r18
    16e0:	51 1c       	adc	r5, r1
    16e2:	f8 01       	movw	r30, r16
    16e4:	a0 80       	ld	r10, Z
    16e6:	b1 80       	ldd	r11, Z+1	; 0x01
    16e8:	36 fe       	sbrs	r3, 6
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <vfprintf+0x174>
    16ec:	69 2d       	mov	r22, r9
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <vfprintf+0x178>
    16f2:	6f ef       	ldi	r22, 0xFF	; 255
    16f4:	7f ef       	ldi	r23, 0xFF	; 255
    16f6:	c5 01       	movw	r24, r10
    16f8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strnlen_P>
    16fc:	4c 01       	movw	r8, r24
    16fe:	f3 2d       	mov	r31, r3
    1700:	f0 68       	ori	r31, 0x80	; 128
    1702:	3f 2e       	mov	r3, r31
    1704:	82 01       	movw	r16, r4
    1706:	33 fc       	sbrc	r3, 3
    1708:	1b c0       	rjmp	.+54     	; 0x1740 <vfprintf+0x1c2>
    170a:	82 2d       	mov	r24, r2
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	88 16       	cp	r8, r24
    1710:	99 06       	cpc	r9, r25
    1712:	b0 f4       	brcc	.+44     	; 0x1740 <vfprintf+0x1c2>
    1714:	b6 01       	movw	r22, r12
    1716:	80 e2       	ldi	r24, 0x20	; 32
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    171e:	2a 94       	dec	r2
    1720:	f4 cf       	rjmp	.-24     	; 0x170a <vfprintf+0x18c>
    1722:	f5 01       	movw	r30, r10
    1724:	37 fc       	sbrc	r3, 7
    1726:	85 91       	lpm	r24, Z+
    1728:	37 fe       	sbrs	r3, 7
    172a:	81 91       	ld	r24, Z+
    172c:	5f 01       	movw	r10, r30
    172e:	b6 01       	movw	r22, r12
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    1736:	21 10       	cpse	r2, r1
    1738:	2a 94       	dec	r2
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	82 1a       	sub	r8, r18
    173e:	91 08       	sbc	r9, r1
    1740:	81 14       	cp	r8, r1
    1742:	91 04       	cpc	r9, r1
    1744:	71 f7       	brne	.-36     	; 0x1722 <vfprintf+0x1a4>
    1746:	e8 c0       	rjmp	.+464    	; 0x1918 <vfprintf+0x39a>
    1748:	84 36       	cpi	r24, 0x64	; 100
    174a:	11 f0       	breq	.+4      	; 0x1750 <vfprintf+0x1d2>
    174c:	89 36       	cpi	r24, 0x69	; 105
    174e:	41 f5       	brne	.+80     	; 0x17a0 <vfprintf+0x222>
    1750:	f8 01       	movw	r30, r16
    1752:	37 fe       	sbrs	r3, 7
    1754:	07 c0       	rjmp	.+14     	; 0x1764 <vfprintf+0x1e6>
    1756:	60 81       	ld	r22, Z
    1758:	71 81       	ldd	r23, Z+1	; 0x01
    175a:	82 81       	ldd	r24, Z+2	; 0x02
    175c:	93 81       	ldd	r25, Z+3	; 0x03
    175e:	0c 5f       	subi	r16, 0xFC	; 252
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <vfprintf+0x1f6>
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	07 2e       	mov	r0, r23
    176a:	00 0c       	add	r0, r0
    176c:	88 0b       	sbc	r24, r24
    176e:	99 0b       	sbc	r25, r25
    1770:	0e 5f       	subi	r16, 0xFE	; 254
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	f3 2d       	mov	r31, r3
    1776:	ff 76       	andi	r31, 0x6F	; 111
    1778:	3f 2e       	mov	r3, r31
    177a:	97 ff       	sbrs	r25, 7
    177c:	09 c0       	rjmp	.+18     	; 0x1790 <vfprintf+0x212>
    177e:	90 95       	com	r25
    1780:	80 95       	com	r24
    1782:	70 95       	com	r23
    1784:	61 95       	neg	r22
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	8f 4f       	sbci	r24, 0xFF	; 255
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	f0 68       	ori	r31, 0x80	; 128
    178e:	3f 2e       	mov	r3, r31
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	a3 01       	movw	r20, r6
    1796:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__ultoa_invert>
    179a:	88 2e       	mov	r8, r24
    179c:	86 18       	sub	r8, r6
    179e:	45 c0       	rjmp	.+138    	; 0x182a <vfprintf+0x2ac>
    17a0:	85 37       	cpi	r24, 0x75	; 117
    17a2:	31 f4       	brne	.+12     	; 0x17b0 <vfprintf+0x232>
    17a4:	23 2d       	mov	r18, r3
    17a6:	2f 7e       	andi	r18, 0xEF	; 239
    17a8:	b2 2e       	mov	r11, r18
    17aa:	2a e0       	ldi	r18, 0x0A	; 10
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	25 c0       	rjmp	.+74     	; 0x17fa <vfprintf+0x27c>
    17b0:	93 2d       	mov	r25, r3
    17b2:	99 7f       	andi	r25, 0xF9	; 249
    17b4:	b9 2e       	mov	r11, r25
    17b6:	8f 36       	cpi	r24, 0x6F	; 111
    17b8:	c1 f0       	breq	.+48     	; 0x17ea <vfprintf+0x26c>
    17ba:	18 f4       	brcc	.+6      	; 0x17c2 <vfprintf+0x244>
    17bc:	88 35       	cpi	r24, 0x58	; 88
    17be:	79 f0       	breq	.+30     	; 0x17de <vfprintf+0x260>
    17c0:	b5 c0       	rjmp	.+362    	; 0x192c <vfprintf+0x3ae>
    17c2:	80 37       	cpi	r24, 0x70	; 112
    17c4:	19 f0       	breq	.+6      	; 0x17cc <vfprintf+0x24e>
    17c6:	88 37       	cpi	r24, 0x78	; 120
    17c8:	21 f0       	breq	.+8      	; 0x17d2 <vfprintf+0x254>
    17ca:	b0 c0       	rjmp	.+352    	; 0x192c <vfprintf+0x3ae>
    17cc:	e9 2f       	mov	r30, r25
    17ce:	e0 61       	ori	r30, 0x10	; 16
    17d0:	be 2e       	mov	r11, r30
    17d2:	b4 fe       	sbrs	r11, 4
    17d4:	0d c0       	rjmp	.+26     	; 0x17f0 <vfprintf+0x272>
    17d6:	fb 2d       	mov	r31, r11
    17d8:	f4 60       	ori	r31, 0x04	; 4
    17da:	bf 2e       	mov	r11, r31
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <vfprintf+0x272>
    17de:	34 fe       	sbrs	r3, 4
    17e0:	0a c0       	rjmp	.+20     	; 0x17f6 <vfprintf+0x278>
    17e2:	29 2f       	mov	r18, r25
    17e4:	26 60       	ori	r18, 0x06	; 6
    17e6:	b2 2e       	mov	r11, r18
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <vfprintf+0x278>
    17ea:	28 e0       	ldi	r18, 0x08	; 8
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <vfprintf+0x27c>
    17f0:	20 e1       	ldi	r18, 0x10	; 16
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <vfprintf+0x27c>
    17f6:	20 e1       	ldi	r18, 0x10	; 16
    17f8:	32 e0       	ldi	r19, 0x02	; 2
    17fa:	f8 01       	movw	r30, r16
    17fc:	b7 fe       	sbrs	r11, 7
    17fe:	07 c0       	rjmp	.+14     	; 0x180e <vfprintf+0x290>
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	0c 5f       	subi	r16, 0xFC	; 252
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	06 c0       	rjmp	.+12     	; 0x181a <vfprintf+0x29c>
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 5f       	subi	r16, 0xFE	; 254
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	a3 01       	movw	r20, r6
    181c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__ultoa_invert>
    1820:	88 2e       	mov	r8, r24
    1822:	86 18       	sub	r8, r6
    1824:	fb 2d       	mov	r31, r11
    1826:	ff 77       	andi	r31, 0x7F	; 127
    1828:	3f 2e       	mov	r3, r31
    182a:	36 fe       	sbrs	r3, 6
    182c:	0d c0       	rjmp	.+26     	; 0x1848 <vfprintf+0x2ca>
    182e:	23 2d       	mov	r18, r3
    1830:	2e 7f       	andi	r18, 0xFE	; 254
    1832:	a2 2e       	mov	r10, r18
    1834:	89 14       	cp	r8, r9
    1836:	58 f4       	brcc	.+22     	; 0x184e <vfprintf+0x2d0>
    1838:	34 fe       	sbrs	r3, 4
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <vfprintf+0x2d4>
    183c:	32 fc       	sbrc	r3, 2
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <vfprintf+0x2d4>
    1840:	83 2d       	mov	r24, r3
    1842:	8e 7e       	andi	r24, 0xEE	; 238
    1844:	a8 2e       	mov	r10, r24
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <vfprintf+0x2d4>
    1848:	b8 2c       	mov	r11, r8
    184a:	a3 2c       	mov	r10, r3
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <vfprintf+0x2d6>
    184e:	b8 2c       	mov	r11, r8
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <vfprintf+0x2d6>
    1852:	b9 2c       	mov	r11, r9
    1854:	a4 fe       	sbrs	r10, 4
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <vfprintf+0x2f8>
    1858:	fe 01       	movw	r30, r28
    185a:	e8 0d       	add	r30, r8
    185c:	f1 1d       	adc	r31, r1
    185e:	80 81       	ld	r24, Z
    1860:	80 33       	cpi	r24, 0x30	; 48
    1862:	21 f4       	brne	.+8      	; 0x186c <vfprintf+0x2ee>
    1864:	9a 2d       	mov	r25, r10
    1866:	99 7e       	andi	r25, 0xE9	; 233
    1868:	a9 2e       	mov	r10, r25
    186a:	09 c0       	rjmp	.+18     	; 0x187e <vfprintf+0x300>
    186c:	a2 fe       	sbrs	r10, 2
    186e:	06 c0       	rjmp	.+12     	; 0x187c <vfprintf+0x2fe>
    1870:	b3 94       	inc	r11
    1872:	b3 94       	inc	r11
    1874:	04 c0       	rjmp	.+8      	; 0x187e <vfprintf+0x300>
    1876:	8a 2d       	mov	r24, r10
    1878:	86 78       	andi	r24, 0x86	; 134
    187a:	09 f0       	breq	.+2      	; 0x187e <vfprintf+0x300>
    187c:	b3 94       	inc	r11
    187e:	a3 fc       	sbrc	r10, 3
    1880:	11 c0       	rjmp	.+34     	; 0x18a4 <vfprintf+0x326>
    1882:	a0 fe       	sbrs	r10, 0
    1884:	06 c0       	rjmp	.+12     	; 0x1892 <vfprintf+0x314>
    1886:	b2 14       	cp	r11, r2
    1888:	88 f4       	brcc	.+34     	; 0x18ac <vfprintf+0x32e>
    188a:	28 0c       	add	r2, r8
    188c:	92 2c       	mov	r9, r2
    188e:	9b 18       	sub	r9, r11
    1890:	0e c0       	rjmp	.+28     	; 0x18ae <vfprintf+0x330>
    1892:	b2 14       	cp	r11, r2
    1894:	60 f4       	brcc	.+24     	; 0x18ae <vfprintf+0x330>
    1896:	b6 01       	movw	r22, r12
    1898:	80 e2       	ldi	r24, 0x20	; 32
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    18a0:	b3 94       	inc	r11
    18a2:	f7 cf       	rjmp	.-18     	; 0x1892 <vfprintf+0x314>
    18a4:	b2 14       	cp	r11, r2
    18a6:	18 f4       	brcc	.+6      	; 0x18ae <vfprintf+0x330>
    18a8:	2b 18       	sub	r2, r11
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x332>
    18ac:	98 2c       	mov	r9, r8
    18ae:	21 2c       	mov	r2, r1
    18b0:	a4 fe       	sbrs	r10, 4
    18b2:	10 c0       	rjmp	.+32     	; 0x18d4 <vfprintf+0x356>
    18b4:	b6 01       	movw	r22, r12
    18b6:	80 e3       	ldi	r24, 0x30	; 48
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    18be:	a2 fe       	sbrs	r10, 2
    18c0:	17 c0       	rjmp	.+46     	; 0x18f0 <vfprintf+0x372>
    18c2:	a1 fc       	sbrc	r10, 1
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <vfprintf+0x34e>
    18c6:	88 e7       	ldi	r24, 0x78	; 120
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <vfprintf+0x352>
    18cc:	88 e5       	ldi	r24, 0x58	; 88
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	b6 01       	movw	r22, r12
    18d2:	0c c0       	rjmp	.+24     	; 0x18ec <vfprintf+0x36e>
    18d4:	8a 2d       	mov	r24, r10
    18d6:	86 78       	andi	r24, 0x86	; 134
    18d8:	59 f0       	breq	.+22     	; 0x18f0 <vfprintf+0x372>
    18da:	a1 fe       	sbrs	r10, 1
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <vfprintf+0x364>
    18de:	8b e2       	ldi	r24, 0x2B	; 43
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <vfprintf+0x366>
    18e2:	80 e2       	ldi	r24, 0x20	; 32
    18e4:	a7 fc       	sbrc	r10, 7
    18e6:	8d e2       	ldi	r24, 0x2D	; 45
    18e8:	b6 01       	movw	r22, r12
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    18f0:	89 14       	cp	r8, r9
    18f2:	38 f4       	brcc	.+14     	; 0x1902 <vfprintf+0x384>
    18f4:	b6 01       	movw	r22, r12
    18f6:	80 e3       	ldi	r24, 0x30	; 48
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    18fe:	9a 94       	dec	r9
    1900:	f7 cf       	rjmp	.-18     	; 0x18f0 <vfprintf+0x372>
    1902:	8a 94       	dec	r8
    1904:	f3 01       	movw	r30, r6
    1906:	e8 0d       	add	r30, r8
    1908:	f1 1d       	adc	r31, r1
    190a:	80 81       	ld	r24, Z
    190c:	b6 01       	movw	r22, r12
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    1914:	81 10       	cpse	r8, r1
    1916:	f5 cf       	rjmp	.-22     	; 0x1902 <vfprintf+0x384>
    1918:	22 20       	and	r2, r2
    191a:	09 f4       	brne	.+2      	; 0x191e <vfprintf+0x3a0>
    191c:	42 ce       	rjmp	.-892    	; 0x15a2 <vfprintf+0x24>
    191e:	b6 01       	movw	r22, r12
    1920:	80 e2       	ldi	r24, 0x20	; 32
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    1928:	2a 94       	dec	r2
    192a:	f6 cf       	rjmp	.-20     	; 0x1918 <vfprintf+0x39a>
    192c:	f6 01       	movw	r30, r12
    192e:	86 81       	ldd	r24, Z+6	; 0x06
    1930:	97 81       	ldd	r25, Z+7	; 0x07
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x3ba>
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	9f ef       	ldi	r25, 0xFF	; 255
    1938:	2b 96       	adiw	r28, 0x0b	; 11
    193a:	e2 e1       	ldi	r30, 0x12	; 18
    193c:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__epilogue_restores__>

00001940 <strnlen_P>:
    1940:	fc 01       	movw	r30, r24
    1942:	05 90       	lpm	r0, Z+
    1944:	61 50       	subi	r22, 0x01	; 1
    1946:	70 40       	sbci	r23, 0x00	; 0
    1948:	01 10       	cpse	r0, r1
    194a:	d8 f7       	brcc	.-10     	; 0x1942 <strnlen_P+0x2>
    194c:	80 95       	com	r24
    194e:	90 95       	com	r25
    1950:	8e 0f       	add	r24, r30
    1952:	9f 1f       	adc	r25, r31
    1954:	08 95       	ret

00001956 <strnlen>:
    1956:	fc 01       	movw	r30, r24
    1958:	61 50       	subi	r22, 0x01	; 1
    195a:	70 40       	sbci	r23, 0x00	; 0
    195c:	01 90       	ld	r0, Z+
    195e:	01 10       	cpse	r0, r1
    1960:	d8 f7       	brcc	.-10     	; 0x1958 <strnlen+0x2>
    1962:	80 95       	com	r24
    1964:	90 95       	com	r25
    1966:	8e 0f       	add	r24, r30
    1968:	9f 1f       	adc	r25, r31
    196a:	08 95       	ret

0000196c <fputc>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	fb 01       	movw	r30, r22
    1976:	23 81       	ldd	r18, Z+3	; 0x03
    1978:	21 fd       	sbrc	r18, 1
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <fputc+0x16>
    197c:	8f ef       	ldi	r24, 0xFF	; 255
    197e:	9f ef       	ldi	r25, 0xFF	; 255
    1980:	2c c0       	rjmp	.+88     	; 0x19da <fputc+0x6e>
    1982:	22 ff       	sbrs	r18, 2
    1984:	16 c0       	rjmp	.+44     	; 0x19b2 <fputc+0x46>
    1986:	46 81       	ldd	r20, Z+6	; 0x06
    1988:	57 81       	ldd	r21, Z+7	; 0x07
    198a:	24 81       	ldd	r18, Z+4	; 0x04
    198c:	35 81       	ldd	r19, Z+5	; 0x05
    198e:	42 17       	cp	r20, r18
    1990:	53 07       	cpc	r21, r19
    1992:	44 f4       	brge	.+16     	; 0x19a4 <fputc+0x38>
    1994:	a0 81       	ld	r26, Z
    1996:	b1 81       	ldd	r27, Z+1	; 0x01
    1998:	9d 01       	movw	r18, r26
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	31 83       	std	Z+1, r19	; 0x01
    19a0:	20 83       	st	Z, r18
    19a2:	8c 93       	st	X, r24
    19a4:	26 81       	ldd	r18, Z+6	; 0x06
    19a6:	37 81       	ldd	r19, Z+7	; 0x07
    19a8:	2f 5f       	subi	r18, 0xFF	; 255
    19aa:	3f 4f       	sbci	r19, 0xFF	; 255
    19ac:	37 83       	std	Z+7, r19	; 0x07
    19ae:	26 83       	std	Z+6, r18	; 0x06
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <fputc+0x6e>
    19b2:	8b 01       	movw	r16, r22
    19b4:	ec 01       	movw	r28, r24
    19b6:	fb 01       	movw	r30, r22
    19b8:	00 84       	ldd	r0, Z+8	; 0x08
    19ba:	f1 85       	ldd	r31, Z+9	; 0x09
    19bc:	e0 2d       	mov	r30, r0
    19be:	09 95       	icall
    19c0:	89 2b       	or	r24, r25
    19c2:	e1 f6       	brne	.-72     	; 0x197c <fputc+0x10>
    19c4:	d8 01       	movw	r26, r16
    19c6:	16 96       	adiw	r26, 0x06	; 6
    19c8:	8d 91       	ld	r24, X+
    19ca:	9c 91       	ld	r25, X
    19cc:	17 97       	sbiw	r26, 0x07	; 7
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	17 96       	adiw	r26, 0x07	; 7
    19d2:	9c 93       	st	X, r25
    19d4:	8e 93       	st	-X, r24
    19d6:	16 97       	sbiw	r26, 0x06	; 6
    19d8:	ce 01       	movw	r24, r28
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <__ultoa_invert>:
    19e4:	fa 01       	movw	r30, r20
    19e6:	aa 27       	eor	r26, r26
    19e8:	28 30       	cpi	r18, 0x08	; 8
    19ea:	51 f1       	breq	.+84     	; 0x1a40 <__ultoa_invert+0x5c>
    19ec:	20 31       	cpi	r18, 0x10	; 16
    19ee:	81 f1       	breq	.+96     	; 0x1a50 <__ultoa_invert+0x6c>
    19f0:	e8 94       	clt
    19f2:	6f 93       	push	r22
    19f4:	6e 7f       	andi	r22, 0xFE	; 254
    19f6:	6e 5f       	subi	r22, 0xFE	; 254
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	8f 4f       	sbci	r24, 0xFF	; 255
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	af 4f       	sbci	r26, 0xFF	; 255
    1a00:	b1 e0       	ldi	r27, 0x01	; 1
    1a02:	3e d0       	rcall	.+124    	; 0x1a80 <__ultoa_invert+0x9c>
    1a04:	b4 e0       	ldi	r27, 0x04	; 4
    1a06:	3c d0       	rcall	.+120    	; 0x1a80 <__ultoa_invert+0x9c>
    1a08:	67 0f       	add	r22, r23
    1a0a:	78 1f       	adc	r23, r24
    1a0c:	89 1f       	adc	r24, r25
    1a0e:	9a 1f       	adc	r25, r26
    1a10:	a1 1d       	adc	r26, r1
    1a12:	68 0f       	add	r22, r24
    1a14:	79 1f       	adc	r23, r25
    1a16:	8a 1f       	adc	r24, r26
    1a18:	91 1d       	adc	r25, r1
    1a1a:	a1 1d       	adc	r26, r1
    1a1c:	6a 0f       	add	r22, r26
    1a1e:	71 1d       	adc	r23, r1
    1a20:	81 1d       	adc	r24, r1
    1a22:	91 1d       	adc	r25, r1
    1a24:	a1 1d       	adc	r26, r1
    1a26:	20 d0       	rcall	.+64     	; 0x1a68 <__ultoa_invert+0x84>
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <__ultoa_invert+0x48>
    1a2a:	68 94       	set
    1a2c:	3f 91       	pop	r19
    1a2e:	2a e0       	ldi	r18, 0x0A	; 10
    1a30:	26 9f       	mul	r18, r22
    1a32:	11 24       	eor	r1, r1
    1a34:	30 19       	sub	r19, r0
    1a36:	30 5d       	subi	r19, 0xD0	; 208
    1a38:	31 93       	st	Z+, r19
    1a3a:	de f6       	brtc	.-74     	; 0x19f2 <__ultoa_invert+0xe>
    1a3c:	cf 01       	movw	r24, r30
    1a3e:	08 95       	ret
    1a40:	46 2f       	mov	r20, r22
    1a42:	47 70       	andi	r20, 0x07	; 7
    1a44:	40 5d       	subi	r20, 0xD0	; 208
    1a46:	41 93       	st	Z+, r20
    1a48:	b3 e0       	ldi	r27, 0x03	; 3
    1a4a:	0f d0       	rcall	.+30     	; 0x1a6a <__ultoa_invert+0x86>
    1a4c:	c9 f7       	brne	.-14     	; 0x1a40 <__ultoa_invert+0x5c>
    1a4e:	f6 cf       	rjmp	.-20     	; 0x1a3c <__ultoa_invert+0x58>
    1a50:	46 2f       	mov	r20, r22
    1a52:	4f 70       	andi	r20, 0x0F	; 15
    1a54:	40 5d       	subi	r20, 0xD0	; 208
    1a56:	4a 33       	cpi	r20, 0x3A	; 58
    1a58:	18 f0       	brcs	.+6      	; 0x1a60 <__ultoa_invert+0x7c>
    1a5a:	49 5d       	subi	r20, 0xD9	; 217
    1a5c:	31 fd       	sbrc	r19, 1
    1a5e:	40 52       	subi	r20, 0x20	; 32
    1a60:	41 93       	st	Z+, r20
    1a62:	02 d0       	rcall	.+4      	; 0x1a68 <__ultoa_invert+0x84>
    1a64:	a9 f7       	brne	.-22     	; 0x1a50 <__ultoa_invert+0x6c>
    1a66:	ea cf       	rjmp	.-44     	; 0x1a3c <__ultoa_invert+0x58>
    1a68:	b4 e0       	ldi	r27, 0x04	; 4
    1a6a:	a6 95       	lsr	r26
    1a6c:	97 95       	ror	r25
    1a6e:	87 95       	ror	r24
    1a70:	77 95       	ror	r23
    1a72:	67 95       	ror	r22
    1a74:	ba 95       	dec	r27
    1a76:	c9 f7       	brne	.-14     	; 0x1a6a <__ultoa_invert+0x86>
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 05       	cpc	r22, r1
    1a7c:	71 05       	cpc	r23, r1
    1a7e:	08 95       	ret
    1a80:	9b 01       	movw	r18, r22
    1a82:	ac 01       	movw	r20, r24
    1a84:	0a 2e       	mov	r0, r26
    1a86:	06 94       	lsr	r0
    1a88:	57 95       	ror	r21
    1a8a:	47 95       	ror	r20
    1a8c:	37 95       	ror	r19
    1a8e:	27 95       	ror	r18
    1a90:	ba 95       	dec	r27
    1a92:	c9 f7       	brne	.-14     	; 0x1a86 <__ultoa_invert+0xa2>
    1a94:	62 0f       	add	r22, r18
    1a96:	73 1f       	adc	r23, r19
    1a98:	84 1f       	adc	r24, r20
    1a9a:	95 1f       	adc	r25, r21
    1a9c:	a0 1d       	adc	r26, r0
    1a9e:	08 95       	ret

00001aa0 <__prologue_saves__>:
    1aa0:	2f 92       	push	r2
    1aa2:	3f 92       	push	r3
    1aa4:	4f 92       	push	r4
    1aa6:	5f 92       	push	r5
    1aa8:	6f 92       	push	r6
    1aaa:	7f 92       	push	r7
    1aac:	8f 92       	push	r8
    1aae:	9f 92       	push	r9
    1ab0:	af 92       	push	r10
    1ab2:	bf 92       	push	r11
    1ab4:	cf 92       	push	r12
    1ab6:	df 92       	push	r13
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	ca 1b       	sub	r28, r26
    1aca:	db 0b       	sbc	r29, r27
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	09 94       	ijmp

00001ad8 <__epilogue_restores__>:
    1ad8:	2a 88       	ldd	r2, Y+18	; 0x12
    1ada:	39 88       	ldd	r3, Y+17	; 0x11
    1adc:	48 88       	ldd	r4, Y+16	; 0x10
    1ade:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ae0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ae2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ae4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ae6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ae8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aea:	b9 84       	ldd	r11, Y+9	; 0x09
    1aec:	c8 84       	ldd	r12, Y+8	; 0x08
    1aee:	df 80       	ldd	r13, Y+7	; 0x07
    1af0:	ee 80       	ldd	r14, Y+6	; 0x06
    1af2:	fd 80       	ldd	r15, Y+5	; 0x05
    1af4:	0c 81       	ldd	r16, Y+4	; 0x04
    1af6:	1b 81       	ldd	r17, Y+3	; 0x03
    1af8:	aa 81       	ldd	r26, Y+2	; 0x02
    1afa:	b9 81       	ldd	r27, Y+1	; 0x01
    1afc:	ce 0f       	add	r28, r30
    1afe:	d1 1d       	adc	r29, r1
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	ed 01       	movw	r28, r26
    1b0c:	08 95       	ret

00001b0e <_exit>:
    1b0e:	f8 94       	cli

00001b10 <__stop_program>:
    1b10:	ff cf       	rjmp	.-2      	; 0x1b10 <__stop_program>

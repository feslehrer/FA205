
6_3_Datenlogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000444  00800100  00002002  00002096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002002  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800544  00800544  000024da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000421c  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000123e  00000000  00000000  00006b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fbe  00000000  00000000  00007d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b30  00000000  00000000  00009d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b83  00000000  00000000  0000a868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002de2  00000000  00000000  0000b3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000e1cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 00 	jmp	0xce	; 0xce <__ctors_end>
       4:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_1>
       8:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_2>
       c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      38:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__vector_14>
      3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      48:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__vector_18>
      4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      68:	4a 01       	movw	r8, r20
      6a:	3d 02       	muls	r19, r29
      6c:	3d 02       	muls	r19, r29
      6e:	16 01       	movw	r2, r12
      70:	98 00       	.word	0x0098	; ????
      72:	3d 02       	muls	r19, r29
      74:	d9 01       	movw	r26, r18
      76:	3d 02       	muls	r19, r29
      78:	3d 02       	muls	r19, r29
      7a:	3d 02       	muls	r19, r29
      7c:	3d 02       	muls	r19, r29
      7e:	a3 00       	.word	0x00a3	; ????
      80:	c0 00       	.word	0x00c0	; ????
      82:	3d 02       	muls	r19, r29
      84:	bd 00       	.word	0x00bd	; ????
      86:	3d 02       	muls	r19, r29
      88:	3d 02       	muls	r19, r29
      8a:	dd 00       	.word	0x00dd	; ????
      8c:	b6 00       	.word	0x00b6	; ????
      8e:	3d 02       	muls	r19, r29
      90:	3d 02       	muls	r19, r29
      92:	3d 02       	muls	r19, r29
      94:	3d 02       	muls	r19, r29
      96:	3d 02       	muls	r19, r29
      98:	3d 02       	muls	r19, r29
      9a:	3d 02       	muls	r19, r29
      9c:	3d 02       	muls	r19, r29
      9e:	3d 02       	muls	r19, r29
      a0:	3d 02       	muls	r19, r29
      a2:	3d 02       	muls	r19, r29
      a4:	3d 02       	muls	r19, r29
      a6:	3d 02       	muls	r19, r29
      a8:	4a 01       	movw	r8, r20
      aa:	3d 02       	muls	r19, r29
      ac:	3d 02       	muls	r19, r29
      ae:	16 01       	movw	r2, r12
      b0:	98 00       	.word	0x0098	; ????
      b2:	3d 02       	muls	r19, r29
      b4:	d9 01       	movw	r26, r18
      b6:	3d 02       	muls	r19, r29
      b8:	3d 02       	muls	r19, r29
      ba:	3d 02       	muls	r19, r29
      bc:	3d 02       	muls	r19, r29
      be:	a3 00       	.word	0x00a3	; ????
      c0:	c0 00       	.word	0x00c0	; ????
      c2:	3d 02       	muls	r19, r29
      c4:	bd 00       	.word	0x00bd	; ????
      c6:	3d 02       	muls	r19, r29
      c8:	3d 02       	muls	r19, r29
      ca:	dd 00       	.word	0x00dd	; ????
      cc:	b6 00       	.word	0x00b6	; ????

000000ce <__ctors_end>:
      ce:	11 24       	eor	r1, r1
      d0:	1f be       	out	0x3f, r1	; 63
      d2:	cf ef       	ldi	r28, 0xFF	; 255
      d4:	d8 e0       	ldi	r29, 0x08	; 8
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
      da:	15 e0       	ldi	r17, 0x05	; 5
      dc:	a0 e0       	ldi	r26, 0x00	; 0
      de:	b1 e0       	ldi	r27, 0x01	; 1
      e0:	e2 e0       	ldi	r30, 0x02	; 2
      e2:	f0 e2       	ldi	r31, 0x20	; 32
      e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
      e6:	05 90       	lpm	r0, Z+
      e8:	0d 92       	st	X+, r0
      ea:	a4 34       	cpi	r26, 0x44	; 68
      ec:	b1 07       	cpc	r27, r17
      ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
      f0:	25 e0       	ldi	r18, 0x05	; 5
      f2:	a4 e4       	ldi	r26, 0x44	; 68
      f4:	b5 e0       	ldi	r27, 0x05	; 5
      f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
      f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
      fa:	a0 36       	cpi	r26, 0x60	; 96
      fc:	b2 07       	cpc	r27, r18
      fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
     100:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
     104:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <_exit>

00000108 <__bad_interrupt>:
     108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <serial_interrupt_isr>:
		delay_ms(1000);
  }
}
//*******************************************************************
void serial_interrupt_isr(void)
{
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
  uint8_t c;
  uint32_t n;
  int8_t test = 0;
  
  c=rs232_get();
     114:	0e 94 09 04 	call	0x812	; 0x812 <rs232_get>
  
  switch (c)
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	fc 01       	movw	r30, r24
     11c:	e2 54       	subi	r30, 0x42	; 66
     11e:	f1 09       	sbc	r31, r1
     120:	e3 33       	cpi	r30, 0x33	; 51
     122:	f1 05       	cpc	r31, r1
     124:	08 f0       	brcs	.+2      	; 0x128 <serial_interrupt_isr+0x1c>
     126:	a9 c1       	rjmp	.+850    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     128:	ec 5c       	subi	r30, 0xCC	; 204
     12a:	ff 4f       	sbci	r31, 0xFF	; 255
     12c:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__tablejump2__>
  {
    case 'f':
    case 'F': //Toggle Temperaturanzeige
              if (temp_anz == 0) temp_anz = 1;
     130:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <temp_anz>
     134:	81 11       	cpse	r24, r1
     136:	04 c0       	rjmp	.+8      	; 0x140 <serial_interrupt_isr+0x34>
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <temp_anz>
     13e:	9d c1       	rjmp	.+826    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
              else               temp_anz = 0;
     140:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <temp_anz>
     144:	9a c1       	rjmp	.+820    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
              break;
    case 'm':
    case 'M': //Toggle Anzeigemodus (plain, name)
              switch (anz_mode)
     146:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <__data_end>
     14a:	81 30       	cpi	r24, 0x01	; 1
     14c:	41 f0       	breq	.+16     	; 0x15e <serial_interrupt_isr+0x52>
     14e:	18 f0       	brcs	.+6      	; 0x156 <serial_interrupt_isr+0x4a>
     150:	82 30       	cpi	r24, 0x02	; 2
     152:	49 f0       	breq	.+18     	; 0x166 <serial_interrupt_isr+0x5a>
     154:	92 c1       	rjmp	.+804    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
              {
                case 0: anz_mode = 1;break;
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <__data_end>
     15c:	8e c1       	rjmp	.+796    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
                case 1: anz_mode = 2;break;
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <__data_end>
     164:	8a c1       	rjmp	.+788    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
                case 2: anz_mode = 0;break;
     166:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <__data_end>
     16a:	87 c1       	rjmp	.+782    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
                default: break;
              }              
              break;
    case 't':
    case 'T': // Zeit einstellen
              rs232_set_time();
     16c:	0e 94 85 06 	call	0xd0a	; 0xd0a <rs232_set_time>
              rs232_print("\n\r");
     170:	8f e8       	ldi	r24, 0x8F	; 143
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              break;
     178:	80 c1       	rjmp	.+768    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    case 'p':
    case 'P': // alle Datensätze drucken
              serial_print_all_records();
     17a:	0e 94 20 07 	call	0xe40	; 0xe40 <serial_print_all_records>
              break;
     17e:	7d c1       	rjmp	.+762    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    case 'n':  
    case 'N': // Aufzeichnung neustarten
              rs232_print("Alle Datensätze werden gelöscht [j/n]: ");
     180:	8b e1       	ldi	r24, 0x1B	; 27
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              while((c=rs232_get())== 0);
     188:	0e 94 09 04 	call	0x812	; 0x812 <rs232_get>
     18c:	c8 2f       	mov	r28, r24
     18e:	88 23       	and	r24, r24
     190:	d9 f3       	breq	.-10     	; 0x188 <serial_interrupt_isr+0x7c>
              rs232_put(c);
     192:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
              if ((c=='j')||(c=='J'))  
     196:	cf 7d       	andi	r28, 0xDF	; 223
     198:	ca 34       	cpi	r28, 0x4A	; 74
     19a:	51 f4       	brne	.+20     	; 0x1b0 <serial_interrupt_isr+0xa4>
              {
                aktueller_Datensatz = 0;
     19c:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <aktueller_Datensatz+0x1>
     1a0:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <aktueller_Datensatz>
                write_current_recordnumber_to_rtc(aktueller_Datensatz);
     1a4:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <aktueller_Datensatz>
     1a8:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <aktueller_Datensatz+0x1>
     1ac:	0e 94 f6 06 	call	0xdec	; 0xdec <write_current_recordnumber_to_rtc>
              }                
              rs232_print(" ...gelöscht!\n\r");
     1b0:	83 e4       	ldi	r24, 0x43	; 67
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              break;
     1b8:	60 c1       	rjmp	.+704    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    case 's':
    case 'S': // Sample-Zeit ändern
              rs232_print("\n\rSampleintervall in s[");rs232_int(_SAMPLE_TIME_);rs232_print("]: ");
     1ba:	83 e5       	ldi	r24, 0x53	; 83
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     1c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_SAMPLE_TIME_>
     1c6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_SAMPLE_TIME_+0x1>
     1ca:	0e 94 63 04 	call	0x8c6	; 0x8c6 <rs232_int>
     1ce:	8a e8       	ldi	r24, 0x8A	; 138
     1d0:	94 e0       	ldi	r25, 0x04	; 4
     1d2:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              if (((n = rs232_get_sampletime()) >= 60)&&(n<=0xffff)) 
     1d6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <rs232_get_sampletime>
     1da:	8b 01       	movw	r16, r22
     1dc:	9c 01       	movw	r18, r24
     1de:	0c 53       	subi	r16, 0x3C	; 60
     1e0:	11 09       	sbc	r17, r1
     1e2:	21 09       	sbc	r18, r1
     1e4:	31 09       	sbc	r19, r1
     1e6:	04 3c       	cpi	r16, 0xC4	; 196
     1e8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ea:	21 05       	cpc	r18, r1
     1ec:	31 05       	cpc	r19, r1
     1ee:	58 f4       	brcc	.+22     	; 0x206 <serial_interrupt_isr+0xfa>
              {
                _SAMPLE_TIME_ = n;
     1f0:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_SAMPLE_TIME_+0x1>
     1f4:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_SAMPLE_TIME_>
                write_current_sampletime_to_rtc(_SAMPLE_TIME_);
     1f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_SAMPLE_TIME_>
     1fc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_SAMPLE_TIME_+0x1>
     200:	0e 94 14 07 	call	0xe28	; 0xe28 <write_current_sampletime_to_rtc>
     204:	04 c0       	rjmp	.+8      	; 0x20e <serial_interrupt_isr+0x102>
              }              
              else rs232_print("60s <= Sampelintervall <= 65535s !!!\n\r");
     206:	8b e6       	ldi	r24, 0x6B	; 107
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("Neues Sampelintervall: ");rs232_int(_SAMPLE_TIME_);rs232_print("\n\r");         
     20e:	82 e9       	ldi	r24, 0x92	; 146
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     216:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_SAMPLE_TIME_>
     21a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_SAMPLE_TIME_+0x1>
     21e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <rs232_int>
     222:	8f e8       	ldi	r24, 0x8F	; 143
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              break;
     22a:	27 c1       	rjmp	.+590    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    case 'e':
    case 'E': // EEPROM Speichertest

              rs232_print(" [1,2,3,x=exit]: ");
     22c:	8a ea       	ldi	r24, 0xAA	; 170
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              uint8_t n;
              do
              {
                 while((n = rs232_get()) == 0);
     234:	0e 94 09 04 	call	0x812	; 0x812 <rs232_get>
     238:	c8 2f       	mov	r28, r24
     23a:	88 23       	and	r24, r24
     23c:	d9 f3       	breq	.-10     	; 0x234 <serial_interrupt_isr+0x128>
              } while (((n < '1') || (n > '3')) && (n!='x'));
     23e:	8f ec       	ldi	r24, 0xCF	; 207
     240:	8c 0f       	add	r24, r28
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	08 f4       	brcc	.+2      	; 0x248 <serial_interrupt_isr+0x13c>
     246:	f3 c0       	rjmp	.+486    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     248:	c8 37       	cpi	r28, 0x78	; 120
     24a:	a1 f7       	brne	.-24     	; 0x234 <serial_interrupt_isr+0x128>
     24c:	d7 c0       	rjmp	.+430    	; 0x3fc <serial_interrupt_isr+0x2f0>
              lcd_clear();
              lcd_setcursor(1,1);
              lcd_print("EEPROM #"); lcd_char(n); lcd_print(" test"); rs232_print(" run...");
              switch (n)
              {
                  case '1':   test = eeprom_memtest(EEPROM_1); break;
     24e:	80 ea       	ldi	r24, 0xA0	; 160
     250:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <eeprom_memtest>
     254:	07 c0       	rjmp	.+14     	; 0x264 <serial_interrupt_isr+0x158>
                  case '2':   test = eeprom_memtest(EEPROM_2); break;
     256:	82 ea       	ldi	r24, 0xA2	; 162
     258:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <eeprom_memtest>
     25c:	03 c0       	rjmp	.+6      	; 0x264 <serial_interrupt_isr+0x158>
                  case '3':   test = eeprom_memtest(EEPROM_3); break;
     25e:	84 ea       	ldi	r24, 0xA4	; 164
     260:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <eeprom_memtest>
              }

              if (test == -1) {lcd_setcursor(1,1); lcd_print("!Speicherfehler!");rs232_print("Speicherfehler!\n\r");delay_s(5);}             
     264:	8f 3f       	cpi	r24, 0xFF	; 255
     266:	89 f4       	brne	.+34     	; 0x28a <serial_interrupt_isr+0x17e>
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
     270:	8c eb       	ldi	r24, 0xBC	; 188
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
     278:	8d ec       	ldi	r24, 0xCD	; 205
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     280:	85 e0       	ldi	r24, 0x05	; 5
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <delay_s>
     288:	f8 c0       	rjmp	.+496    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
              else rs232_print("OK\n\r");
     28a:	8f ed       	ldi	r24, 0xDF	; 223
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     292:	f3 c0       	rjmp	.+486    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
              break;
    case 'b':
    case 'B': // Baudrate ändern
              rs232_print("\n\rAktuelle Baudrate: "); rs232_int32(baudrate[baud],_TEXT_ALLIGN_LEFT_); rs232_print("Bd");
     294:	84 ee       	ldi	r24, 0xE4	; 228
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     29c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	ee 0f       	add	r30, r30
     2a8:	ff 1f       	adc	r31, r31
     2aa:	ec 50       	subi	r30, 0x0C	; 12
     2ac:	fc 4f       	sbci	r31, 0xFC	; 252
     2ae:	60 81       	ld	r22, Z
     2b0:	71 81       	ldd	r23, Z+1	; 0x01
     2b2:	82 81       	ldd	r24, Z+2	; 0x02
     2b4:	93 81       	ldd	r25, Z+3	; 0x03
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	0e 94 cb 04 	call	0x996	; 0x996 <rs232_int32>
     2bc:	8d ee       	ldi	r24, 0xED	; 237
     2be:	93 e0       	ldi	r25, 0x03	; 3
     2c0:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("\n\r x:exit   0:2400   1:4800   2:9600    3:19200   4:38400");
     2c4:	8a ef       	ldi	r24, 0xFA	; 250
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("\n\r          5:57600  6:76800  7:250000  8:500000  9:1000000");
     2cc:	84 e3       	ldi	r24, 0x34	; 52
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("\n\rNeue Baudrate: ");
     2d4:	80 e7       	ldi	r24, 0x70	; 112
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              
              n=0;
              do
              {
                while((n = rs232_get()) == 0);
     2dc:	0e 94 09 04 	call	0x812	; 0x812 <rs232_get>
     2e0:	c8 2f       	mov	r28, r24
     2e2:	88 23       	and	r24, r24
     2e4:	d9 f3       	breq	.-10     	; 0x2dc <serial_interrupt_isr+0x1d0>
              } while (((n < '0') || (n > '9')) && (n!='x'));
     2e6:	d0 ed       	ldi	r29, 0xD0	; 208
     2e8:	d8 0f       	add	r29, r24
     2ea:	da 30       	cpi	r29, 0x0A	; 10
     2ec:	18 f0       	brcs	.+6      	; 0x2f4 <serial_interrupt_isr+0x1e8>
     2ee:	88 37       	cpi	r24, 0x78	; 120
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <serial_interrupt_isr+0x1d0>
     2f2:	bf c0       	rjmp	.+382    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
              rs232_put(n);    // Echo
     2f4:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
              
              if (n=='x')
     2f8:	c8 37       	cpi	r28, 0x78	; 120
     2fa:	29 f4       	brne	.+10     	; 0x306 <serial_interrupt_isr+0x1fa>
              { rs232_print("\n\r");
     2fc:	8f e8       	ldi	r24, 0x8F	; 143
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
                break;
     304:	ba c0       	rjmp	.+372    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
              }              
              baud = n -'0';
     306:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__data_start>
              
              rs232_print("\n\rNeue Baudrate: "); rs232_int32(baudrate[baud],_TEXT_ALLIGN_RIGHT_);
     30a:	80 e7       	ldi	r24, 0x70	; 112
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     312:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	ec 50       	subi	r30, 0x0C	; 12
     322:	fc 4f       	sbci	r31, 0xFC	; 252
     324:	60 81       	ld	r22, Z
     326:	71 81       	ldd	r23, Z+1	; 0x01
     328:	82 81       	ldd	r24, Z+2	; 0x02
     32a:	93 81       	ldd	r25, Z+3	; 0x03
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	0e 94 cb 04 	call	0x996	; 0x996 <rs232_int32>
              rs232_print("Bd am Terminal einstellen!");
     332:	82 e8       	ldi	r24, 0x82	; 130
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              delay_ms(1000);
     33a:	88 ee       	ldi	r24, 0xE8	; 232
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
              
              rs232_baud(baudrate[baud]);
     342:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	ee 0f       	add	r30, r30
     34a:	ff 1f       	adc	r31, r31
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ec 50       	subi	r30, 0x0C	; 12
     352:	fc 4f       	sbci	r31, 0xFC	; 252
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	0e 94 cf 03 	call	0x79e	; 0x79e <rs232_baud>
              
              lcd_clear(); lcd_setcursor(1,1);lcd_print("Neue Baudrate: ");
     360:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <lcd_clear>
     364:	61 e0       	ldi	r22, 0x01	; 1
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
     36c:	82 e7       	ldi	r24, 0x72	; 114
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
              lcd_setcursor(2,1);lcd_int32(baudrate[baud],_TEXT_ALLIGN_RIGHT_);lcd_print("Bd");
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
     37c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	ec 50       	subi	r30, 0x0C	; 12
     38c:	fc 4f       	sbci	r31, 0xFC	; 252
     38e:	60 81       	ld	r22, Z
     390:	71 81       	ldd	r23, Z+1	; 0x01
     392:	82 81       	ldd	r24, Z+2	; 0x02
     394:	93 81       	ldd	r25, Z+3	; 0x03
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	0e 94 9a 0b 	call	0x1734	; 0x1734 <lcd_int32>
     39c:	8d ee       	ldi	r24, 0xED	; 237
     39e:	93 e0       	ldi	r25, 0x03	; 3
     3a0:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
              delay_ms(2000);
     3a4:	80 ed       	ldi	r24, 0xD0	; 208
     3a6:	97 e0       	ldi	r25, 0x07	; 7
     3a8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
              lcd_clear();
     3ac:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <lcd_clear>

              break;
     3b0:	64 c0       	rjmp	.+200    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    case 'h':
    case 'H': // Hilfe anzeigen
              rs232_print("\n\rHilfe:\n\r");
     3b2:	8d e9       	ldi	r24, 0x9D	; 157
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("t: Datum und Zeit einstellen\n\r");
     3ba:	88 ea       	ldi	r24, 0xA8	; 168
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("f: Temperatur fortlaufend ausgeben\n\r   [m: Umschalten des Anzeige-Modus]\n\r");              
     3c2:	87 ec       	ldi	r24, 0xC7	; 199
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("p: Alle Datensätze drucken\n\r");
     3ca:	82 e1       	ldi	r24, 0x12	; 18
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("n: Aufzeichnung neustarten\n\r");
     3d2:	8f e2       	ldi	r24, 0x2F	; 47
     3d4:	93 e0       	ldi	r25, 0x03	; 3
     3d6:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("s: Sampleintervall einstellen [default 120s]\n\r");
     3da:	8c e4       	ldi	r24, 0x4C	; 76
     3dc:	93 e0       	ldi	r25, 0x03	; 3
     3de:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("e: EEPROM Speichertest [1,2,3]\n\r"); 
     3e2:	8b e7       	ldi	r24, 0x7B	; 123
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("b: Baudrate ändern\n\r"); 
     3ea:	8c e9       	ldi	r24, 0x9C	; 156
     3ec:	93 e0       	ldi	r25, 0x03	; 3
     3ee:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              rs232_print("h: Hilfe anzeigen\n\r");              
     3f2:	81 eb       	ldi	r24, 0xB1	; 177
     3f4:	93 e0       	ldi	r25, 0x03	; 3
     3f6:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              break;
    default:  break;
  }
}
     3fa:	3f c0       	rjmp	.+126    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
              uint8_t n;
              do
              {
                 while((n = rs232_get()) == 0);
              } while (((n < '1') || (n > '3')) && (n!='x'));
              rs232_put(n);    // Echo
     3fc:	88 e7       	ldi	r24, 0x78	; 120
     3fe:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
              
              lcd_clear();
     402:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <lcd_clear>
              lcd_setcursor(1,1);
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
              lcd_print("EEPROM #"); lcd_char(n); lcd_print(" test"); rs232_print(" run...");
     40e:	85 ec       	ldi	r24, 0xC5	; 197
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
     416:	88 e7       	ldi	r24, 0x78	; 120
     418:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
     41c:	89 e0       	ldi	r24, 0x09	; 9
     41e:	95 e0       	ldi	r25, 0x05	; 5
     420:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
     424:	8e ec       	ldi	r24, 0xCE	; 206
     426:	93 e0       	ldi	r25, 0x03	; 3
     428:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     42c:	2e cf       	rjmp	.-420    	; 0x28a <serial_interrupt_isr+0x17e>
              uint8_t n;
              do
              {
                 while((n = rs232_get()) == 0);
              } while (((n < '1') || (n > '3')) && (n!='x'));
              rs232_put(n);    // Echo
     42e:	8c 2f       	mov	r24, r28
     430:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
              
              lcd_clear();
     434:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <lcd_clear>
              lcd_setcursor(1,1);
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
              lcd_print("EEPROM #"); lcd_char(n); lcd_print(" test"); rs232_print(" run...");
     440:	85 ec       	ldi	r24, 0xC5	; 197
     442:	93 e0       	ldi	r25, 0x03	; 3
     444:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
     448:	8c 2f       	mov	r24, r28
     44a:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
     44e:	89 e0       	ldi	r24, 0x09	; 9
     450:	95 e0       	ldi	r25, 0x05	; 5
     452:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
     456:	8e ec       	ldi	r24, 0xCE	; 206
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
              switch (n)
     45e:	c2 33       	cpi	r28, 0x32	; 50
     460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	f9 ce       	rjmp	.-526    	; 0x256 <serial_interrupt_isr+0x14a>
     464:	c3 33       	cpi	r28, 0x33	; 51
     466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     468:	fa ce       	rjmp	.-524    	; 0x25e <serial_interrupt_isr+0x152>
     46a:	c1 33       	cpi	r28, 0x31	; 49
     46c:	09 f4       	brne	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	ef ce       	rjmp	.-546    	; 0x24e <serial_interrupt_isr+0x142>
     470:	0c cf       	rjmp	.-488    	; 0x28a <serial_interrupt_isr+0x17e>
              n=0;
              do
              {
                while((n = rs232_get()) == 0);
              } while (((n < '0') || (n > '9')) && (n!='x'));
              rs232_put(n);    // Echo
     472:	88 e7       	ldi	r24, 0x78	; 120
     474:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     478:	41 cf       	rjmp	.-382    	; 0x2fc <serial_interrupt_isr+0x1f0>
              rs232_print("b: Baudrate ändern\n\r"); 
              rs232_print("h: Hilfe anzeigen\n\r");              
              break;
    default:  break;
  }
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <setup>:
uint8_t baud = 2;

//*******************************************************************
void setup(void)
{  // Initialisierungen
  lcd_init(); 
     484:	0e 94 ad 0a 	call	0x155a	; 0x155a <lcd_init>
	i2c_init();
     488:	0e 94 81 03 	call	0x702	; 0x702 <i2c_init>
	rtc_init();
     48c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <rtc_init>
	eeprom_init();
     490:	0e 94 10 09 	call	0x1220	; 0x1220 <eeprom_init>
  rs232_init();
     494:	0e 94 02 04 	call	0x804	; 0x804 <rs232_init>
  serial_interrupt_init(serial_interrupt_isr);
     498:	86 e8       	ldi	r24, 0x86	; 134
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 34 0a 	call	0x1468	; 0x1468 <serial_interrupt_init>
  rs232_baud(baudrate[baud]);
     4a0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	ec 50       	subi	r30, 0x0C	; 12
     4b0:	fc 4f       	sbci	r31, 0xFC	; 252
     4b2:	60 81       	ld	r22, Z
     4b4:	71 81       	ldd	r23, Z+1	; 0x01
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	0e 94 cf 03 	call	0x79e	; 0x79e <rs232_baud>
    
  // Definition der Sendezeichen
  lcd_defchar(zeichen1,1);
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	86 e4       	ldi	r24, 0x46	; 70
     4c2:	95 e0       	ldi	r25, 0x05	; 5
     4c4:	0e 94 1f 0c 	call	0x183e	; 0x183e <lcd_defchar>
  lcd_defchar(zeichen2,2);
     4c8:	62 e0       	ldi	r22, 0x02	; 2
     4ca:	83 e1       	ldi	r24, 0x13	; 19
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	0e 94 1f 0c 	call	0x183e	; 0x183e <lcd_defchar>
  lcd_defchar(zeichen3,3);
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	8b e0       	ldi	r24, 0x0B	; 11
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 1f 0c 	call	0x183e	; 0x183e <lcd_defchar>
  lcd_defchar(zeichen4,4);
     4dc:	64 e0       	ldi	r22, 0x04	; 4
     4de:	83 e0       	ldi	r24, 0x03	; 3
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 1f 0c 	call	0x183e	; 0x183e <lcd_defchar>
  //-Startbildschirm-------------------------  
	lcd_clear();
     4e6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <lcd_clear>
	lcd_setcursor(1,1);
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
	lcd_print("FES Datenlogger");
     4f2:	86 ed       	ldi	r24, 0xD6	; 214
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
	lcd_setcursor(2,1);
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
	lcd_print("COM: ");lcd_int32(baudrate[baud],_TEXT_ALLIGN_LEFT_); lcd_print(" Bd");
     502:	86 ee       	ldi	r24, 0xE6	; 230
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
     50a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	ec 50       	subi	r30, 0x0C	; 12
     51a:	fc 4f       	sbci	r31, 0xFC	; 252
     51c:	60 81       	ld	r22, Z
     51e:	71 81       	ldd	r23, Z+1	; 0x01
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	0e 94 9a 0b 	call	0x1734	; 0x1734 <lcd_int32>
     52a:	8c ee       	ldi	r24, 0xEC	; 236
     52c:	93 e0       	ldi	r25, 0x03	; 3
     52e:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
  delay_ms(4000);
     532:	80 ea       	ldi	r24, 0xA0	; 160
     534:	9f e0       	ldi	r25, 0x0F	; 15
     536:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
	lcd_clear();
     53a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <lcd_clear>
  //--------------------------
  aktueller_Datensatz = read_current_recordnumber_from_rtc();
     53e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <read_current_recordnumber_from_rtc>
     542:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <aktueller_Datensatz+0x1>
     546:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <aktueller_Datensatz>
	aktueller_Datensatz++;		// Damit die letzten Daten nicht überschrieben werden.
     54a:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <aktueller_Datensatz>
     54e:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <aktueller_Datensatz+0x1>
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <aktueller_Datensatz+0x1>
     558:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <aktueller_Datensatz>
  _SAMPLE_TIME_ = read_current_sampletime_from_rtc();
     55c:	0e 94 02 07 	call	0xe04	; 0xe04 <read_current_sampletime_from_rtc>
     560:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_SAMPLE_TIME_+0x1>
     564:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_SAMPLE_TIME_>
  if(_SAMPLE_TIME_ < 60) {_SAMPLE_TIME_ = 60; write_current_sampletime_to_rtc(_SAMPLE_TIME_);}
     568:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_SAMPLE_TIME_>
     56c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_SAMPLE_TIME_+0x1>
     570:	cc 97       	sbiw	r24, 0x3c	; 60
     572:	60 f4       	brcc	.+24     	; 0x58c <setup+0x108>
     574:	8c e3       	ldi	r24, 0x3C	; 60
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_SAMPLE_TIME_+0x1>
     57c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_SAMPLE_TIME_>
     580:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_SAMPLE_TIME_>
     584:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_SAMPLE_TIME_+0x1>
     588:	0e 94 14 07 	call	0xe28	; 0xe28 <write_current_sampletime_to_rtc>
     58c:	08 95       	ret

0000058e <lcd_print_timestamp>:
  }
}
//*******************************************************************
void lcd_print_timestamp(void)
{
	lcd_setcursor(1,1);
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
	lcd_dd(tag); lcd_char('.'); lcd_dd(monat); lcd_char('.');	lcd_dd(jahr);
     596:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <tag>
     59a:	0e 94 43 0c 	call	0x1886	; 0x1886 <lcd_dd>
     59e:	8e e2       	ldi	r24, 0x2E	; 46
     5a0:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
     5a4:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <monat>
     5a8:	0e 94 43 0c 	call	0x1886	; 0x1886 <lcd_dd>
     5ac:	8e e2       	ldi	r24, 0x2E	; 46
     5ae:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
     5b2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <jahr>
     5b6:	0e 94 43 0c 	call	0x1886	; 0x1886 <lcd_dd>
  lcd_print("   "); lcd_dd(stunde); lcd_char(':'); lcd_dd(minute);
     5ba:	80 ef       	ldi	r24, 0xF0	; 240
     5bc:	93 e0       	ldi	r25, 0x03	; 3
     5be:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
     5c2:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <stunde>
     5c6:	0e 94 43 0c 	call	0x1886	; 0x1886 <lcd_dd>
     5ca:	8a e3       	ldi	r24, 0x3A	; 58
     5cc:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
     5d0:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <minute>
     5d4:	0e 94 43 0c 	call	0x1886	; 0x1886 <lcd_dd>
     5d8:	08 95       	ret

000005da <main>:
  _SAMPLE_TIME_ = read_current_sampletime_from_rtc();
  if(_SAMPLE_TIME_ < 60) {_SAMPLE_TIME_ = 60; write_current_sampletime_to_rtc(_SAMPLE_TIME_);}
}
//*******************************************************************
int main(void)
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <main+0x6>
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t sample_sekunde;
  uint8_t n=1;
  
  setup();
     5e4:	0e 94 42 02 	call	0x484	; 0x484 <setup>
	
	serial_interrupt_enable();
     5e8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <serial_interrupt_enable>
}
//*******************************************************************
int main(void)
{
	volatile uint16_t sample_sekunde;
  uint8_t n=1;
     5ec:	ff 24       	eor	r15, r15
     5ee:	f3 94       	inc	r15

  while (1)      // Endlosschleife loop()
  { 
		temperatur = lm75_read();
		rtc_get();
		sample_sekunde = sekunde + minute * 60 + stunde * 60*60;
     5f0:	0f 2e       	mov	r0, r31
     5f2:	fc e3       	ldi	r31, 0x3C	; 60
     5f4:	ef 2e       	mov	r14, r31
     5f6:	f0 2d       	mov	r31, r0
     5f8:	00 e1       	ldi	r16, 0x10	; 16
     5fa:	1e e0       	ldi	r17, 0x0E	; 14
	
	serial_interrupt_enable();

  while (1)      // Endlosschleife loop()
  { 
		temperatur = lm75_read();
     5fc:	0e 94 49 08 	call	0x1092	; 0x1092 <lm75_read>
     600:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <temperatur+0x1>
     604:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <temperatur>
		rtc_get();
     608:	0e 94 31 06 	call	0xc62	; 0xc62 <rtc_get>
		sample_sekunde = sekunde + minute * 60 + stunde * 60*60;
     60c:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <sekunde>
     610:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <minute>
     614:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <stunde>
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	e2 9e       	mul	r14, r18
     61c:	80 0d       	add	r24, r0
     61e:	91 1d       	adc	r25, r1
     620:	11 24       	eor	r1, r1
     622:	40 9f       	mul	r20, r16
     624:	90 01       	movw	r18, r0
     626:	41 9f       	mul	r20, r17
     628:	30 0d       	add	r19, r0
     62a:	11 24       	eor	r1, r1
     62c:	82 0f       	add	r24, r18
     62e:	93 1f       	adc	r25, r19
     630:	9a 83       	std	Y+2, r25	; 0x02
     632:	89 83       	std	Y+1, r24	; 0x01
		if((sample_sekunde % _SAMPLE_TIME_) == 0)
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <_SAMPLE_TIME_>
     63c:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <_SAMPLE_TIME_+0x1>
     640:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodhi4>
     644:	89 2b       	or	r24, r25
     646:	f1 f4       	brne	.+60     	; 0x684 <main+0xaa>
		{
      if(aktueller_Datensatz >= MAX_RECORD) aktueller_Datensatz = 0; // Neubeginn der Aufzeichnung
     648:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <aktueller_Datensatz>
     64c:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <aktueller_Datensatz+0x1>
     650:	8f 3f       	cpi	r24, 0xFF	; 255
     652:	9f 40       	sbci	r25, 0x0F	; 15
     654:	20 f0       	brcs	.+8      	; 0x65e <main+0x84>
     656:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <aktueller_Datensatz+0x1>
     65a:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <aktueller_Datensatz>
      write_current_recordnumber_to_rtc(aktueller_Datensatz);
     65e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <aktueller_Datensatz>
     662:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <aktueller_Datensatz+0x1>
     666:	0e 94 f6 06 	call	0xdec	; 0xdec <write_current_recordnumber_to_rtc>
			eeprom_set_record(EEPROM_1,aktueller_Datensatz++);
     66a:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <aktueller_Datensatz>
     66e:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <aktueller_Datensatz+0x1>
     672:	cb 01       	movw	r24, r22
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <aktueller_Datensatz+0x1>
     67a:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <aktueller_Datensatz>
     67e:	80 ea       	ldi	r24, 0xA0	; 160
     680:	0e 94 b6 05 	call	0xb6c	; 0xb6c <eeprom_set_record>
		}
	  lcd_print_timestamp();
     684:	0e 94 c7 02 	call	0x58e	; 0x58e <lcd_print_timestamp>
		lcd_setcursor(2,1);
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
    lcd_int(aktueller_Datensatz); lcd_char(':');
     690:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <aktueller_Datensatz>
     694:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <aktueller_Datensatz+0x1>
     698:	0e 94 32 0b 	call	0x1664	; 0x1664 <lcd_int>
     69c:	8a e3       	ldi	r24, 0x3A	; 58
     69e:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
    lcd_setcursor(2,8);
     6a2:	68 e0       	ldi	r22, 0x08	; 8
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
		lcd_print_temperatur(temperatur);   // Ausgabe
     6aa:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <temperatur>
     6ae:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <temperatur+0x1>
     6b2:	0e 94 b0 07 	call	0xf60	; 0xf60 <lcd_print_temperatur>
    lcd_setcursor(2,16);                // Sendeanzeige
     6b6:	60 e1       	ldi	r22, 0x10	; 16
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
    if(temp_anz)
     6be:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <temp_anz>
     6c2:	88 23       	and	r24, r24
     6c4:	a1 f0       	breq	.+40     	; 0x6ee <main+0x114>
    {
      rs232_print_temperatur(temperatur,anz_mode);
     6c6:	60 91 44 05 	lds	r22, 0x0544	; 0x800544 <__data_end>
     6ca:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <temperatur>
     6ce:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <temperatur+0x1>
     6d2:	0e 94 e7 07 	call	0xfce	; 0xfce <rs232_print_temperatur>
      lcd_char(n++);
     6d6:	dd 24       	eor	r13, r13
     6d8:	d3 94       	inc	r13
     6da:	df 0c       	add	r13, r15
     6dc:	8f 2d       	mov	r24, r15
     6de:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
      if (n>4) n = 1;
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	8d 15       	cp	r24, r13
     6e6:	38 f4       	brcc	.+14     	; 0x6f6 <main+0x11c>
     6e8:	ff 24       	eor	r15, r15
     6ea:	f3 94       	inc	r15
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <main+0x11e>
    }
    else lcd_char(' ');    
     6ee:	80 e2       	ldi	r24, 0x20	; 32
     6f0:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <main+0x11e>
		lcd_print_temperatur(temperatur);   // Ausgabe
    lcd_setcursor(2,16);                // Sendeanzeige
    if(temp_anz)
    {
      rs232_print_temperatur(temperatur,anz_mode);
      lcd_char(n++);
     6f6:	fd 2c       	mov	r15, r13
      if (n>4) n = 1;
    }
    else lcd_char(' ');    
		delay_ms(1000);
     6f8:	88 ee       	ldi	r24, 0xE8	; 232
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
  }
     700:	7d cf       	rjmp	.-262    	; 0x5fc <main+0x22>

00000702 <i2c_init>:
	#ifdef _ATMEGA328_
		#ifdef _ATMEGA328PB_
		  TWSR0 &= ~((1<<TWPS0)|(1<<TWPS1));	// Prescaler = 1
		  TWBR0 = ((F_CPU / _I2C_FREQUENZ_) - 16) / 2;
		#else
		  TWSR &= ~((1<<TWPS0)|(1<<TWPS1));	// Prescaler = 1
     702:	e9 eb       	ldi	r30, 0xB9	; 185
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	8c 7f       	andi	r24, 0xFC	; 252
     70a:	80 83       	st	Z, r24
		  TWBR = ((F_CPU / _I2C_FREQUENZ_) - 16) / 2;
     70c:	80 ec       	ldi	r24, 0xC0	; 192
     70e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     712:	08 95       	ret

00000714 <i2c_start>:
			TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// Control Register
			/*wait, until start condition has been sent --> ACK*/
			while (!(TWCR0 & (1<<TWINT)));
		#else
			/*writing a one to TWINT clears it, TWSTA=Start, TWEN=TWI-enable*/
			TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// Control Register
     714:	84 ea       	ldi	r24, 0xA4	; 164
     716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			/*wait, until start condition has been sent --> ACK*/
			while (!(TWCR & (1<<TWINT)));
     71a:	ec eb       	ldi	r30, 0xBC	; 188
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	88 23       	and	r24, r24
     722:	ec f7       	brge	.-6      	; 0x71e <i2c_start+0xa>
		#endif
	#endif
}
     724:	08 95       	ret

00000726 <i2c_stop>:
  	#ifdef _ATMEGA328PB_
  	  /*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
  	  TWCR0 = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    #else
		  /*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
		  TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     726:	84 e9       	ldi	r24, 0x94	; 148
     728:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     72c:	08 95       	ret

0000072e <i2c_write>:
      if (((TWSR0 & 0xf8)== 0x18) || ((TWSR0 & 0xf8)== 0x28)) return ACK;
      if (((TWSR0 & 0xf8)== 0x20) || ((TWSR0 & 0xf8)== 0x30)) return NACK;
      return 0;	//Status Register
    #else
		  /*TWDR contains byte to send*/
		  TWDR = byte;
     72e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		  /*send content of TWDR*/
		  TWCR = (1<<TWINT) | (1<<TWEN);
     732:	84 e8       	ldi	r24, 0x84	; 132
     734:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		  /*wait, until byte has been sent --> ACK*/
		  while (!(TWCR & (1<<TWINT)));
     738:	ec eb       	ldi	r30, 0xBC	; 188
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	88 23       	and	r24, r24
     740:	ec f7       	brge	.-6      	; 0x73c <i2c_write+0xe>
		  // Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
		  if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
     742:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     746:	88 7f       	andi	r24, 0xF8	; 248
     748:	88 31       	cpi	r24, 0x18	; 24
     74a:	91 f0       	breq	.+36     	; 0x770 <i2c_write+0x42>
     74c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     750:	88 7f       	andi	r24, 0xF8	; 248
     752:	88 32       	cpi	r24, 0x28	; 40
     754:	79 f0       	breq	.+30     	; 0x774 <i2c_write+0x46>
		  if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
     756:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     75a:	88 7f       	andi	r24, 0xF8	; 248
     75c:	80 32       	cpi	r24, 0x20	; 32
     75e:	61 f0       	breq	.+24     	; 0x778 <i2c_write+0x4a>
     760:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
		  /*send content of TWDR*/
		  TWCR = (1<<TWINT) | (1<<TWEN);
		  /*wait, until byte has been sent --> ACK*/
		  while (!(TWCR & (1<<TWINT)));
		  // Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
		  if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
     764:	98 7f       	andi	r25, 0xF8	; 248
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 33       	cpi	r25, 0x30	; 48
     76a:	39 f0       	breq	.+14     	; 0x77a <i2c_write+0x4c>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 95       	ret
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	08 95       	ret
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret
		  if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
     778:	81 e0       	ldi	r24, 0x01	; 1
		  return 0;	//Status Register
    #endif
	#endif
}
     77a:	08 95       	ret

0000077c <i2c_read>:
  	
  	  /*wait, until byte has been received --> ACK*/
  	  while (!(TWCR0 & (1<<TWINT)));
  	  return TWDR0;
    #else
		  if (ack == ACK)
     77c:	81 11       	cpse	r24, r1
     77e:	04 c0       	rjmp	.+8      	; 0x788 <i2c_read+0xc>
			  /*send content of TWDR; TWEA = enable ACK*/
			  TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     780:	84 ec       	ldi	r24, 0xC4	; 196
     782:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     786:	03 c0       	rjmp	.+6      	; 0x78e <i2c_read+0x12>
		  else 
			  /*send content of TWDR; NACK*/
			  TWCR = (1<<TWINT) | (1<<TWEN);
     788:	84 e8       	ldi	r24, 0x84	; 132
     78a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			
		  /*wait, until byte has been received --> ACK*/
		  while (!(TWCR & (1<<TWINT)));
     78e:	ec eb       	ldi	r30, 0xBC	; 188
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	88 23       	and	r24, r24
     796:	ec f7       	brge	.-6      	; 0x792 <i2c_read+0x16>
		  return TWDR;
     798:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    #endif
	#endif
}
     79c:	08 95       	ret

0000079e <rs232_baud>:
    #endif
    #ifdef _ATMEGA328_     
     //while((UCSR0A & (1<<TXC0))==0);  // Vor Neuinitialisierung warten, bis Empfang beendet
     //while((UCSR0A & (1<<RXC0))==0);  // Vor Neuinitialisierung warten, bis Senden beendet
     
     UBRR0H = (uint8_t)( UART_UBRR_CALC( baud, F_CPU ) >> 8 );
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	aa 1f       	adc	r26, r26
     7a8:	bb 1f       	adc	r27, r27
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	aa 1f       	adc	r26, r26
     7b0:	bb 1f       	adc	r27, r27
     7b2:	9c 01       	movw	r18, r24
     7b4:	ad 01       	movw	r20, r26
     7b6:	22 0f       	add	r18, r18
     7b8:	33 1f       	adc	r19, r19
     7ba:	44 1f       	adc	r20, r20
     7bc:	55 1f       	adc	r21, r21
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	44 1f       	adc	r20, r20
     7c4:	55 1f       	adc	r21, r21
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	74 e2       	ldi	r23, 0x24	; 36
     7ca:	84 ef       	ldi	r24, 0xF4	; 244
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__udivmodsi4>
     7d2:	da 01       	movw	r26, r20
     7d4:	c9 01       	movw	r24, r18
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	a1 09       	sbc	r26, r1
     7da:	b1 09       	sbc	r27, r1
     7dc:	89 2f       	mov	r24, r25
     7de:	9a 2f       	mov	r25, r26
     7e0:	ab 2f       	mov	r26, r27
     7e2:	bb 27       	eor	r27, r27
     7e4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     UBRR0L = (uint8_t)  UART_UBRR_CALC( baud, F_CPU );
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
               
     UCSR0B |= (1<<TXEN0) | (1<<RXEN0);    // UART TX und RX einschalten
     7ee:	e1 ec       	ldi	r30, 0xC1	; 193
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	80 81       	ld	r24, Z
     7f4:	88 61       	ori	r24, 0x18	; 24
     7f6:	80 83       	st	Z, r24
     UCSR0C |= (1<<USBS0) | (3<<UCSZ00);   // Asynchron 8N1
     7f8:	e2 ec       	ldi	r30, 0xC2	; 194
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	8e 60       	ori	r24, 0x0E	; 14
     800:	80 83       	st	Z, r24
     802:	08 95       	ret

00000804 <rs232_init>:
// RS232-Routinen zur Kommunikation mit PC-Terminal
//
// ****************************************************************************
void rs232_init(void)
{ 
  rs232_baud(BAUD);
     804:	60 e8       	ldi	r22, 0x80	; 128
     806:	75 e2       	ldi	r23, 0x25	; 37
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 cf 03 	call	0x79e	; 0x79e <rs232_baud>
     810:	08 95       	ret

00000812 <rs232_get>:
  #ifdef _ATMEGA8_
   if (!(UCSRA & (1<<RXC))) return ('\0');    // Wenn kein Zeichen im Puffer, dann 0 zurÃ¼ckgeben!
   return UDR;                                // Zeichen zurÃ¼ckliefern
  #endif
  #ifdef _ATMEGA328_
   if (!(UCSR0A & (1<<RXC0))) return ('\0');    // Wenn kein Zeichen im Puffer, dann 0 zurÃ¼ckgeben!
     812:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     816:	88 23       	and	r24, r24
     818:	1c f4       	brge	.+6      	; 0x820 <rs232_get+0xe>
   return UDR0;                                // Zeichen zurÃ¼ckliefern
     81a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     81e:	08 95       	ret
  #ifdef _ATMEGA8_
   if (!(UCSRA & (1<<RXC))) return ('\0');    // Wenn kein Zeichen im Puffer, dann 0 zurÃ¼ckgeben!
   return UDR;                                // Zeichen zurÃ¼ckliefern
  #endif
  #ifdef _ATMEGA328_
   if (!(UCSR0A & (1<<RXC0))) return ('\0');    // Wenn kein Zeichen im Puffer, dann 0 zurÃ¼ckgeben!
     820:	80 e0       	ldi	r24, 0x00	; 0
   return UDR0;                                // Zeichen zurÃ¼ckliefern
  #endif
}
     822:	08 95       	ret

00000824 <rs232_put>:
  #ifdef _ATMEGA8_
   while (!(UCSRA & (1<<UDRE)));              // Warten bis Sendebereit!
   UDR = value;
  #endif
  #ifdef _ATMEGA328_
   while (!(UCSR0A & (1<<UDRE0)));              // Warten bis Sendebereit!
     824:	e0 ec       	ldi	r30, 0xC0	; 192
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	90 81       	ld	r25, Z
     82a:	95 ff       	sbrs	r25, 5
     82c:	fd cf       	rjmp	.-6      	; 0x828 <rs232_put+0x4>
   //while ((UCSR0A & (1<<TXC0)));              // Warten bis Sendebereit!   
   UDR0 = value;
     82e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     832:	08 95       	ret

00000834 <rs232_print>:
  #endif
}

void rs232_print ( uint8_t *text )
{
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ec 01       	movw	r28, r24
  while (*text != '\0')
     83a:	88 81       	ld	r24, Y
     83c:	88 23       	and	r24, r24
     83e:	31 f0       	breq	.+12     	; 0x84c <rs232_print+0x18>
     840:	21 96       	adiw	r28, 0x01	; 1
  rs232_put(*text++);
     842:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
  #endif
}

void rs232_print ( uint8_t *text )
{
  while (*text != '\0')
     846:	89 91       	ld	r24, Y+
     848:	81 11       	cpse	r24, r1
     84a:	fb cf       	rjmp	.-10     	; 0x842 <rs232_print+0xe>
  rs232_put(*text++);
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <rs232_inputdd>:

// RS232-Erweiterungen sind nicht Teil der Technischen Richtlinie FA205!!
// Erzeugt ein Eingabeprompt am Terminal 00 .. 99
uint8_t rs232_inputdd(void )
{
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
  uint8_t buf1,buf2;
  do
  {
    while((buf1 = rs232_get()) == 0);
     856:	0e 94 09 04 	call	0x812	; 0x812 <rs232_get>
     85a:	88 23       	and	r24, r24
     85c:	e1 f3       	breq	.-8      	; 0x856 <rs232_inputdd+0x4>
  } while ((buf1 < '0') || (buf1 > '9'));
     85e:	c0 ed       	ldi	r28, 0xD0	; 208
     860:	c8 0f       	add	r28, r24
     862:	ca 30       	cpi	r28, 0x0A	; 10
     864:	c0 f7       	brcc	.-16     	; 0x856 <rs232_inputdd+0x4>

  rs232_put(buf1);    // Echo
     866:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>

  do
  {
    while((buf2 = rs232_get()) == 0);
     86a:	0e 94 09 04 	call	0x812	; 0x812 <rs232_get>
     86e:	88 23       	and	r24, r24
     870:	e1 f3       	breq	.-8      	; 0x86a <rs232_inputdd+0x18>
  } while ((buf2 < '0') || (buf2 > '9'));
     872:	d0 ed       	ldi	r29, 0xD0	; 208
     874:	d8 0f       	add	r29, r24
     876:	da 30       	cpi	r29, 0x0A	; 10
     878:	c0 f7       	brcc	.-16     	; 0x86a <rs232_inputdd+0x18>

  rs232_put(buf2);    // Echo
     87a:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>

  buf1 -= '0';
  buf2 -= '0';

  return (buf1*10 + buf2);
     87e:	cc 0f       	add	r28, r28
     880:	8c 2f       	mov	r24, r28
     882:	88 0f       	add	r24, r24
     884:	88 0f       	add	r24, r24
     886:	8c 0f       	add	r24, r28
}
     888:	8d 0f       	add	r24, r29
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <rs232_printdd>:

// Ausgabe einer Dezimalzahl 00..99 auf RS232
void rs232_printdd(uint8_t value)
{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	d8 2f       	mov	r29, r24
  uint8_t buf;

  buf = value / 10;
  rs232_put(buf+'0');      // 10er-Stelle anzeigen
     896:	cd ec       	ldi	r28, 0xCD	; 205
     898:	8c 9f       	mul	r24, r28
     89a:	c1 2d       	mov	r28, r1
     89c:	11 24       	eor	r1, r1
     89e:	c6 95       	lsr	r28
     8a0:	c6 95       	lsr	r28
     8a2:	c6 95       	lsr	r28
     8a4:	80 e3       	ldi	r24, 0x30	; 48
     8a6:	8c 0f       	add	r24, r28
     8a8:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
  buf = value % 10;
  rs232_put(buf+'0');      // 1er-Stelle anzeigen
     8ac:	cc 0f       	add	r28, r28
     8ae:	8c 2f       	mov	r24, r28
     8b0:	88 0f       	add	r24, r24
     8b2:	88 0f       	add	r24, r24
     8b4:	c8 0f       	add	r28, r24
     8b6:	8d 2f       	mov	r24, r29
     8b8:	8c 1b       	sub	r24, r28
     8ba:	80 5d       	subi	r24, 0xD0	; 208
     8bc:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <rs232_int>:

void rs232_int(uint16_t val)
{
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <rs232_int+0xa>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <rs232_int+0xc>
     8d2:	1f 92       	push	r1
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	fc 01       	movw	r30, r24
  uint8_t buffer[5];
  uint8_t n = 0;
     8da:	80 e0       	ldi	r24, 0x00	; 0
  
  do
  {
    buffer[n++] = val%10 + '0';
     8dc:	41 e0       	ldi	r20, 0x01	; 1
     8de:	48 0f       	add	r20, r24
     8e0:	01 e0       	ldi	r16, 0x01	; 1
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	0c 0f       	add	r16, r28
     8e6:	1d 1f       	adc	r17, r29
     8e8:	08 0f       	add	r16, r24
     8ea:	11 1d       	adc	r17, r1
     8ec:	9f 01       	movw	r18, r30
     8ee:	ad ec       	ldi	r26, 0xCD	; 205
     8f0:	bc ec       	ldi	r27, 0xCC	; 204
     8f2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__umulhisi3>
     8f6:	96 95       	lsr	r25
     8f8:	87 95       	ror	r24
     8fa:	96 95       	lsr	r25
     8fc:	87 95       	ror	r24
     8fe:	96 95       	lsr	r25
     900:	87 95       	ror	r24
     902:	9c 01       	movw	r18, r24
     904:	22 0f       	add	r18, r18
     906:	33 1f       	adc	r19, r19
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	9f 01       	movw	r18, r30
     91a:	28 1b       	sub	r18, r24
     91c:	39 0b       	sbc	r19, r25
     91e:	c9 01       	movw	r24, r18
     920:	80 5d       	subi	r24, 0xD0	; 208
     922:	d8 01       	movw	r26, r16
     924:	8c 93       	st	X, r24
  } while ((val /= 10) > 0);
     926:	9f 01       	movw	r18, r30
     928:	ad ec       	ldi	r26, 0xCD	; 205
     92a:	bc ec       	ldi	r27, 0xCC	; 204
     92c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__umulhisi3>
     930:	fc 01       	movw	r30, r24
     932:	f6 95       	lsr	r31
     934:	e7 95       	ror	r30
     936:	f6 95       	lsr	r31
     938:	e7 95       	ror	r30
     93a:	f6 95       	lsr	r31
     93c:	e7 95       	ror	r30
  uint8_t buffer[5];
  uint8_t n = 0;
  
  do
  {
    buffer[n++] = val%10 + '0';
     93e:	84 2f       	mov	r24, r20
  } while ((val /= 10) > 0);
     940:	30 97       	sbiw	r30, 0x00	; 0
     942:	61 f6       	brne	.-104    	; 0x8dc <rs232_int+0x16>
  
  while (n<5)                   // Rest von buffer mit blank fÃ¼llen
     944:	45 30       	cpi	r20, 0x05	; 5
     946:	70 f4       	brcc	.+28     	; 0x964 <__stack+0x65>
  {
    buffer[n++] = ' ';
     948:	80 e2       	ldi	r24, 0x20	; 32
     94a:	11 e0       	ldi	r17, 0x01	; 1
     94c:	14 0f       	add	r17, r20
     94e:	e1 e0       	ldi	r30, 0x01	; 1
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	ec 0f       	add	r30, r28
     954:	fd 1f       	adc	r31, r29
     956:	e4 0f       	add	r30, r20
     958:	f1 1d       	adc	r31, r1
     95a:	80 83       	st	Z, r24
     95c:	41 2f       	mov	r20, r17
  do
  {
    buffer[n++] = val%10 + '0';
  } while ((val /= 10) > 0);
  
  while (n<5)                   // Rest von buffer mit blank fÃ¼llen
     95e:	15 30       	cpi	r17, 0x05	; 5
     960:	a1 f7       	brne	.-24     	; 0x94a <__stack+0x4b>
     962:	03 c0       	rjmp	.+6      	; 0x96a <__stack+0x6b>
  {
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
     964:	44 23       	and	r20, r20
     966:	69 f0       	breq	.+26     	; 0x982 <__stack+0x83>
  uint8_t buffer[5];
  uint8_t n = 0;
  
  do
  {
    buffer[n++] = val%10 + '0';
     968:	14 2f       	mov	r17, r20
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
  {
    n--;
     96a:	11 50       	subi	r17, 0x01	; 1
    rs232_put(buffer[n]);
     96c:	e1 e0       	ldi	r30, 0x01	; 1
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	ec 0f       	add	r30, r28
     972:	fd 1f       	adc	r31, r29
     974:	e1 0f       	add	r30, r17
     976:	f1 1d       	adc	r31, r1
     978:	80 81       	ld	r24, Z
     97a:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
  while (n<5)                   // Rest von buffer mit blank fÃ¼llen
  {
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
     97e:	11 11       	cpse	r17, r1
     980:	f4 cf       	rjmp	.-24     	; 0x96a <__stack+0x6b>
  {
    n--;
    rs232_put(buffer[n]);
  }
}
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <rs232_int32>:

void rs232_int32(uint32_t val, uint8_t allign)
{
     996:	8f 92       	push	r8
     998:	9f 92       	push	r9
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	28 97       	sbiw	r28, 0x08	; 8
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	d4 2e       	mov	r13, r20
  uint8_t buffer[8];
  uint8_t n = 0;
  
  if(val>99999999L)
     9be:	61 15       	cp	r22, r1
     9c0:	21 ee       	ldi	r18, 0xE1	; 225
     9c2:	72 07       	cpc	r23, r18
     9c4:	25 ef       	ldi	r18, 0xF5	; 245
     9c6:	82 07       	cpc	r24, r18
     9c8:	25 e0       	ldi	r18, 0x05	; 5
     9ca:	92 07       	cpc	r25, r18
     9cc:	28 f0       	brcs	.+10     	; 0x9d8 <rs232_int32+0x42>
  {
    lcd_print("err: Wert>99.999.999");  // Fehler
     9ce:	8c e1       	ldi	r24, 0x1C	; 28
     9d0:	94 e0       	ldi	r25, 0x04	; 4
     9d2:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
     9d6:	52 c0       	rjmp	.+164    	; 0xa7c <rs232_int32+0xe6>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
    return;
  }
    
  do
  {
    buffer[n++] = val%10 + '0';
     9da:	0f 2e       	mov	r0, r31
     9dc:	fa e0       	ldi	r31, 0x0A	; 10
     9de:	8f 2e       	mov	r8, r31
     9e0:	91 2c       	mov	r9, r1
     9e2:	a1 2c       	mov	r10, r1
     9e4:	b1 2c       	mov	r11, r1
     9e6:	f0 2d       	mov	r31, r0
     9e8:	11 e0       	ldi	r17, 0x01	; 1
     9ea:	12 0f       	add	r17, r18
     9ec:	ee 24       	eor	r14, r14
     9ee:	e3 94       	inc	r14
     9f0:	f1 2c       	mov	r15, r1
     9f2:	ec 0e       	add	r14, r28
     9f4:	fd 1e       	adc	r15, r29
     9f6:	e2 0e       	add	r14, r18
     9f8:	f1 1c       	adc	r15, r1
     9fa:	a5 01       	movw	r20, r10
     9fc:	94 01       	movw	r18, r8
     9fe:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__udivmodsi4>
     a02:	60 5d       	subi	r22, 0xD0	; 208
     a04:	f7 01       	movw	r30, r14
     a06:	60 83       	st	Z, r22
  } while ((val /= 10) > 0);
     a08:	62 2f       	mov	r22, r18
     a0a:	73 2f       	mov	r23, r19
     a0c:	84 2f       	mov	r24, r20
     a0e:	95 2f       	mov	r25, r21
    return;
  }
    
  do
  {
    buffer[n++] = val%10 + '0';
     a10:	21 2f       	mov	r18, r17
  } while ((val /= 10) > 0);
     a12:	61 15       	cp	r22, r1
     a14:	71 05       	cpc	r23, r1
     a16:	81 05       	cpc	r24, r1
     a18:	91 05       	cpc	r25, r1
     a1a:	31 f7       	brne	.-52     	; 0x9e8 <rs232_int32+0x52>
  
  while (n<8)                   // Rest von buffer mit blank fÃ¼llen
     a1c:	18 30       	cpi	r17, 0x08	; 8
     a1e:	70 f4       	brcc	.+28     	; 0xa3c <rs232_int32+0xa6>
  {
    buffer[n++] = ' ';
     a20:	80 e2       	ldi	r24, 0x20	; 32
     a22:	01 e0       	ldi	r16, 0x01	; 1
     a24:	01 0f       	add	r16, r17
     a26:	e1 e0       	ldi	r30, 0x01	; 1
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	ec 0f       	add	r30, r28
     a2c:	fd 1f       	adc	r31, r29
     a2e:	e1 0f       	add	r30, r17
     a30:	f1 1d       	adc	r31, r1
     a32:	80 83       	st	Z, r24
     a34:	10 2f       	mov	r17, r16
  do
  {
    buffer[n++] = val%10 + '0';
  } while ((val /= 10) > 0);
  
  while (n<8)                   // Rest von buffer mit blank fÃ¼llen
     a36:	08 30       	cpi	r16, 0x08	; 8
     a38:	a1 f7       	brne	.-24     	; 0xa22 <rs232_int32+0x8c>
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <rs232_int32+0xac>
  {
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
     a3c:	11 23       	and	r17, r17
     a3e:	f1 f0       	breq	.+60     	; 0xa7c <rs232_int32+0xe6>
    return;
  }
    
  do
  {
    buffer[n++] = val%10 + '0';
     a40:	01 2f       	mov	r16, r17
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
  {
    n--;
     a42:	01 50       	subi	r16, 0x01	; 1
    if (allign==_TEXT_ALLIGN_LEFT_ && buffer[n] != ' ')
     a44:	f1 e0       	ldi	r31, 0x01	; 1
     a46:	df 12       	cpse	r13, r31
     a48:	0c c0       	rjmp	.+24     	; 0xa62 <rs232_int32+0xcc>
     a4a:	e1 e0       	ldi	r30, 0x01	; 1
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	ec 0f       	add	r30, r28
     a50:	fd 1f       	adc	r31, r29
     a52:	e0 0f       	add	r30, r16
     a54:	f1 1d       	adc	r31, r1
     a56:	80 81       	ld	r24, Z
     a58:	80 32       	cpi	r24, 0x20	; 32
     a5a:	71 f0       	breq	.+28     	; 0xa78 <rs232_int32+0xe2>
       rs232_put(buffer[n]);
     a5c:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     a60:	0b c0       	rjmp	.+22     	; 0xa78 <rs232_int32+0xe2>
    else if (allign==_TEXT_ALLIGN_RIGHT_)
     a62:	d1 10       	cpse	r13, r1
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <rs232_int32+0xe2>
       rs232_put(buffer[n]);
     a66:	e1 e0       	ldi	r30, 0x01	; 1
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	ec 0f       	add	r30, r28
     a6c:	fd 1f       	adc	r31, r29
     a6e:	e0 0f       	add	r30, r16
     a70:	f1 1d       	adc	r31, r1
     a72:	80 81       	ld	r24, Z
     a74:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
  while (n<8)                   // Rest von buffer mit blank fÃ¼llen
  {
    buffer[n++] = ' ';
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
     a78:	01 11       	cpse	r16, r1
     a7a:	e3 cf       	rjmp	.-58     	; 0xa42 <rs232_int32+0xac>
    if (allign==_TEXT_ALLIGN_LEFT_ && buffer[n] != ' ')
       rs232_put(buffer[n]);
    else if (allign==_TEXT_ALLIGN_RIGHT_)
       rs232_put(buffer[n]);
  }
}
     a7c:	28 96       	adiw	r28, 0x08	; 8
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
     a9e:	08 95       	ret

00000aa0 <eeprom_get_record>:
	lcd_print("EEPROM #1 test");
	test = eeprom_memtest(EEPROM_1);
  if (test == -1) 
  {
    lcd_setcursor(1,1);
    lcd_print("!Speicherfehler!");
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	00 d0       	rcall	.+0      	; 0xaac <eeprom_get_record+0xc>
     aac:	00 d0       	rcall	.+0      	; 0xaae <eeprom_get_record+0xe>
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	f8 2e       	mov	r15, r24
     ab4:	8b 01       	movw	r16, r22
     ab6:	00 0f       	add	r16, r16
     ab8:	11 1f       	adc	r17, r17
     aba:	00 0f       	add	r16, r16
     abc:	11 1f       	adc	r17, r17
     abe:	00 0f       	add	r16, r16
     ac0:	11 1f       	adc	r17, r17
     ac2:	b8 01       	movw	r22, r16
     ac4:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
     ac8:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <jahr>
     acc:	b8 01       	movw	r22, r16
     ace:	6f 5f       	subi	r22, 0xFF	; 255
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	8f 2d       	mov	r24, r15
     ad4:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
     ad8:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <monat>
     adc:	b8 01       	movw	r22, r16
     ade:	6e 5f       	subi	r22, 0xFE	; 254
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	8f 2d       	mov	r24, r15
     ae4:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
     ae8:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <tag>
     aec:	b8 01       	movw	r22, r16
     aee:	6d 5f       	subi	r22, 0xFD	; 253
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	8f 2d       	mov	r24, r15
     af4:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
     af8:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <stunde>
     afc:	b8 01       	movw	r22, r16
     afe:	6c 5f       	subi	r22, 0xFC	; 252
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	8f 2d       	mov	r24, r15
     b04:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
     b08:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <minute>
     b0c:	b8 01       	movw	r22, r16
     b0e:	6b 5f       	subi	r22, 0xFB	; 251
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	8f 2d       	mov	r24, r15
     b14:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
     b18:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <sekunde>
     b1c:	b8 01       	movw	r22, r16
     b1e:	6a 5f       	subi	r22, 0xFA	; 250
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	8f 2d       	mov	r24, r15
     b24:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	b8 01       	movw	r22, r16
     b30:	69 5f       	subi	r22, 0xF9	; 249
     b32:	7f 4f       	sbci	r23, 0xFF	; 255
     b34:	8f 2d       	mov	r24, r15
     b36:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	9c 83       	std	Y+4, r25	; 0x04
     b3e:	8b 83       	std	Y+3, r24	; 0x03
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	2b 81       	ldd	r18, Y+3	; 0x03
     b46:	3c 81       	ldd	r19, Y+4	; 0x04
     b48:	98 2f       	mov	r25, r24
     b4a:	88 27       	eor	r24, r24
     b4c:	82 2b       	or	r24, r18
     b4e:	93 2b       	or	r25, r19
     b50:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <temperatur+0x1>
     b54:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <temperatur>
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	08 95       	ret

00000b6c <eeprom_set_record>:
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	1f 92       	push	r1
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	f8 2e       	mov	r15, r24
     b7e:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <jahr>
     b82:	8b 01       	movw	r16, r22
     b84:	00 0f       	add	r16, r16
     b86:	11 1f       	adc	r17, r17
     b88:	00 0f       	add	r16, r16
     b8a:	11 1f       	adc	r17, r17
     b8c:	00 0f       	add	r16, r16
     b8e:	11 1f       	adc	r17, r17
     b90:	b8 01       	movw	r22, r16
     b92:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
     b96:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <monat>
     b9a:	b8 01       	movw	r22, r16
     b9c:	6f 5f       	subi	r22, 0xFF	; 255
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	8f 2d       	mov	r24, r15
     ba2:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
     ba6:	40 91 4f 05 	lds	r20, 0x054F	; 0x80054f <tag>
     baa:	b8 01       	movw	r22, r16
     bac:	6e 5f       	subi	r22, 0xFE	; 254
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	8f 2d       	mov	r24, r15
     bb2:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
     bb6:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <stunde>
     bba:	b8 01       	movw	r22, r16
     bbc:	6d 5f       	subi	r22, 0xFD	; 253
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	8f 2d       	mov	r24, r15
     bc2:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
     bc6:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <minute>
     bca:	b8 01       	movw	r22, r16
     bcc:	6c 5f       	subi	r22, 0xFC	; 252
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	8f 2d       	mov	r24, r15
     bd2:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
     bd6:	40 91 56 05 	lds	r20, 0x0556	; 0x800556 <sekunde>
     bda:	b8 01       	movw	r22, r16
     bdc:	6b 5f       	subi	r22, 0xFB	; 251
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	8f 2d       	mov	r24, r15
     be2:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
     be6:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <temperatur>
     bea:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <temperatur+0x1>
     bee:	99 83       	std	Y+1, r25	; 0x01
     bf0:	49 81       	ldd	r20, Y+1	; 0x01
     bf2:	b8 01       	movw	r22, r16
     bf4:	6a 5f       	subi	r22, 0xFA	; 250
     bf6:	7f 4f       	sbci	r23, 0xFF	; 255
     bf8:	8f 2d       	mov	r24, r15
     bfa:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
     bfe:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <temperatur>
     c02:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <temperatur+0x1>
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	49 81       	ldd	r20, Y+1	; 0x01
     c0a:	b8 01       	movw	r22, r16
     c0c:	69 5f       	subi	r22, 0xF9	; 249
     c0e:	7f 4f       	sbci	r23, 0xFF	; 255
     c10:	8f 2d       	mov	r24, r15
     c12:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
     c16:	0f 90       	pop	r0
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	08 95       	ret

00000c24 <rtc_set>:
     c24:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <jahr>
     c28:	86 e0       	ldi	r24, 0x06	; 6
     c2a:	0e 94 b5 0c 	call	0x196a	; 0x196a <rtc_write>
     c2e:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <monat>
     c32:	85 e0       	ldi	r24, 0x05	; 5
     c34:	0e 94 b5 0c 	call	0x196a	; 0x196a <rtc_write>
     c38:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <tag>
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	0e 94 b5 0c 	call	0x196a	; 0x196a <rtc_write>
     c42:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <stunde>
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	0e 94 b5 0c 	call	0x196a	; 0x196a <rtc_write>
     c4c:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <minute>
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 b5 0c 	call	0x196a	; 0x196a <rtc_write>
     c56:	60 91 56 05 	lds	r22, 0x0556	; 0x800556 <sekunde>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0e 94 b5 0c 	call	0x196a	; 0x196a <rtc_write>
     c60:	08 95       	ret

00000c62 <rtc_get>:
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	0e 94 86 0c 	call	0x190c	; 0x190c <rtc_read>
     c68:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <jahr>
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	0e 94 86 0c 	call	0x190c	; 0x190c <rtc_read>
     c72:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <monat>
     c76:	84 e0       	ldi	r24, 0x04	; 4
     c78:	0e 94 86 0c 	call	0x190c	; 0x190c <rtc_read>
     c7c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <tag>
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	0e 94 86 0c 	call	0x190c	; 0x190c <rtc_read>
     c86:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <stunde>
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0e 94 86 0c 	call	0x190c	; 0x190c <rtc_read>
     c90:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <minute>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	0e 94 86 0c 	call	0x190c	; 0x190c <rtc_read>
     c9a:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <sekunde>
     c9e:	08 95       	ret

00000ca0 <rs232_print_time>:
     ca0:	0e 94 31 06 	call	0xc62	; 0xc62 <rtc_get>
     ca4:	81 e3       	ldi	r24, 0x31	; 49
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     cac:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <tag>
     cb0:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     cb4:	8e e2       	ldi	r24, 0x2E	; 46
     cb6:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     cba:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <monat>
     cbe:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     cc2:	8e e2       	ldi	r24, 0x2E	; 46
     cc4:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     cc8:	84 e1       	ldi	r24, 0x14	; 20
     cca:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     cce:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <jahr>
     cd2:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     cd6:	80 e2       	ldi	r24, 0x20	; 32
     cd8:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     cdc:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <stunde>
     ce0:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     ce4:	8a e3       	ldi	r24, 0x3A	; 58
     ce6:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     cea:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <minute>
     cee:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     cf2:	8a e3       	ldi	r24, 0x3A	; 58
     cf4:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     cf8:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <sekunde>
     cfc:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     d00:	8f e8       	ldi	r24, 0x8F	; 143
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d08:	08 95       	ret

00000d0a <rs232_set_time>:
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	0e 94 50 06 	call	0xca0	; 0xca0 <rs232_print_time>
     d12:	83 e4       	ldi	r24, 0x43	; 67
     d14:	94 e0       	ldi	r25, 0x04	; 4
     d16:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d1a:	c5 e3       	ldi	r28, 0x35	; 53
     d1c:	8c 2f       	mov	r24, r28
     d1e:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     d22:	89 e5       	ldi	r24, 0x59	; 89
     d24:	94 e0       	ldi	r25, 0x04	; 4
     d26:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d2a:	88 ee       	ldi	r24, 0xE8	; 232
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
     d32:	0e 94 09 04 	call	0x812	; 0x812 <rs232_get>
     d36:	d8 2f       	mov	r29, r24
     d38:	81 11       	cpse	r24, r1
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <rs232_set_time+0x3a>
     d3c:	c1 50       	subi	r28, 0x01	; 1
     d3e:	cf 32       	cpi	r28, 0x2F	; 47
     d40:	69 f7       	brne	.-38     	; 0xd1c <rs232_set_time+0x12>
     d42:	3c c0       	rjmp	.+120    	; 0xdbc <rs232_set_time+0xb2>
     d44:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     d48:	df 7d       	andi	r29, 0xDF	; 223
     d4a:	da 34       	cpi	r29, 0x4A	; 74
     d4c:	d1 f5       	brne	.+116    	; 0xdc2 <rs232_set_time+0xb8>
     d4e:	8b e5       	ldi	r24, 0x5B	; 91
     d50:	94 e0       	ldi	r25, 0x04	; 4
     d52:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d56:	89 e7       	ldi	r24, 0x79	; 121
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d5e:	0e 94 29 04 	call	0x852	; 0x852 <rs232_inputdd>
     d62:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <tag>
     d66:	8e e8       	ldi	r24, 0x8E	; 142
     d68:	94 e0       	ldi	r25, 0x04	; 4
     d6a:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d6e:	0e 94 29 04 	call	0x852	; 0x852 <rs232_inputdd>
     d72:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <monat>
     d76:	83 ea       	ldi	r24, 0xA3	; 163
     d78:	94 e0       	ldi	r25, 0x04	; 4
     d7a:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d7e:	0e 94 29 04 	call	0x852	; 0x852 <rs232_inputdd>
     d82:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <jahr>
     d86:	88 eb       	ldi	r24, 0xB8	; 184
     d88:	94 e0       	ldi	r25, 0x04	; 4
     d8a:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d8e:	8c ec       	ldi	r24, 0xCC	; 204
     d90:	94 e0       	ldi	r25, 0x04	; 4
     d92:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     d96:	0e 94 29 04 	call	0x852	; 0x852 <rs232_inputdd>
     d9a:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <stunde>
     d9e:	81 ee       	ldi	r24, 0xE1	; 225
     da0:	94 e0       	ldi	r25, 0x04	; 4
     da2:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     da6:	0e 94 29 04 	call	0x852	; 0x852 <rs232_inputdd>
     daa:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <minute>
     dae:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <sekunde>
     db2:	0e 94 12 06 	call	0xc24	; 0xc24 <rtc_set>
     db6:	0e 94 50 06 	call	0xca0	; 0xca0 <rs232_print_time>
     dba:	03 c0       	rjmp	.+6      	; 0xdc2 <rs232_set_time+0xb8>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <read_current_recordnumber_from_rtc>:
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	88 e0       	ldi	r24, 0x08	; 8
     dce:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <rtc_lowlevel_read>
     dd2:	c8 2f       	mov	r28, r24
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
     dd6:	dc 2f       	mov	r29, r28
     dd8:	cc 27       	eor	r28, r28
     dda:	89 e0       	ldi	r24, 0x09	; 9
     ddc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <rtc_lowlevel_read>
     de0:	9e 01       	movw	r18, r28
     de2:	28 2b       	or	r18, r24
     de4:	c9 01       	movw	r24, r18
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <write_current_recordnumber_to_rtc>:
     dec:	cf 93       	push	r28
     dee:	c8 2f       	mov	r28, r24
     df0:	69 2f       	mov	r22, r25
     df2:	88 e0       	ldi	r24, 0x08	; 8
     df4:	0e 94 96 0c 	call	0x192c	; 0x192c <rtc_lowlevel_write>
     df8:	6c 2f       	mov	r22, r28
     dfa:	89 e0       	ldi	r24, 0x09	; 9
     dfc:	0e 94 96 0c 	call	0x192c	; 0x192c <rtc_lowlevel_write>
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <read_current_sampletime_from_rtc>:
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	8a e0       	ldi	r24, 0x0A	; 10
     e0a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <rtc_lowlevel_read>
     e0e:	c8 2f       	mov	r28, r24
     e10:	d0 e0       	ldi	r29, 0x00	; 0
     e12:	dc 2f       	mov	r29, r28
     e14:	cc 27       	eor	r28, r28
     e16:	8b e0       	ldi	r24, 0x0B	; 11
     e18:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <rtc_lowlevel_read>
     e1c:	9e 01       	movw	r18, r28
     e1e:	28 2b       	or	r18, r24
     e20:	c9 01       	movw	r24, r18
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <write_current_sampletime_to_rtc>:
     e28:	cf 93       	push	r28
     e2a:	c8 2f       	mov	r28, r24
     e2c:	69 2f       	mov	r22, r25
     e2e:	8a e0       	ldi	r24, 0x0A	; 10
     e30:	0e 94 96 0c 	call	0x192c	; 0x192c <rtc_lowlevel_write>
     e34:	6c 2f       	mov	r22, r28
     e36:	8b e0       	ldi	r24, 0x0B	; 11
     e38:	0e 94 96 0c 	call	0x192c	; 0x192c <rtc_lowlevel_write>
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <serial_print_all_records>:
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	00 d0       	rcall	.+0      	; 0xe54 <serial_print_all_records+0x14>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <serial_print_all_records+0x16>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <serial_print_all_records+0x18>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	84 e1       	ldi	r24, 0x14	; 20
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
     e64:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <aktueller_Datensatz>
     e68:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <aktueller_Datensatz+0x1>
     e6c:	89 2b       	or	r24, r25
     e6e:	09 f4       	brne	.+2      	; 0xe72 <serial_print_all_records+0x32>
     e70:	67 c0       	rjmp	.+206    	; 0xf40 <serial_print_all_records+0x100>
     e72:	00 e0       	ldi	r16, 0x00	; 0
     e74:	10 e0       	ldi	r17, 0x00	; 0
     e76:	0f 2e       	mov	r0, r31
     e78:	f5 e0       	ldi	r31, 0x05	; 5
     e7a:	bf 2e       	mov	r11, r31
     e7c:	f0 2d       	mov	r31, r0
     e7e:	0f 2e       	mov	r0, r31
     e80:	f6 ef       	ldi	r31, 0xF6	; 246
     e82:	cf 2e       	mov	r12, r31
     e84:	f4 e0       	ldi	r31, 0x04	; 4
     e86:	df 2e       	mov	r13, r31
     e88:	f0 2d       	mov	r31, r0
     e8a:	9e 01       	movw	r18, r28
     e8c:	2f 5f       	subi	r18, 0xFF	; 255
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	79 01       	movw	r14, r18
     e92:	b8 01       	movw	r22, r16
     e94:	80 ea       	ldi	r24, 0xA0	; 160
     e96:	0e 94 50 05 	call	0xaa0	; 0xaa0 <eeprom_get_record>
     e9a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <tag>
     e9e:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     ea2:	8e e2       	ldi	r24, 0x2E	; 46
     ea4:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     ea8:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <monat>
     eac:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     eb0:	8e e2       	ldi	r24, 0x2E	; 46
     eb2:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     eb6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <jahr>
     eba:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     ebe:	80 e2       	ldi	r24, 0x20	; 32
     ec0:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     ec4:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <stunde>
     ec8:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     ecc:	8a e3       	ldi	r24, 0x3A	; 58
     ece:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     ed2:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <minute>
     ed6:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     eda:	8a e3       	ldi	r24, 0x3A	; 58
     edc:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     ee0:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <sekunde>
     ee4:	0e 94 48 04 	call	0x890	; 0x890 <rs232_printdd>
     ee8:	8b e3       	ldi	r24, 0x3B	; 59
     eea:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
     eee:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <temperatur>
     ef2:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <temperatur+0x1>
     ef6:	81 11       	cpse	r24, r1
     ef8:	8b 2d       	mov	r24, r11
     efa:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <temperatur>
     efe:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <temperatur+0x1>
     f02:	1f 92       	push	r1
     f04:	8f 93       	push	r24
     f06:	83 2f       	mov	r24, r19
     f08:	33 0f       	add	r19, r19
     f0a:	99 0b       	sbc	r25, r25
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	df 92       	push	r13
     f12:	cf 92       	push	r12
     f14:	ff 92       	push	r15
     f16:	ef 92       	push	r14
     f18:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sprintf>
     f1c:	c7 01       	movw	r24, r14
     f1e:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
     f22:	0f 5f       	subi	r16, 0xFF	; 255
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
     f26:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <aktueller_Datensatz>
     f2a:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <aktueller_Datensatz+0x1>
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	08 17       	cp	r16, r24
     f3a:	19 07       	cpc	r17, r25
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <serial_print_all_records+0x100>
     f3e:	a9 cf       	rjmp	.-174    	; 0xe92 <serial_print_all_records+0x52>
     f40:	26 96       	adiw	r28, 0x06	; 6
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	bf 90       	pop	r11
     f5e:	08 95       	ret

00000f60 <lcd_print_temperatur>:
	//lcd_print("EEPROM #3 test");
	//test = eeprom_memtest(EEPROM_3);
}
//---------------------------------------------------------------------------
void lcd_print_temperatur(int16_t degree)
{
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	61 97       	sbiw	r28, 0x11	; 17
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	29 2f       	mov	r18, r25
	uint8_t  buffer[LCD_LEN+1];
	uint8_t  dezimale,ganzzahl;

	// Nachkommastelle. Auflösung 0,5°C
  dezimale = degree & 0x80;   //nur Bit lsb:  0000 0000 1000 0000
     f7a:	80 78       	andi	r24, 0x80	; 128
  if (dezimale!=0) dezimale = 5; else dezimale = 0;
     f7c:	09 f0       	breq	.+2      	; 0xf80 <lcd_print_temperatur+0x20>
     f7e:	85 e0       	ldi	r24, 0x05	; 5
  ganzzahl = degree >>8;
    
  // Zusammenbauen der Zeichenkette mit der Bibliotheksfunktion sprintf()
  sprintf(buffer,"%3d,%1u°C",ganzzahl,dezimale);
     f80:	1f 92       	push	r1
     f82:	8f 93       	push	r24
     f84:	82 2f       	mov	r24, r18
     f86:	92 2f       	mov	r25, r18
     f88:	99 0f       	add	r25, r25
     f8a:	99 0b       	sbc	r25, r25
     f8c:	99 27       	eor	r25, r25
     f8e:	9f 93       	push	r25
     f90:	8f 93       	push	r24
     f92:	8f e0       	ldi	r24, 0x0F	; 15
     f94:	95 e0       	ldi	r25, 0x05	; 5
     f96:	9f 93       	push	r25
     f98:	8f 93       	push	r24
     f9a:	8e 01       	movw	r16, r28
     f9c:	0f 5f       	subi	r16, 0xFF	; 255
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	1f 93       	push	r17
     fa2:	0f 93       	push	r16
     fa4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sprintf>
  
	// Ausgabe auf LC-Display
	lcd_print(buffer);
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
}
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	61 96       	adiw	r28, 0x11	; 17
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <rs232_print_temperatur>:
//---------------------------------------------------------------------------
void rs232_print_temperatur(int16_t degree, uint8_t mode)
{
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	61 97       	sbiw	r28, 0x11	; 17
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
	uint8_t  buffer[LCD_LEN+1];
	uint8_t  dezimale,ganzzahl;

	// Nachkommastelle. Auflösung 0,5°C
  dezimale = degree & 0x80;   //nur Bit lsb:  0000 0000 1000 0000
     fe2:	80 78       	andi	r24, 0x80	; 128
  if (dezimale!=0) dezimale = 5; else dezimale = 0;
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <rs232_print_temperatur+0x1a>
     fe6:	85 e0       	ldi	r24, 0x05	; 5
  ganzzahl = degree >>8;
     fe8:	29 2f       	mov	r18, r25
     fea:	39 2f       	mov	r19, r25
     fec:	33 0f       	add	r19, r19
     fee:	33 0b       	sbc	r19, r19
  
  // Zusammenbauen der Zeichenkette mit der Bibliotheksfunktion sprintf()
  //sprintf(buffer,"%3d,%1u°C",ganzzahl,dezimale);
  switch (mode)
     ff0:	61 30       	cpi	r22, 0x01	; 1
     ff2:	c9 f0       	breq	.+50     	; 0x1026 <rs232_print_temperatur+0x58>
     ff4:	18 f0       	brcs	.+6      	; 0xffc <rs232_print_temperatur+0x2e>
     ff6:	62 30       	cpi	r22, 0x02	; 2
     ff8:	59 f1       	breq	.+86     	; 0x1050 <rs232_print_temperatur+0x82>
     ffa:	3e c0       	rjmp	.+124    	; 0x1078 <rs232_print_temperatur+0xaa>
  {
    case 0:    sprintf(buffer,"T1=%3d.%1u\r\n",ganzzahl,dezimale); break;
     ffc:	1f 92       	push	r1
     ffe:	8f 93       	push	r24
    1000:	33 27       	eor	r19, r19
    1002:	3f 93       	push	r19
    1004:	2f 93       	push	r18
    1006:	89 e1       	ldi	r24, 0x19	; 25
    1008:	95 e0       	ldi	r25, 0x05	; 5
    100a:	9f 93       	push	r25
    100c:	8f 93       	push	r24
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	9f 93       	push	r25
    1014:	8f 93       	push	r24
    1016:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sprintf>
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	29 c0       	rjmp	.+82     	; 0x1078 <rs232_print_temperatur+0xaa>
    
    case 1:    sprintf(buffer,"%3d.%1u\r",ganzzahl,dezimale); break;
    1026:	1f 92       	push	r1
    1028:	8f 93       	push	r24
    102a:	33 27       	eor	r19, r19
    102c:	3f 93       	push	r19
    102e:	2f 93       	push	r18
    1030:	86 e2       	ldi	r24, 0x26	; 38
    1032:	95 e0       	ldi	r25, 0x05	; 5
    1034:	9f 93       	push	r25
    1036:	8f 93       	push	r24
    1038:	ce 01       	movw	r24, r28
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	9f 93       	push	r25
    103e:	8f 93       	push	r24
    1040:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sprintf>
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	14 c0       	rjmp	.+40     	; 0x1078 <rs232_print_temperatur+0xaa>
    
    case 2:    sprintf(buffer,"%3d.%1u°C\r",ganzzahl,dezimale); break;
    1050:	1f 92       	push	r1
    1052:	8f 93       	push	r24
    1054:	33 27       	eor	r19, r19
    1056:	3f 93       	push	r19
    1058:	2f 93       	push	r18
    105a:	8f e2       	ldi	r24, 0x2F	; 47
    105c:	95 e0       	ldi	r25, 0x05	; 5
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	ce 01       	movw	r24, r28
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	9f 93       	push	r25
    1068:	8f 93       	push	r24
    106a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sprintf>
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    default: break;
  }  
	// Ausgabe auf LC-Display
	rs232_print(buffer);           //rs232_put('\n');
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
}
    1080:	61 96       	adiw	r28, 0x11	; 17
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <lm75_read>:
//---------------------------------------------------------------------------
int16_t lm75_read(void)
{
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
  uint16_t msb,lsb,data16;
  
  i2c_start();                // Startbedingung
    1098:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
  i2c_write(LM75_ADDR_W);     // Schreibwunsch an LM75 senden
    109c:	80 e9       	ldi	r24, 0x90	; 144
    109e:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
  i2c_write(0x00);            // Pointer auf 0 setzen
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
  i2c_stop();
    10a8:	0e 94 93 03 	call	0x726	; 0x726 <i2c_stop>
  
  i2c_start();
    10ac:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
  i2c_write(LM75_ADDR_R);     // Lesewunsch an LM75 senden
    10b0:	81 e9       	ldi	r24, 0x91	; 145
    10b2:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
  msb = i2c_read(ACK);        // MSB lesen und weiteren Wert anfordern.
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_read>
    10bc:	c8 2f       	mov	r28, r24
    10be:	d0 e0       	ldi	r29, 0x00	; 0
  lsb = i2c_read(NACK);       // LSB lesen
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_read>
    10c6:	18 2f       	mov	r17, r24
  i2c_stop();                 // Stoppbedingung
    10c8:	0e 94 93 03 	call	0x726	; 0x726 <i2c_stop>
  
  msb <<= 8;
  data16 = msb | lsb;
    10cc:	9c 2f       	mov	r25, r28
    10ce:	88 27       	eor	r24, r24
    10d0:	81 2b       	or	r24, r17
  data16 &= 0xff80;           // niederwertige Bits ausmaskieren! 
  return data16;              // Genauigkeit: +/- 0,5°C
}
    10d2:	80 78       	andi	r24, 0x80	; 128
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	08 95       	ret

000010dc <rs232_get_sampletime>:
//---------------------------------------------------------------------------
uint32_t rs232_get_sampletime(void)
{
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <rs232_get_sampletime+0x6>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <rs232_get_sampletime+0x8>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <rs232_get_sampletime+0xa>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t c,i;
  volatile uint32_t buf;

  buf = 0, i = 0;
    10ea:	1b 82       	std	Y+3, r1	; 0x03
    10ec:	1c 82       	std	Y+4, r1	; 0x04
    10ee:	1d 82       	std	Y+5, r1	; 0x05
    10f0:	1e 82       	std	Y+6, r1	; 0x06
    10f2:	1a 82       	std	Y+2, r1	; 0x02
  
  do
  {
    while((c = rs232_get()) == 0);
    10f4:	0e 94 09 04 	call	0x812	; 0x812 <rs232_get>
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	88 23       	and	r24, r24
    10fc:	d9 f3       	breq	.-10     	; 0x10f4 <rs232_get_sampletime+0x18>
    if(c == '\n' || c == '\r')
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	8a 30       	cpi	r24, 0x0A	; 10
    1102:	09 f4       	brne	.+2      	; 0x1106 <rs232_get_sampletime+0x2a>
    1104:	41 c0       	rjmp	.+130    	; 0x1188 <rs232_get_sampletime+0xac>
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	8d 30       	cpi	r24, 0x0D	; 13
    110a:	f1 f1       	breq	.+124    	; 0x1188 <rs232_get_sampletime+0xac>
    break;
    else if ((c >= '0') && (c <= '9'))
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	80 33       	cpi	r24, 0x30	; 48
    1110:	b8 f1       	brcs	.+110    	; 0x1180 <rs232_get_sampletime+0xa4>
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	8a 33       	cpi	r24, 0x3A	; 58
    1116:	a0 f5       	brcc	.+104    	; 0x1180 <rs232_get_sampletime+0xa4>
    {
      buf *= 10;
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	ad 81       	ldd	r26, Y+5	; 0x05
    111e:	be 81       	ldd	r27, Y+6	; 0x06
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	aa 1f       	adc	r26, r26
    1126:	bb 1f       	adc	r27, r27
    1128:	ac 01       	movw	r20, r24
    112a:	bd 01       	movw	r22, r26
    112c:	44 0f       	add	r20, r20
    112e:	55 1f       	adc	r21, r21
    1130:	66 1f       	adc	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	44 0f       	add	r20, r20
    1136:	55 1f       	adc	r21, r21
    1138:	66 1f       	adc	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	84 0f       	add	r24, r20
    113e:	95 1f       	adc	r25, r21
    1140:	a6 1f       	adc	r26, r22
    1142:	b7 1f       	adc	r27, r23
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	9c 83       	std	Y+4, r25	; 0x04
    1148:	ad 83       	std	Y+5, r26	; 0x05
    114a:	be 83       	std	Y+6, r27	; 0x06
      buf += (c-'0');
    114c:	29 81       	ldd	r18, Y+1	; 0x01
    114e:	4b 81       	ldd	r20, Y+3	; 0x03
    1150:	5c 81       	ldd	r21, Y+4	; 0x04
    1152:	6d 81       	ldd	r22, Y+5	; 0x05
    1154:	7e 81       	ldd	r23, Y+6	; 0x06
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	c9 01       	movw	r24, r18
    115a:	c0 97       	sbiw	r24, 0x30	; 48
    115c:	09 2e       	mov	r0, r25
    115e:	00 0c       	add	r0, r0
    1160:	aa 0b       	sbc	r26, r26
    1162:	bb 0b       	sbc	r27, r27
    1164:	84 0f       	add	r24, r20
    1166:	95 1f       	adc	r25, r21
    1168:	a6 1f       	adc	r26, r22
    116a:	b7 1f       	adc	r27, r23
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	9c 83       	std	Y+4, r25	; 0x04
    1170:	ad 83       	std	Y+5, r26	; 0x05
    1172:	be 83       	std	Y+6, r27	; 0x06
      i++;
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	8a 83       	std	Y+2, r24	; 0x02
      rs232_put(c);       // Echo
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	0e 94 12 04 	call	0x824	; 0x824 <rs232_put>
    }
  } while (i<5);
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	85 30       	cpi	r24, 0x05	; 5
    1184:	08 f4       	brcc	.+2      	; 0x1188 <rs232_get_sampletime+0xac>
    1186:	b6 cf       	rjmp	.-148    	; 0x10f4 <rs232_get_sampletime+0x18>
  
  rs232_print("\n\r");
    1188:	8f e8       	ldi	r24, 0x8F	; 143
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	0e 94 1a 04 	call	0x834	; 0x834 <rs232_print>
  return buf;
    1190:	6b 81       	ldd	r22, Y+3	; 0x03
    1192:	7c 81       	ldd	r23, Y+4	; 0x04
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	26 96       	adiw	r28, 0x06	; 6
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <delay_100us>:

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <delay_100us+0x1c>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11b2:	40 e9       	ldi	r20, 0x90	; 144
    11b4:	51 e0       	ldi	r21, 0x01	; 1
    11b6:	fa 01       	movw	r30, r20
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <delay_100us+0xe>
	{
		_delay_us(100);
		n++;
    11bc:	2f 5f       	subi	r18, 0xFF	; 255
    11be:	3f 4f       	sbci	r19, 0xFF	; 255

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
    11c0:	82 17       	cp	r24, r18
    11c2:	93 07       	cpc	r25, r19
    11c4:	c1 f7       	brne	.-16     	; 0x11b6 <delay_100us+0xc>
    11c6:	08 95       	ret

000011c8 <delay_ms>:
		n++;
	}
}

void delay_ms( uint16_t millisekunden)
{
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
	uint16_t n = 0;
	
	while(n < millisekunden)
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	59 f0       	breq	.+22     	; 0x11ea <delay_ms+0x22>
    11d4:	8c 01       	movw	r16, r24
    11d6:	c0 e0       	ldi	r28, 0x00	; 0
    11d8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_100us(10);
    11da:	8a e0       	ldi	r24, 0x0A	; 10
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 d5 08 	call	0x11aa	; 0x11aa <delay_100us>
		n++;
    11e2:	21 96       	adiw	r28, 0x01	; 1

void delay_ms( uint16_t millisekunden)
{
	uint16_t n = 0;
	
	while(n < millisekunden)
    11e4:	0c 17       	cp	r16, r28
    11e6:	1d 07       	cpc	r17, r29
    11e8:	c1 f7       	brne	.-16     	; 0x11da <delay_ms+0x12>
	{
		delay_100us(10);
		n++;
	}
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <delay_s>:

void delay_s( uint16_t sekunden)
{
  uint16_t n = 0;
  
  while(n < sekunden)
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	69 f4       	brne	.+26     	; 0x1212 <delay_s+0x1e>
    11f8:	08 95       	ret
    11fa:	fa 01       	movw	r30, r20
    11fc:	31 97       	sbiw	r30, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <delay_s+0x8>
    1200:	21 50       	subi	r18, 0x01	; 1
    1202:	31 09       	sbc	r19, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1204:	d1 f7       	brne	.-12     	; 0x11fa <delay_s+0x6>
  {
    _delay_ms(1000);
    n++;
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255

void delay_s( uint16_t sekunden)
{
  uint16_t n = 0;
  
  while(n < sekunden)
    120a:	86 17       	cp	r24, r22
    120c:	97 07       	cpc	r25, r23
    120e:	29 f4       	brne	.+10     	; 0x121a <delay_s+0x26>
    1210:	08 95       	ret
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	40 e9       	ldi	r20, 0x90	; 144
    1218:	51 e0       	ldi	r21, 0x01	; 1
		n++;
	}
}

void delay_s( uint16_t sekunden)
{
    121a:	20 e1       	ldi	r18, 0x10	; 16
    121c:	37 e2       	ldi	r19, 0x27	; 39
    121e:	ed cf       	rjmp	.-38     	; 0x11fa <delay_s+0x6>

00001220 <eeprom_init>:
#include "controller.h"
#include "eeprom.h"

void eeprom_init(void)
{
  i2c_init();     // Zugriff auf EEPROM über i2C-Bus
    1220:	0e 94 81 03 	call	0x702	; 0x702 <i2c_init>
    1224:	08 95       	ret

00001226 <eeprom_read>:
}

uint8_t eeprom_read (uint8_t i2c_address, uint16_t address)
{
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	1f 92       	push	r1
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	18 2f       	mov	r17, r24
    1238:	06 2f       	mov	r16, r22
    123a:	f7 2e       	mov	r15, r23
  volatile uint8_t temp;
  uint8_t response;
  

  i2c_start();
    123c:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
  response = i2c_write(i2c_address);				// I2C-Adresse EEPROM1
    1240:	81 2f       	mov	r24, r17
    1242:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
  if (response == NACK) return -1;
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	a1 f0       	breq	.+40     	; 0x1272 <eeprom_read+0x4c>
  i2c_write((address>>8) & 0x00ff);	// Address High Byte schreiben
    124a:	8f 2d       	mov	r24, r15
    124c:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
	i2c_write(address & 0x00ff);			// Address Low Byte schreiben
    1250:	80 2f       	mov	r24, r16
    1252:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
	
  i2c_start();								// Repeated Start
    1256:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
	i2c_write(i2c_address | 0x01);
    125a:	81 2f       	mov	r24, r17
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
  temp = i2c_read(NACK);
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_read>
    1268:	89 83       	std	Y+1, r24	; 0x01
  i2c_stop();
    126a:	0e 94 93 03 	call	0x726	; 0x726 <i2c_stop>
  return temp;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <eeprom_read+0x4e>
  uint8_t response;
  

  i2c_start();
  response = i2c_write(i2c_address);				// I2C-Adresse EEPROM1
  if (response == NACK) return -1;
    1272:	8f ef       	ldi	r24, 0xFF	; 255
  i2c_start();								// Repeated Start
	i2c_write(i2c_address | 0x01);
  temp = i2c_read(NACK);
  i2c_stop();
  return temp;
}
    1274:	0f 90       	pop	r0
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	08 95       	ret

00001282 <eeprom_write>:

void eeprom_write(uint8_t i2c_address, uint16_t address, uint8_t value)
{
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	c8 2f       	mov	r28, r24
    128c:	16 2f       	mov	r17, r22
    128e:	07 2f       	mov	r16, r23
    1290:	d4 2f       	mov	r29, r20
	uint8_t	response;
	
  i2c_start();
    1292:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
  i2c_write(i2c_address);
    1296:	8c 2f       	mov	r24, r28
    1298:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
  i2c_write((address>>8) & 0x00ff);				// EEPROM-Adresse High Byte schreiben
    129c:	80 2f       	mov	r24, r16
    129e:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
	i2c_write(address & 0x00ff);						// EEPROM-Adresse Low Byte schreiben
    12a2:	81 2f       	mov	r24, r17
    12a4:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
  
  i2c_write(value);
    12a8:	8d 2f       	mov	r24, r29
    12aa:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
  i2c_stop();
    12ae:	0e 94 93 03 	call	0x726	; 0x726 <i2c_stop>
	delay_100us(1);													// Kurze Pause nötig!!
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <delay_100us>
	response = NACK;
	do																			// Acknowledge-Polling bis Schreibvorgang
	{																				// beendet.
		i2c_start();
    12ba:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
		response = i2c_write(i2c_address);
    12be:	8c 2f       	mov	r24, r28
    12c0:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
	} while (response == NACK);
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	c9 f3       	breq	.-14     	; 0x12ba <eeprom_write+0x38>
	i2c_stop();
    12c8:	0e 94 93 03 	call	0x726	; 0x726 <i2c_stop>
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <eeprom_memtest>:
// testet den gewählten EEPROM durch wiederholtes
// schreiben und lesen von 0xaa und 0x55 auf jede
// Speicherstelle bis zur Endadresse (eeprom.h)
// Der ursrüngliche Wert wird wieder hergestellt.
int8_t eeprom_memtest(uint8_t i2c_address)
{
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	18 2f       	mov	r17, r24
    12e4:	c0 e0       	ldi	r28, 0x00	; 0
    12e6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t buf;
  int16_t temp;
	
	for(adresse = 0x0000;adresse <= EEPROM_END_ADDRESS;adresse++)
	{
    lcd_setcursor(2,1);
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
    lcd_int((uint16_t)adresse);
    12f0:	ce 01       	movw	r24, r28
    12f2:	0e 94 32 0b 	call	0x1664	; 0x1664 <lcd_int>
		
    temp = eeprom_read(i2c_address,(uint16_t)adresse); if (temp == -1) return -1;
    12f6:	be 01       	movw	r22, r28
    12f8:	81 2f       	mov	r24, r17
    12fa:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
    12fe:	e8 2e       	mov	r14, r24
		eeprom_write(i2c_address,(uint16_t)adresse,0xAA);
    1300:	4a ea       	ldi	r20, 0xAA	; 170
    1302:	be 01       	movw	r22, r28
    1304:	81 2f       	mov	r24, r17
    1306:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
		buf = (uint8_t) eeprom_read(i2c_address,(uint16_t)adresse);	if (buf != 0xAA)	{return -1;}
    130a:	be 01       	movw	r22, r28
    130c:	81 2f       	mov	r24, r17
    130e:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
    1312:	8a 3a       	cpi	r24, 0xAA	; 170
    1314:	d1 f4       	brne	.+52     	; 0x134a <eeprom_memtest+0x74>
		eeprom_write(i2c_address,(uint16_t)adresse,0x55);
    1316:	45 e5       	ldi	r20, 0x55	; 85
    1318:	6c 2f       	mov	r22, r28
    131a:	7d 2f       	mov	r23, r29
    131c:	81 2f       	mov	r24, r17
    131e:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
		buf = (uint8_t) eeprom_read(i2c_address,(uint16_t)adresse);	if (buf != 0x55)  {return -1;}
    1322:	6c 2f       	mov	r22, r28
    1324:	7d 2f       	mov	r23, r29
    1326:	81 2f       	mov	r24, r17
    1328:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_read>
    132c:	85 35       	cpi	r24, 0x55	; 85
    132e:	79 f4       	brne	.+30     	; 0x134e <eeprom_memtest+0x78>
		eeprom_write(i2c_address,(uint16_t)adresse,(uint8_t)temp);
    1330:	4e 2d       	mov	r20, r14
    1332:	6c 2f       	mov	r22, r28
    1334:	7d 2f       	mov	r23, r29
    1336:	81 2f       	mov	r24, r17
    1338:	0e 94 41 09 	call	0x1282	; 0x1282 <eeprom_write>
    133c:	21 96       	adiw	r28, 0x01	; 1
{
	uint32_t adresse;
	uint8_t buf;
  int16_t temp;
	
	for(adresse = 0x0000;adresse <= EEPROM_END_ADDRESS;adresse++)
    133e:	c1 15       	cp	r28, r1
    1340:	80 e8       	ldi	r24, 0x80	; 128
    1342:	d8 07       	cpc	r29, r24
    1344:	89 f6       	brne	.-94     	; 0x12e8 <eeprom_memtest+0x12>
		eeprom_write(i2c_address,(uint16_t)adresse,0x55);
		buf = (uint8_t) eeprom_read(i2c_address,(uint16_t)adresse);	if (buf != 0x55)  {return -1;}
		eeprom_write(i2c_address,(uint16_t)adresse,(uint8_t)temp);
	}

  return 0;
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <eeprom_memtest+0x7a>
    lcd_setcursor(2,1);
    lcd_int((uint16_t)adresse);
		
    temp = eeprom_read(i2c_address,(uint16_t)adresse); if (temp == -1) return -1;
		eeprom_write(i2c_address,(uint16_t)adresse,0xAA);
		buf = (uint8_t) eeprom_read(i2c_address,(uint16_t)adresse);	if (buf != 0xAA)	{return -1;}
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <eeprom_memtest+0x7a>
		eeprom_write(i2c_address,(uint16_t)adresse,0x55);
		buf = (uint8_t) eeprom_read(i2c_address,(uint16_t)adresse);	if (buf != 0x55)  {return -1;}
    134e:	8f ef       	ldi	r24, 0xFF	; 255
		eeprom_write(i2c_address,(uint16_t)adresse,(uint8_t)temp);
	}

  return 0;
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	08 95       	ret

0000135e <__vector_1>:
  #endif
}

void timer1ms_disable( void )
{
  timer_ms_disable();
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	2f 93       	push	r18
    136a:	3f 93       	push	r19
    136c:	4f 93       	push	r20
    136e:	5f 93       	push	r21
    1370:	6f 93       	push	r22
    1372:	7f 93       	push	r23
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	af 93       	push	r26
    137a:	bf 93       	push	r27
    137c:	ef 93       	push	r30
    137e:	ff 93       	push	r31
    1380:	e8 98       	cbi	0x1d, 0	; 29
    1382:	e0 91 5a 05 	lds	r30, 0x055A	; 0x80055a <my_interrupt0>
    1386:	f0 91 5b 05 	lds	r31, 0x055B	; 0x80055b <my_interrupt0+0x1>
    138a:	09 95       	icall
    138c:	e8 9a       	sbi	0x1d, 0	; 29
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <__vector_2>:
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
    13d2:	e9 98       	cbi	0x1d, 1	; 29
    13d4:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <my_interrupt1>
    13d8:	f0 91 5f 05 	lds	r31, 0x055F	; 0x80055f <my_interrupt1+0x1>
    13dc:	09 95       	icall
    13de:	e9 9a       	sbi	0x1d, 1	; 29
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0
    13fe:	1f 90       	pop	r1
    1400:	18 95       	reti

00001402 <__vector_14>:
    1402:	1f 92       	push	r1
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	0f 92       	push	r0
    140a:	11 24       	eor	r1, r1
    140c:	2f 93       	push	r18
    140e:	3f 93       	push	r19
    1410:	4f 93       	push	r20
    1412:	5f 93       	push	r21
    1414:	6f 93       	push	r22
    1416:	7f 93       	push	r23
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	ef 93       	push	r30
    1426:	ff 93       	push	r31
    1428:	ce e6       	ldi	r28, 0x6E	; 110
    142a:	d0 e0       	ldi	r29, 0x00	; 0
    142c:	88 81       	ld	r24, Y
    142e:	8d 7f       	andi	r24, 0xFD	; 253
    1430:	88 83       	st	Y, r24
    1432:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <my_timer>
    1436:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <my_timer+0x1>
    143a:	09 95       	icall
    143c:	88 81       	ld	r24, Y
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	88 83       	st	Y, r24
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	7f 91       	pop	r23
    1454:	6f 91       	pop	r22
    1456:	5f 91       	pop	r21
    1458:	4f 91       	pop	r20
    145a:	3f 91       	pop	r19
    145c:	2f 91       	pop	r18
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	0f 90       	pop	r0
    1464:	1f 90       	pop	r1
    1466:	18 95       	reti

00001468 <serial_interrupt_init>:
}

#endif

void serial_interrupt_init( void (*sr) (void))
{ 
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
	rs232_init();  // Serielle Schnittstelle initialisieren
    146e:	0e 94 02 04 	call	0x804	; 0x804 <rs232_init>
	my_datareceived = sr;
    1472:	d0 93 5d 05 	sts	0x055D, r29	; 0x80055d <my_datareceived+0x1>
    1476:	c0 93 5c 05 	sts	0x055C, r28	; 0x80055c <my_datareceived>
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <__vector_18>:

ISR(USART_RX_vect)                  // Interrupt-Vektor
{
    1480:	1f 92       	push	r1
    1482:	0f 92       	push	r0
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	0f 92       	push	r0
    1488:	11 24       	eor	r1, r1
    148a:	2f 93       	push	r18
    148c:	3f 93       	push	r19
    148e:	4f 93       	push	r20
    1490:	5f 93       	push	r21
    1492:	6f 93       	push	r22
    1494:	7f 93       	push	r23
    1496:	8f 93       	push	r24
    1498:	9f 93       	push	r25
    149a:	af 93       	push	r26
    149c:	bf 93       	push	r27
    149e:	ef 93       	push	r30
    14a0:	ff 93       	push	r31
	//UCSR0B &= ~(1<<RXCIE0);         // Empfangsinterrupt ausschalten
	my_datareceived();                // Aufruf der Benutzer-ISR
    14a2:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <my_datareceived>
    14a6:	f0 91 5d 05 	lds	r31, 0x055D	; 0x80055d <my_datareceived+0x1>
    14aa:	09 95       	icall
  //UCSR0B |= (1<<RXCIE0);          // Empfangsinterrupt einschalten
}
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	9f 91       	pop	r25
    14b6:	8f 91       	pop	r24
    14b8:	7f 91       	pop	r23
    14ba:	6f 91       	pop	r22
    14bc:	5f 91       	pop	r21
    14be:	4f 91       	pop	r20
    14c0:	3f 91       	pop	r19
    14c2:	2f 91       	pop	r18
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <serial_interrupt_enable>:

extern void serial_interrupt_enable  ( void )
{
  UCSR0B |= (1<<RXCIE0);            // Empfangsinterrupt einschalten
    14ce:	e1 ec       	ldi	r30, 0xC1	; 193
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	80 68       	ori	r24, 0x80	; 128
    14d6:	80 83       	st	Z, r24
	sei();
    14d8:	78 94       	sei
    14da:	08 95       	ret

000014dc <lcd_waitwhilebusy>:
{
  uint8_t n;

  lcd_setcursor(line,0);
  for (n=0; n < LCD_LEN; n++)  lcd_char(' ');
}
    14dc:	8a e0       	ldi	r24, 0x0A	; 10
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <delay_100us>
    14e4:	08 95       	ret

000014e6 <port_out>:
    14e6:	cf 93       	push	r28
    14e8:	c8 2f       	mov	r28, r24
    14ea:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
    14ee:	8e e4       	ldi	r24, 0x4E	; 78
    14f0:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
    14f4:	8c 2f       	mov	r24, r28
    14f6:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
    14fa:	0e 94 93 03 	call	0x726	; 0x726 <i2c_stop>
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <lowlevel_write>:
    1502:	cf 93       	push	r28
    1504:	c8 2f       	mov	r28, r24
    1506:	8c 60       	ori	r24, 0x0C	; 12
    1508:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <port_out>
    150c:	8c 2f       	mov	r24, r28
    150e:	8b 7f       	andi	r24, 0xFB	; 251
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <port_out>
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <lcd_befehl>:
    151a:	cf 93       	push	r28
    151c:	c8 2f       	mov	r28, r24
    151e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <lcd_waitwhilebusy>
    1522:	8c 2f       	mov	r24, r28
    1524:	80 7f       	andi	r24, 0xF0	; 240
    1526:	0e 94 81 0a 	call	0x1502	; 0x1502 <lowlevel_write>
    152a:	8c 2f       	mov	r24, r28
    152c:	82 95       	swap	r24
    152e:	80 7f       	andi	r24, 0xF0	; 240
    1530:	0e 94 81 0a 	call	0x1502	; 0x1502 <lowlevel_write>
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <lcd_daten>:
    1538:	cf 93       	push	r28
    153a:	c8 2f       	mov	r28, r24
    153c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <lcd_waitwhilebusy>
    1540:	8c 2f       	mov	r24, r28
    1542:	80 7f       	andi	r24, 0xF0	; 240
    1544:	81 60       	ori	r24, 0x01	; 1
    1546:	0e 94 81 0a 	call	0x1502	; 0x1502 <lowlevel_write>
    154a:	8c 2f       	mov	r24, r28
    154c:	82 95       	swap	r24
    154e:	80 7f       	andi	r24, 0xF0	; 240
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	0e 94 81 0a 	call	0x1502	; 0x1502 <lowlevel_write>
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <lcd_init>:
    155a:	8c e3       	ldi	r24, 0x3C	; 60
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
    1562:	0e 94 81 03 	call	0x702	; 0x702 <i2c_init>
    1566:	80 e3       	ldi	r24, 0x30	; 48
    1568:	0e 94 81 0a 	call	0x1502	; 0x1502 <lowlevel_write>
    156c:	84 e1       	ldi	r24, 0x14	; 20
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
    1574:	80 e3       	ldi	r24, 0x30	; 48
    1576:	0e 94 81 0a 	call	0x1502	; 0x1502 <lowlevel_write>
    157a:	8a e0       	ldi	r24, 0x0A	; 10
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
    1582:	80 e3       	ldi	r24, 0x30	; 48
    1584:	0e 94 81 0a 	call	0x1502	; 0x1502 <lowlevel_write>
    1588:	8a e0       	ldi	r24, 0x0A	; 10
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay_ms>
    1590:	80 e2       	ldi	r24, 0x20	; 32
    1592:	0e 94 81 0a 	call	0x1502	; 0x1502 <lowlevel_write>
    1596:	88 e2       	ldi	r24, 0x28	; 40
    1598:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_befehl>
    159c:	8c e0       	ldi	r24, 0x0C	; 12
    159e:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_befehl>
    15a2:	84 e1       	ldi	r24, 0x14	; 20
    15a4:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_befehl>
    15a8:	08 95       	ret

000015aa <lcd_clear>:
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_befehl>
    15b0:	08 95       	ret

000015b2 <lcd_setcursor>:
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	31 f0       	breq	.+12     	; 0x15c2 <lcd_setcursor+0x10>
    15b6:	84 30       	cpi	r24, 0x04	; 4
    15b8:	31 f0       	breq	.+12     	; 0x15c6 <lcd_setcursor+0x14>
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	31 f4       	brne	.+12     	; 0x15ca <lcd_setcursor+0x18>
    15be:	90 e4       	ldi	r25, 0x40	; 64
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <lcd_setcursor+0x1a>
    15c2:	90 e1       	ldi	r25, 0x10	; 16
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <lcd_setcursor+0x1a>
    15c6:	90 e5       	ldi	r25, 0x50	; 80
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <lcd_setcursor+0x1a>
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	86 0f       	add	r24, r22
    15d0:	89 0f       	add	r24, r25
    15d2:	80 68       	ori	r24, 0x80	; 128
    15d4:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_befehl>
    15d8:	08 95       	ret

000015da <lcd_lookup>:
    15da:	86 3d       	cpi	r24, 0xD6	; 214
    15dc:	09 f1       	breq	.+66     	; 0x1620 <lcd_lookup+0x46>
    15de:	68 f4       	brcc	.+26     	; 0x15fa <lcd_lookup+0x20>
    15e0:	80 3b       	cpi	r24, 0xB0	; 176
    15e2:	51 f1       	breq	.+84     	; 0x1638 <lcd_lookup+0x5e>
    15e4:	28 f4       	brcc	.+10     	; 0x15f0 <lcd_lookup+0x16>
    15e6:	8c 35       	cpi	r24, 0x5C	; 92
    15e8:	19 f1       	breq	.+70     	; 0x1630 <lcd_lookup+0x56>
    15ea:	80 38       	cpi	r24, 0x80	; 128
    15ec:	19 f1       	breq	.+70     	; 0x1634 <lcd_lookup+0x5a>
    15ee:	08 95       	ret
    15f0:	85 3b       	cpi	r24, 0xB5	; 181
    15f2:	e1 f0       	breq	.+56     	; 0x162c <lcd_lookup+0x52>
    15f4:	84 3c       	cpi	r24, 0xC4	; 196
    15f6:	71 f0       	breq	.+28     	; 0x1614 <lcd_lookup+0x3a>
    15f8:	08 95       	ret
    15fa:	84 3e       	cpi	r24, 0xE4	; 228
    15fc:	59 f0       	breq	.+22     	; 0x1614 <lcd_lookup+0x3a>
    15fe:	28 f4       	brcc	.+10     	; 0x160a <lcd_lookup+0x30>
    1600:	8c 3d       	cpi	r24, 0xDC	; 220
    1602:	81 f0       	breq	.+32     	; 0x1624 <lcd_lookup+0x4a>
    1604:	8f 3d       	cpi	r24, 0xDF	; 223
    1606:	81 f0       	breq	.+32     	; 0x1628 <lcd_lookup+0x4e>
    1608:	08 95       	ret
    160a:	86 3f       	cpi	r24, 0xF6	; 246
    160c:	29 f0       	breq	.+10     	; 0x1618 <lcd_lookup+0x3e>
    160e:	8c 3f       	cpi	r24, 0xFC	; 252
    1610:	29 f0       	breq	.+10     	; 0x161c <lcd_lookup+0x42>
    1612:	08 95       	ret
    1614:	81 ee       	ldi	r24, 0xE1	; 225
    1616:	08 95       	ret
    1618:	8f ee       	ldi	r24, 0xEF	; 239
    161a:	08 95       	ret
    161c:	85 ef       	ldi	r24, 0xF5	; 245
    161e:	08 95       	ret
    1620:	8f ee       	ldi	r24, 0xEF	; 239
    1622:	08 95       	ret
    1624:	85 ef       	ldi	r24, 0xF5	; 245
    1626:	08 95       	ret
    1628:	82 ee       	ldi	r24, 0xE2	; 226
    162a:	08 95       	ret
    162c:	84 ee       	ldi	r24, 0xE4	; 228
    162e:	08 95       	ret
    1630:	84 ea       	ldi	r24, 0xA4	; 164
    1632:	08 95       	ret
    1634:	83 ed       	ldi	r24, 0xD3	; 211
    1636:	08 95       	ret
    1638:	8f ed       	ldi	r24, 0xDF	; 223
    163a:	08 95       	ret

0000163c <lcd_char>:
    163c:	0e 94 ed 0a 	call	0x15da	; 0x15da <lcd_lookup>
    1640:	0e 94 9c 0a 	call	0x1538	; 0x1538 <lcd_daten>
    1644:	08 95       	ret

00001646 <lcd_print>:
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	ec 01       	movw	r28, r24
    164c:	88 81       	ld	r24, Y
    164e:	88 23       	and	r24, r24
    1650:	31 f0       	breq	.+12     	; 0x165e <lcd_print+0x18>
    1652:	21 96       	adiw	r28, 0x01	; 1
    1654:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
    1658:	89 91       	ld	r24, Y+
    165a:	81 11       	cpse	r24, r1
    165c:	fb cf       	rjmp	.-10     	; 0x1654 <lcd_print+0xe>
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <lcd_int>:
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	00 d0       	rcall	.+0      	; 0x166e <lcd_int+0xa>
    166e:	00 d0       	rcall	.+0      	; 0x1670 <lcd_int+0xc>
    1670:	1f 92       	push	r1
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	fc 01       	movw	r30, r24
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	48 0f       	add	r20, r24
    167e:	01 e0       	ldi	r16, 0x01	; 1
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	0c 0f       	add	r16, r28
    1684:	1d 1f       	adc	r17, r29
    1686:	08 0f       	add	r16, r24
    1688:	11 1d       	adc	r17, r1
    168a:	9f 01       	movw	r18, r30
    168c:	ad ec       	ldi	r26, 0xCD	; 205
    168e:	bc ec       	ldi	r27, 0xCC	; 204
    1690:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__umulhisi3>
    1694:	96 95       	lsr	r25
    1696:	87 95       	ror	r24
    1698:	96 95       	lsr	r25
    169a:	87 95       	ror	r24
    169c:	96 95       	lsr	r25
    169e:	87 95       	ror	r24
    16a0:	9c 01       	movw	r18, r24
    16a2:	22 0f       	add	r18, r18
    16a4:	33 1f       	adc	r19, r19
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	9f 01       	movw	r18, r30
    16b8:	28 1b       	sub	r18, r24
    16ba:	39 0b       	sbc	r19, r25
    16bc:	c9 01       	movw	r24, r18
    16be:	80 5d       	subi	r24, 0xD0	; 208
    16c0:	d8 01       	movw	r26, r16
    16c2:	8c 93       	st	X, r24
    16c4:	9f 01       	movw	r18, r30
    16c6:	ad ec       	ldi	r26, 0xCD	; 205
    16c8:	bc ec       	ldi	r27, 0xCC	; 204
    16ca:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__umulhisi3>
    16ce:	fc 01       	movw	r30, r24
    16d0:	f6 95       	lsr	r31
    16d2:	e7 95       	ror	r30
    16d4:	f6 95       	lsr	r31
    16d6:	e7 95       	ror	r30
    16d8:	f6 95       	lsr	r31
    16da:	e7 95       	ror	r30
    16dc:	84 2f       	mov	r24, r20
    16de:	30 97       	sbiw	r30, 0x00	; 0
    16e0:	61 f6       	brne	.-104    	; 0x167a <lcd_int+0x16>
    16e2:	45 30       	cpi	r20, 0x05	; 5
    16e4:	70 f4       	brcc	.+28     	; 0x1702 <lcd_int+0x9e>
    16e6:	80 e2       	ldi	r24, 0x20	; 32
    16e8:	11 e0       	ldi	r17, 0x01	; 1
    16ea:	14 0f       	add	r17, r20
    16ec:	e1 e0       	ldi	r30, 0x01	; 1
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	ec 0f       	add	r30, r28
    16f2:	fd 1f       	adc	r31, r29
    16f4:	e4 0f       	add	r30, r20
    16f6:	f1 1d       	adc	r31, r1
    16f8:	80 83       	st	Z, r24
    16fa:	41 2f       	mov	r20, r17
    16fc:	15 30       	cpi	r17, 0x05	; 5
    16fe:	a1 f7       	brne	.-24     	; 0x16e8 <lcd_int+0x84>
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <lcd_int+0xa4>
    1702:	44 23       	and	r20, r20
    1704:	69 f0       	breq	.+26     	; 0x1720 <lcd_int+0xbc>
    1706:	14 2f       	mov	r17, r20
    1708:	11 50       	subi	r17, 0x01	; 1
    170a:	e1 e0       	ldi	r30, 0x01	; 1
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	ec 0f       	add	r30, r28
    1710:	fd 1f       	adc	r31, r29
    1712:	e1 0f       	add	r30, r17
    1714:	f1 1d       	adc	r31, r1
    1716:	80 81       	ld	r24, Z
    1718:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
    171c:	11 11       	cpse	r17, r1
    171e:	f4 cf       	rjmp	.-24     	; 0x1708 <lcd_int+0xa4>
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	08 95       	ret

00001734 <lcd_int32>:
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	28 97       	sbiw	r28, 0x08	; 8
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	d4 2e       	mov	r13, r20
    175c:	61 15       	cp	r22, r1
    175e:	21 ee       	ldi	r18, 0xE1	; 225
    1760:	72 07       	cpc	r23, r18
    1762:	25 ef       	ldi	r18, 0xF5	; 245
    1764:	82 07       	cpc	r24, r18
    1766:	25 e0       	ldi	r18, 0x05	; 5
    1768:	92 07       	cpc	r25, r18
    176a:	28 f0       	brcs	.+10     	; 0x1776 <lcd_int32+0x42>
    176c:	8a e3       	ldi	r24, 0x3A	; 58
    176e:	95 e0       	ldi	r25, 0x05	; 5
    1770:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_print>
    1774:	52 c0       	rjmp	.+164    	; 0x181a <lcd_int32+0xe6>
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	0f 2e       	mov	r0, r31
    177a:	fa e0       	ldi	r31, 0x0A	; 10
    177c:	8f 2e       	mov	r8, r31
    177e:	91 2c       	mov	r9, r1
    1780:	a1 2c       	mov	r10, r1
    1782:	b1 2c       	mov	r11, r1
    1784:	f0 2d       	mov	r31, r0
    1786:	11 e0       	ldi	r17, 0x01	; 1
    1788:	12 0f       	add	r17, r18
    178a:	ee 24       	eor	r14, r14
    178c:	e3 94       	inc	r14
    178e:	f1 2c       	mov	r15, r1
    1790:	ec 0e       	add	r14, r28
    1792:	fd 1e       	adc	r15, r29
    1794:	e2 0e       	add	r14, r18
    1796:	f1 1c       	adc	r15, r1
    1798:	a5 01       	movw	r20, r10
    179a:	94 01       	movw	r18, r8
    179c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__udivmodsi4>
    17a0:	60 5d       	subi	r22, 0xD0	; 208
    17a2:	f7 01       	movw	r30, r14
    17a4:	60 83       	st	Z, r22
    17a6:	62 2f       	mov	r22, r18
    17a8:	73 2f       	mov	r23, r19
    17aa:	84 2f       	mov	r24, r20
    17ac:	95 2f       	mov	r25, r21
    17ae:	21 2f       	mov	r18, r17
    17b0:	61 15       	cp	r22, r1
    17b2:	71 05       	cpc	r23, r1
    17b4:	81 05       	cpc	r24, r1
    17b6:	91 05       	cpc	r25, r1
    17b8:	31 f7       	brne	.-52     	; 0x1786 <lcd_int32+0x52>
    17ba:	18 30       	cpi	r17, 0x08	; 8
    17bc:	70 f4       	brcc	.+28     	; 0x17da <lcd_int32+0xa6>
    17be:	80 e2       	ldi	r24, 0x20	; 32
    17c0:	01 e0       	ldi	r16, 0x01	; 1
    17c2:	01 0f       	add	r16, r17
    17c4:	e1 e0       	ldi	r30, 0x01	; 1
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	ec 0f       	add	r30, r28
    17ca:	fd 1f       	adc	r31, r29
    17cc:	e1 0f       	add	r30, r17
    17ce:	f1 1d       	adc	r31, r1
    17d0:	80 83       	st	Z, r24
    17d2:	10 2f       	mov	r17, r16
    17d4:	08 30       	cpi	r16, 0x08	; 8
    17d6:	a1 f7       	brne	.-24     	; 0x17c0 <lcd_int32+0x8c>
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <lcd_int32+0xac>
    17da:	11 23       	and	r17, r17
    17dc:	f1 f0       	breq	.+60     	; 0x181a <lcd_int32+0xe6>
    17de:	01 2f       	mov	r16, r17
    17e0:	01 50       	subi	r16, 0x01	; 1
    17e2:	f1 e0       	ldi	r31, 0x01	; 1
    17e4:	df 12       	cpse	r13, r31
    17e6:	0c c0       	rjmp	.+24     	; 0x1800 <lcd_int32+0xcc>
    17e8:	e1 e0       	ldi	r30, 0x01	; 1
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	ec 0f       	add	r30, r28
    17ee:	fd 1f       	adc	r31, r29
    17f0:	e0 0f       	add	r30, r16
    17f2:	f1 1d       	adc	r31, r1
    17f4:	80 81       	ld	r24, Z
    17f6:	80 32       	cpi	r24, 0x20	; 32
    17f8:	71 f0       	breq	.+28     	; 0x1816 <lcd_int32+0xe2>
    17fa:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
    17fe:	0b c0       	rjmp	.+22     	; 0x1816 <lcd_int32+0xe2>
    1800:	d1 10       	cpse	r13, r1
    1802:	09 c0       	rjmp	.+18     	; 0x1816 <lcd_int32+0xe2>
    1804:	e1 e0       	ldi	r30, 0x01	; 1
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	ec 0f       	add	r30, r28
    180a:	fd 1f       	adc	r31, r29
    180c:	e0 0f       	add	r30, r16
    180e:	f1 1d       	adc	r31, r1
    1810:	80 81       	ld	r24, Z
    1812:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
    1816:	01 11       	cpse	r16, r1
    1818:	e3 cf       	rjmp	.-58     	; 0x17e0 <lcd_int32+0xac>
    181a:	28 96       	adiw	r28, 0x08	; 8
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	9f 90       	pop	r9
    183a:	8f 90       	pop	r8
    183c:	08 95       	ret

0000183e <lcd_defchar>:
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	8c 01       	movw	r16, r24
    1848:	68 30       	cpi	r22, 0x08	; 8
    184a:	a0 f4       	brcc	.+40     	; 0x1874 <lcd_defchar+0x36>
    184c:	66 0f       	add	r22, r22
    184e:	66 0f       	add	r22, r22
    1850:	66 0f       	add	r22, r22
    1852:	86 2f       	mov	r24, r22
    1854:	88 73       	andi	r24, 0x38	; 56
    1856:	80 64       	ori	r24, 0x40	; 64
    1858:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_befehl>
    185c:	0b c0       	rjmp	.+22     	; 0x1874 <lcd_defchar+0x36>
    185e:	89 91       	ld	r24, Y+
    1860:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
    1864:	c0 17       	cp	r28, r16
    1866:	d1 07       	cpc	r29, r17
    1868:	d1 f7       	brne	.-12     	; 0x185e <lcd_defchar+0x20>
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_setcursor>
    1872:	04 c0       	rjmp	.+8      	; 0x187c <lcd_defchar+0x3e>
    1874:	e8 01       	movw	r28, r16
    1876:	08 5f       	subi	r16, 0xF8	; 248
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	f1 cf       	rjmp	.-30     	; 0x185e <lcd_defchar+0x20>
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <lcd_dd>:

// Zeigt 00 bis 99 auf dem Display an!
void lcd_dd(uint8_t val)
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	00 d0       	rcall	.+0      	; 0x188c <lcd_dd+0x6>
    188c:	1f 92       	push	r1
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	fe 01       	movw	r30, r28
    1894:	31 96       	adiw	r30, 0x01	; 1
    1896:	be 01       	movw	r22, r28
    1898:	6c 5f       	subi	r22, 0xFC	; 252
    189a:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t buffer[3];
	uint8_t n = 0;
	
	do
	{
		buffer[n++] = val%10 + '0';
    189c:	4d ec       	ldi	r20, 0xCD	; 205
    189e:	84 9f       	mul	r24, r20
    18a0:	91 2d       	mov	r25, r1
    18a2:	11 24       	eor	r1, r1
    18a4:	96 95       	lsr	r25
    18a6:	96 95       	lsr	r25
    18a8:	96 95       	lsr	r25
    18aa:	39 2f       	mov	r19, r25
    18ac:	33 0f       	add	r19, r19
    18ae:	23 2f       	mov	r18, r19
    18b0:	22 0f       	add	r18, r18
    18b2:	22 0f       	add	r18, r18
    18b4:	23 0f       	add	r18, r19
    18b6:	82 1b       	sub	r24, r18
    18b8:	80 5d       	subi	r24, 0xD0	; 208
    18ba:	81 93       	st	Z+, r24
		val /= 10;
    18bc:	89 2f       	mov	r24, r25
	} while (n<3);
    18be:	e6 17       	cp	r30, r22
    18c0:	f7 07       	cpc	r31, r23
    18c2:	69 f7       	brne	.-38     	; 0x189e <lcd_dd+0x18>

	n = 2;				// Nur 2 Stellen anzeigen
	while (n > 0)   
	{
		n--;
		lcd_char(buffer[n]);
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	0e 94 1e 0b 	call	0x163c	; 0x163c <lcd_char>
	}
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <rtc_lowlevel_read>:
	
	rtc_lowlevel_write(reg,value);
}
//-Lesen aus internem Ram des RTC-------------------------
uint8_t rtc_lowlevel_read (uint8_t reg)
{
    18dc:	cf 93       	push	r28
    18de:	c8 2f       	mov	r28, r24
    uint8_t temp;

    i2c_start();
    18e0:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
    i2c_write(RTC_ADDR_W);
    18e4:	80 ed       	ldi	r24, 0xD0	; 208
    18e6:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
    i2c_write(reg);
    18ea:	8c 2f       	mov	r24, r28
    18ec:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>

    i2c_start();  // Repeated Start
    18f0:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
		i2c_write(RTC_ADDR_R);
    18f4:	81 ed       	ldi	r24, 0xD1	; 209
    18f6:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
    temp = i2c_read(NACK);
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_read>
    1900:	c8 2f       	mov	r28, r24
    i2c_stop();
    1902:	0e 94 93 03 	call	0x726	; 0x726 <i2c_stop>
		
    return temp;
}
    1906:	8c 2f       	mov	r24, r28
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <rtc_read>:
//-Lesen der Timekeeper-Register--------------------------
uint8_t rtc_read (uint8_t reg)
{
    uint8_t temp;
		
		temp = rtc_lowlevel_read( reg );
    190c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <rtc_lowlevel_read>
		
    temp = (temp & 0x0f) + ((temp & 0x70)>>4)*10;
    1910:	38 2f       	mov	r19, r24
    1912:	3f 70       	andi	r19, 0x0F	; 15
    1914:	98 2f       	mov	r25, r24
    1916:	90 77       	andi	r25, 0x70	; 112
    1918:	96 95       	lsr	r25
    191a:	96 95       	lsr	r25
    191c:	96 95       	lsr	r25
    191e:	29 2f       	mov	r18, r25
    1920:	22 0f       	add	r18, r18
    1922:	22 0f       	add	r18, r18
    1924:	89 2f       	mov	r24, r25
    1926:	82 0f       	add	r24, r18
		
    return temp;
}
    1928:	83 0f       	add	r24, r19
    192a:	08 95       	ret

0000192c <rtc_lowlevel_write>:
		
    return temp;
}
//-Schreiben ins interne RAM des RTC----------------------
void rtc_lowlevel_write(uint8_t reg, uint8_t value)
{   
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	d8 2f       	mov	r29, r24
    1932:	c6 2f       	mov	r28, r22
   i2c_start();
    1934:	0e 94 8a 03 	call	0x714	; 0x714 <i2c_start>
   i2c_write(RTC_ADDR_W);
    1938:	80 ed       	ldi	r24, 0xD0	; 208
    193a:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
   i2c_write(reg);
    193e:	8d 2f       	mov	r24, r29
    1940:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
   
   i2c_write(value);
    1944:	8c 2f       	mov	r24, r28
    1946:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_write>
   i2c_stop();
    194a:	0e 94 93 03 	call	0x726	; 0x726 <i2c_stop>
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <rtc_init>:
#include "rtc.h"

void rtc_init(void)
{
	uint8_t temp;
  i2c_init();			   							// Zugriff auf RTC über i2C-Bus
    1954:	0e 94 81 03 	call	0x702	; 0x702 <i2c_init>
	temp = rtc_lowlevel_read(_SEC_);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <rtc_lowlevel_read>
	rtc_lowlevel_write(_SEC_,temp & 0x7F);		// ClockHalt(CH)-Bit 0 --> Clock startet
    195e:	68 2f       	mov	r22, r24
    1960:	6f 77       	andi	r22, 0x7F	; 127
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 96 0c 	call	0x192c	; 0x192c <rtc_lowlevel_write>
    1968:	08 95       	ret

0000196a <rtc_write>:
    return temp;
}
//-Schreiben der Timekeeper-Register----------------------
void rtc_write(uint8_t reg, uint8_t value)
{
	value = ((value/10)<<4) | (value%10);
    196a:	9d ec       	ldi	r25, 0xCD	; 205
    196c:	69 9f       	mul	r22, r25
    196e:	91 2d       	mov	r25, r1
    1970:	11 24       	eor	r1, r1
    1972:	96 95       	lsr	r25
    1974:	96 95       	lsr	r25
    1976:	96 95       	lsr	r25
    1978:	40 e1       	ldi	r20, 0x10	; 16
    197a:	94 9f       	mul	r25, r20
    197c:	90 01       	movw	r18, r0
    197e:	11 24       	eor	r1, r1
    1980:	99 0f       	add	r25, r25
    1982:	39 2f       	mov	r19, r25
    1984:	33 0f       	add	r19, r19
    1986:	33 0f       	add	r19, r19
    1988:	93 0f       	add	r25, r19
    198a:	69 1b       	sub	r22, r25
    198c:	62 2b       	or	r22, r18
	
	rtc_lowlevel_write(reg,value);
    198e:	0e 94 96 0c 	call	0x192c	; 0x192c <rtc_lowlevel_write>
    1992:	08 95       	ret

00001994 <__udivmodhi4>:
    1994:	aa 1b       	sub	r26, r26
    1996:	bb 1b       	sub	r27, r27
    1998:	51 e1       	ldi	r21, 0x11	; 17
    199a:	07 c0       	rjmp	.+14     	; 0x19aa <__udivmodhi4_ep>

0000199c <__udivmodhi4_loop>:
    199c:	aa 1f       	adc	r26, r26
    199e:	bb 1f       	adc	r27, r27
    19a0:	a6 17       	cp	r26, r22
    19a2:	b7 07       	cpc	r27, r23
    19a4:	10 f0       	brcs	.+4      	; 0x19aa <__udivmodhi4_ep>
    19a6:	a6 1b       	sub	r26, r22
    19a8:	b7 0b       	sbc	r27, r23

000019aa <__udivmodhi4_ep>:
    19aa:	88 1f       	adc	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	5a 95       	dec	r21
    19b0:	a9 f7       	brne	.-22     	; 0x199c <__udivmodhi4_loop>
    19b2:	80 95       	com	r24
    19b4:	90 95       	com	r25
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	08 95       	ret

000019bc <__udivmodsi4>:
    19bc:	a1 e2       	ldi	r26, 0x21	; 33
    19be:	1a 2e       	mov	r1, r26
    19c0:	aa 1b       	sub	r26, r26
    19c2:	bb 1b       	sub	r27, r27
    19c4:	fd 01       	movw	r30, r26
    19c6:	0d c0       	rjmp	.+26     	; 0x19e2 <__udivmodsi4_ep>

000019c8 <__udivmodsi4_loop>:
    19c8:	aa 1f       	adc	r26, r26
    19ca:	bb 1f       	adc	r27, r27
    19cc:	ee 1f       	adc	r30, r30
    19ce:	ff 1f       	adc	r31, r31
    19d0:	a2 17       	cp	r26, r18
    19d2:	b3 07       	cpc	r27, r19
    19d4:	e4 07       	cpc	r30, r20
    19d6:	f5 07       	cpc	r31, r21
    19d8:	20 f0       	brcs	.+8      	; 0x19e2 <__udivmodsi4_ep>
    19da:	a2 1b       	sub	r26, r18
    19dc:	b3 0b       	sbc	r27, r19
    19de:	e4 0b       	sbc	r30, r20
    19e0:	f5 0b       	sbc	r31, r21

000019e2 <__udivmodsi4_ep>:
    19e2:	66 1f       	adc	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	88 1f       	adc	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	1a 94       	dec	r1
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <__udivmodsi4_loop>
    19ee:	60 95       	com	r22
    19f0:	70 95       	com	r23
    19f2:	80 95       	com	r24
    19f4:	90 95       	com	r25
    19f6:	9b 01       	movw	r18, r22
    19f8:	ac 01       	movw	r20, r24
    19fa:	bd 01       	movw	r22, r26
    19fc:	cf 01       	movw	r24, r30
    19fe:	08 95       	ret

00001a00 <__tablejump2__>:
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	05 90       	lpm	r0, Z+
    1a06:	f4 91       	lpm	r31, Z
    1a08:	e0 2d       	mov	r30, r0
    1a0a:	09 94       	ijmp

00001a0c <__umulhisi3>:
    1a0c:	a2 9f       	mul	r26, r18
    1a0e:	b0 01       	movw	r22, r0
    1a10:	b3 9f       	mul	r27, r19
    1a12:	c0 01       	movw	r24, r0
    1a14:	a3 9f       	mul	r26, r19
    1a16:	70 0d       	add	r23, r0
    1a18:	81 1d       	adc	r24, r1
    1a1a:	11 24       	eor	r1, r1
    1a1c:	91 1d       	adc	r25, r1
    1a1e:	b2 9f       	mul	r27, r18
    1a20:	70 0d       	add	r23, r0
    1a22:	81 1d       	adc	r24, r1
    1a24:	11 24       	eor	r1, r1
    1a26:	91 1d       	adc	r25, r1
    1a28:	08 95       	ret

00001a2a <sprintf>:
    1a2a:	ae e0       	ldi	r26, 0x0E	; 14
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	eb e1       	ldi	r30, 0x1B	; 27
    1a30:	fd e0       	ldi	r31, 0x0D	; 13
    1a32:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__prologue_saves__+0x1c>
    1a36:	0d 89       	ldd	r16, Y+21	; 0x15
    1a38:	1e 89       	ldd	r17, Y+22	; 0x16
    1a3a:	86 e0       	ldi	r24, 0x06	; 6
    1a3c:	8c 83       	std	Y+4, r24	; 0x04
    1a3e:	1a 83       	std	Y+2, r17	; 0x02
    1a40:	09 83       	std	Y+1, r16	; 0x01
    1a42:	8f ef       	ldi	r24, 0xFF	; 255
    1a44:	9f e7       	ldi	r25, 0x7F	; 127
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	ae 01       	movw	r20, r28
    1a4c:	47 5e       	subi	r20, 0xE7	; 231
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	6f 89       	ldd	r22, Y+23	; 0x17
    1a52:	78 8d       	ldd	r23, Y+24	; 0x18
    1a54:	ce 01       	movw	r24, r28
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <vfprintf>
    1a5c:	ef 81       	ldd	r30, Y+7	; 0x07
    1a5e:	f8 85       	ldd	r31, Y+8	; 0x08
    1a60:	e0 0f       	add	r30, r16
    1a62:	f1 1f       	adc	r31, r17
    1a64:	10 82       	st	Z, r1
    1a66:	2e 96       	adiw	r28, 0x0e	; 14
    1a68:	e4 e0       	ldi	r30, 0x04	; 4
    1a6a:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__epilogue_restores__+0x1c>

00001a6e <vfprintf>:
    1a6e:	ab e0       	ldi	r26, 0x0B	; 11
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ed e3       	ldi	r30, 0x3D	; 61
    1a74:	fd e0       	ldi	r31, 0x0D	; 13
    1a76:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__prologue_saves__>
    1a7a:	6c 01       	movw	r12, r24
    1a7c:	7b 01       	movw	r14, r22
    1a7e:	8a 01       	movw	r16, r20
    1a80:	fc 01       	movw	r30, r24
    1a82:	17 82       	std	Z+7, r1	; 0x07
    1a84:	16 82       	std	Z+6, r1	; 0x06
    1a86:	83 81       	ldd	r24, Z+3	; 0x03
    1a88:	81 ff       	sbrs	r24, 1
    1a8a:	cc c1       	rjmp	.+920    	; 0x1e24 <vfprintf+0x3b6>
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	3c 01       	movw	r6, r24
    1a92:	f6 01       	movw	r30, r12
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	f7 01       	movw	r30, r14
    1a98:	93 fd       	sbrc	r25, 3
    1a9a:	85 91       	lpm	r24, Z+
    1a9c:	93 ff       	sbrs	r25, 3
    1a9e:	81 91       	ld	r24, Z+
    1aa0:	7f 01       	movw	r14, r30
    1aa2:	88 23       	and	r24, r24
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <vfprintf+0x3a>
    1aa6:	ba c1       	rjmp	.+884    	; 0x1e1c <vfprintf+0x3ae>
    1aa8:	85 32       	cpi	r24, 0x25	; 37
    1aaa:	39 f4       	brne	.+14     	; 0x1aba <vfprintf+0x4c>
    1aac:	93 fd       	sbrc	r25, 3
    1aae:	85 91       	lpm	r24, Z+
    1ab0:	93 ff       	sbrs	r25, 3
    1ab2:	81 91       	ld	r24, Z+
    1ab4:	7f 01       	movw	r14, r30
    1ab6:	85 32       	cpi	r24, 0x25	; 37
    1ab8:	29 f4       	brne	.+10     	; 0x1ac4 <vfprintf+0x56>
    1aba:	b6 01       	movw	r22, r12
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1ac2:	e7 cf       	rjmp	.-50     	; 0x1a92 <vfprintf+0x24>
    1ac4:	91 2c       	mov	r9, r1
    1ac6:	21 2c       	mov	r2, r1
    1ac8:	31 2c       	mov	r3, r1
    1aca:	ff e1       	ldi	r31, 0x1F	; 31
    1acc:	f3 15       	cp	r31, r3
    1ace:	d8 f0       	brcs	.+54     	; 0x1b06 <vfprintf+0x98>
    1ad0:	8b 32       	cpi	r24, 0x2B	; 43
    1ad2:	79 f0       	breq	.+30     	; 0x1af2 <vfprintf+0x84>
    1ad4:	38 f4       	brcc	.+14     	; 0x1ae4 <vfprintf+0x76>
    1ad6:	80 32       	cpi	r24, 0x20	; 32
    1ad8:	79 f0       	breq	.+30     	; 0x1af8 <vfprintf+0x8a>
    1ada:	83 32       	cpi	r24, 0x23	; 35
    1adc:	a1 f4       	brne	.+40     	; 0x1b06 <vfprintf+0x98>
    1ade:	23 2d       	mov	r18, r3
    1ae0:	20 61       	ori	r18, 0x10	; 16
    1ae2:	1d c0       	rjmp	.+58     	; 0x1b1e <vfprintf+0xb0>
    1ae4:	8d 32       	cpi	r24, 0x2D	; 45
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <vfprintf+0x92>
    1ae8:	80 33       	cpi	r24, 0x30	; 48
    1aea:	69 f4       	brne	.+26     	; 0x1b06 <vfprintf+0x98>
    1aec:	23 2d       	mov	r18, r3
    1aee:	21 60       	ori	r18, 0x01	; 1
    1af0:	16 c0       	rjmp	.+44     	; 0x1b1e <vfprintf+0xb0>
    1af2:	83 2d       	mov	r24, r3
    1af4:	82 60       	ori	r24, 0x02	; 2
    1af6:	38 2e       	mov	r3, r24
    1af8:	e3 2d       	mov	r30, r3
    1afa:	e4 60       	ori	r30, 0x04	; 4
    1afc:	3e 2e       	mov	r3, r30
    1afe:	2a c0       	rjmp	.+84     	; 0x1b54 <vfprintf+0xe6>
    1b00:	f3 2d       	mov	r31, r3
    1b02:	f8 60       	ori	r31, 0x08	; 8
    1b04:	1d c0       	rjmp	.+58     	; 0x1b40 <vfprintf+0xd2>
    1b06:	37 fc       	sbrc	r3, 7
    1b08:	2d c0       	rjmp	.+90     	; 0x1b64 <vfprintf+0xf6>
    1b0a:	20 ed       	ldi	r18, 0xD0	; 208
    1b0c:	28 0f       	add	r18, r24
    1b0e:	2a 30       	cpi	r18, 0x0A	; 10
    1b10:	40 f0       	brcs	.+16     	; 0x1b22 <vfprintf+0xb4>
    1b12:	8e 32       	cpi	r24, 0x2E	; 46
    1b14:	b9 f4       	brne	.+46     	; 0x1b44 <vfprintf+0xd6>
    1b16:	36 fc       	sbrc	r3, 6
    1b18:	81 c1       	rjmp	.+770    	; 0x1e1c <vfprintf+0x3ae>
    1b1a:	23 2d       	mov	r18, r3
    1b1c:	20 64       	ori	r18, 0x40	; 64
    1b1e:	32 2e       	mov	r3, r18
    1b20:	19 c0       	rjmp	.+50     	; 0x1b54 <vfprintf+0xe6>
    1b22:	36 fe       	sbrs	r3, 6
    1b24:	06 c0       	rjmp	.+12     	; 0x1b32 <vfprintf+0xc4>
    1b26:	8a e0       	ldi	r24, 0x0A	; 10
    1b28:	98 9e       	mul	r9, r24
    1b2a:	20 0d       	add	r18, r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	92 2e       	mov	r9, r18
    1b30:	11 c0       	rjmp	.+34     	; 0x1b54 <vfprintf+0xe6>
    1b32:	ea e0       	ldi	r30, 0x0A	; 10
    1b34:	2e 9e       	mul	r2, r30
    1b36:	20 0d       	add	r18, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	22 2e       	mov	r2, r18
    1b3c:	f3 2d       	mov	r31, r3
    1b3e:	f0 62       	ori	r31, 0x20	; 32
    1b40:	3f 2e       	mov	r3, r31
    1b42:	08 c0       	rjmp	.+16     	; 0x1b54 <vfprintf+0xe6>
    1b44:	8c 36       	cpi	r24, 0x6C	; 108
    1b46:	21 f4       	brne	.+8      	; 0x1b50 <vfprintf+0xe2>
    1b48:	83 2d       	mov	r24, r3
    1b4a:	80 68       	ori	r24, 0x80	; 128
    1b4c:	38 2e       	mov	r3, r24
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <vfprintf+0xe6>
    1b50:	88 36       	cpi	r24, 0x68	; 104
    1b52:	41 f4       	brne	.+16     	; 0x1b64 <vfprintf+0xf6>
    1b54:	f7 01       	movw	r30, r14
    1b56:	93 fd       	sbrc	r25, 3
    1b58:	85 91       	lpm	r24, Z+
    1b5a:	93 ff       	sbrs	r25, 3
    1b5c:	81 91       	ld	r24, Z+
    1b5e:	7f 01       	movw	r14, r30
    1b60:	81 11       	cpse	r24, r1
    1b62:	b3 cf       	rjmp	.-154    	; 0x1aca <vfprintf+0x5c>
    1b64:	98 2f       	mov	r25, r24
    1b66:	9f 7d       	andi	r25, 0xDF	; 223
    1b68:	95 54       	subi	r25, 0x45	; 69
    1b6a:	93 30       	cpi	r25, 0x03	; 3
    1b6c:	28 f4       	brcc	.+10     	; 0x1b78 <vfprintf+0x10a>
    1b6e:	0c 5f       	subi	r16, 0xFC	; 252
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	9f e3       	ldi	r25, 0x3F	; 63
    1b74:	99 83       	std	Y+1, r25	; 0x01
    1b76:	0d c0       	rjmp	.+26     	; 0x1b92 <vfprintf+0x124>
    1b78:	83 36       	cpi	r24, 0x63	; 99
    1b7a:	31 f0       	breq	.+12     	; 0x1b88 <vfprintf+0x11a>
    1b7c:	83 37       	cpi	r24, 0x73	; 115
    1b7e:	71 f0       	breq	.+28     	; 0x1b9c <vfprintf+0x12e>
    1b80:	83 35       	cpi	r24, 0x53	; 83
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <vfprintf+0x118>
    1b84:	59 c0       	rjmp	.+178    	; 0x1c38 <vfprintf+0x1ca>
    1b86:	21 c0       	rjmp	.+66     	; 0x1bca <vfprintf+0x15c>
    1b88:	f8 01       	movw	r30, r16
    1b8a:	80 81       	ld	r24, Z
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	0e 5f       	subi	r16, 0xFE	; 254
    1b90:	1f 4f       	sbci	r17, 0xFF	; 255
    1b92:	88 24       	eor	r8, r8
    1b94:	83 94       	inc	r8
    1b96:	91 2c       	mov	r9, r1
    1b98:	53 01       	movw	r10, r6
    1b9a:	13 c0       	rjmp	.+38     	; 0x1bc2 <vfprintf+0x154>
    1b9c:	28 01       	movw	r4, r16
    1b9e:	f2 e0       	ldi	r31, 0x02	; 2
    1ba0:	4f 0e       	add	r4, r31
    1ba2:	51 1c       	adc	r5, r1
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	a0 80       	ld	r10, Z
    1ba8:	b1 80       	ldd	r11, Z+1	; 0x01
    1baa:	36 fe       	sbrs	r3, 6
    1bac:	03 c0       	rjmp	.+6      	; 0x1bb4 <vfprintf+0x146>
    1bae:	69 2d       	mov	r22, r9
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <vfprintf+0x14a>
    1bb4:	6f ef       	ldi	r22, 0xFF	; 255
    1bb6:	7f ef       	ldi	r23, 0xFF	; 255
    1bb8:	c5 01       	movw	r24, r10
    1bba:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <strnlen>
    1bbe:	4c 01       	movw	r8, r24
    1bc0:	82 01       	movw	r16, r4
    1bc2:	f3 2d       	mov	r31, r3
    1bc4:	ff 77       	andi	r31, 0x7F	; 127
    1bc6:	3f 2e       	mov	r3, r31
    1bc8:	16 c0       	rjmp	.+44     	; 0x1bf6 <vfprintf+0x188>
    1bca:	28 01       	movw	r4, r16
    1bcc:	22 e0       	ldi	r18, 0x02	; 2
    1bce:	42 0e       	add	r4, r18
    1bd0:	51 1c       	adc	r5, r1
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	a0 80       	ld	r10, Z
    1bd6:	b1 80       	ldd	r11, Z+1	; 0x01
    1bd8:	36 fe       	sbrs	r3, 6
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <vfprintf+0x174>
    1bdc:	69 2d       	mov	r22, r9
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <vfprintf+0x178>
    1be2:	6f ef       	ldi	r22, 0xFF	; 255
    1be4:	7f ef       	ldi	r23, 0xFF	; 255
    1be6:	c5 01       	movw	r24, r10
    1be8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <strnlen_P>
    1bec:	4c 01       	movw	r8, r24
    1bee:	f3 2d       	mov	r31, r3
    1bf0:	f0 68       	ori	r31, 0x80	; 128
    1bf2:	3f 2e       	mov	r3, r31
    1bf4:	82 01       	movw	r16, r4
    1bf6:	33 fc       	sbrc	r3, 3
    1bf8:	1b c0       	rjmp	.+54     	; 0x1c30 <vfprintf+0x1c2>
    1bfa:	82 2d       	mov	r24, r2
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	88 16       	cp	r8, r24
    1c00:	99 06       	cpc	r9, r25
    1c02:	b0 f4       	brcc	.+44     	; 0x1c30 <vfprintf+0x1c2>
    1c04:	b6 01       	movw	r22, r12
    1c06:	80 e2       	ldi	r24, 0x20	; 32
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1c0e:	2a 94       	dec	r2
    1c10:	f4 cf       	rjmp	.-24     	; 0x1bfa <vfprintf+0x18c>
    1c12:	f5 01       	movw	r30, r10
    1c14:	37 fc       	sbrc	r3, 7
    1c16:	85 91       	lpm	r24, Z+
    1c18:	37 fe       	sbrs	r3, 7
    1c1a:	81 91       	ld	r24, Z+
    1c1c:	5f 01       	movw	r10, r30
    1c1e:	b6 01       	movw	r22, r12
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1c26:	21 10       	cpse	r2, r1
    1c28:	2a 94       	dec	r2
    1c2a:	21 e0       	ldi	r18, 0x01	; 1
    1c2c:	82 1a       	sub	r8, r18
    1c2e:	91 08       	sbc	r9, r1
    1c30:	81 14       	cp	r8, r1
    1c32:	91 04       	cpc	r9, r1
    1c34:	71 f7       	brne	.-36     	; 0x1c12 <vfprintf+0x1a4>
    1c36:	e8 c0       	rjmp	.+464    	; 0x1e08 <vfprintf+0x39a>
    1c38:	84 36       	cpi	r24, 0x64	; 100
    1c3a:	11 f0       	breq	.+4      	; 0x1c40 <vfprintf+0x1d2>
    1c3c:	89 36       	cpi	r24, 0x69	; 105
    1c3e:	41 f5       	brne	.+80     	; 0x1c90 <vfprintf+0x222>
    1c40:	f8 01       	movw	r30, r16
    1c42:	37 fe       	sbrs	r3, 7
    1c44:	07 c0       	rjmp	.+14     	; 0x1c54 <vfprintf+0x1e6>
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	0c 5f       	subi	r16, 0xFC	; 252
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	08 c0       	rjmp	.+16     	; 0x1c64 <vfprintf+0x1f6>
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	07 2e       	mov	r0, r23
    1c5a:	00 0c       	add	r0, r0
    1c5c:	88 0b       	sbc	r24, r24
    1c5e:	99 0b       	sbc	r25, r25
    1c60:	0e 5f       	subi	r16, 0xFE	; 254
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	f3 2d       	mov	r31, r3
    1c66:	ff 76       	andi	r31, 0x6F	; 111
    1c68:	3f 2e       	mov	r3, r31
    1c6a:	97 ff       	sbrs	r25, 7
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <vfprintf+0x212>
    1c6e:	90 95       	com	r25
    1c70:	80 95       	com	r24
    1c72:	70 95       	com	r23
    1c74:	61 95       	neg	r22
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	f0 68       	ori	r31, 0x80	; 128
    1c7e:	3f 2e       	mov	r3, r31
    1c80:	2a e0       	ldi	r18, 0x0A	; 10
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	a3 01       	movw	r20, r6
    1c86:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__ultoa_invert>
    1c8a:	88 2e       	mov	r8, r24
    1c8c:	86 18       	sub	r8, r6
    1c8e:	45 c0       	rjmp	.+138    	; 0x1d1a <vfprintf+0x2ac>
    1c90:	85 37       	cpi	r24, 0x75	; 117
    1c92:	31 f4       	brne	.+12     	; 0x1ca0 <vfprintf+0x232>
    1c94:	23 2d       	mov	r18, r3
    1c96:	2f 7e       	andi	r18, 0xEF	; 239
    1c98:	b2 2e       	mov	r11, r18
    1c9a:	2a e0       	ldi	r18, 0x0A	; 10
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	25 c0       	rjmp	.+74     	; 0x1cea <vfprintf+0x27c>
    1ca0:	93 2d       	mov	r25, r3
    1ca2:	99 7f       	andi	r25, 0xF9	; 249
    1ca4:	b9 2e       	mov	r11, r25
    1ca6:	8f 36       	cpi	r24, 0x6F	; 111
    1ca8:	c1 f0       	breq	.+48     	; 0x1cda <vfprintf+0x26c>
    1caa:	18 f4       	brcc	.+6      	; 0x1cb2 <vfprintf+0x244>
    1cac:	88 35       	cpi	r24, 0x58	; 88
    1cae:	79 f0       	breq	.+30     	; 0x1cce <vfprintf+0x260>
    1cb0:	b5 c0       	rjmp	.+362    	; 0x1e1c <vfprintf+0x3ae>
    1cb2:	80 37       	cpi	r24, 0x70	; 112
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <vfprintf+0x24e>
    1cb6:	88 37       	cpi	r24, 0x78	; 120
    1cb8:	21 f0       	breq	.+8      	; 0x1cc2 <vfprintf+0x254>
    1cba:	b0 c0       	rjmp	.+352    	; 0x1e1c <vfprintf+0x3ae>
    1cbc:	e9 2f       	mov	r30, r25
    1cbe:	e0 61       	ori	r30, 0x10	; 16
    1cc0:	be 2e       	mov	r11, r30
    1cc2:	b4 fe       	sbrs	r11, 4
    1cc4:	0d c0       	rjmp	.+26     	; 0x1ce0 <vfprintf+0x272>
    1cc6:	fb 2d       	mov	r31, r11
    1cc8:	f4 60       	ori	r31, 0x04	; 4
    1cca:	bf 2e       	mov	r11, r31
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <vfprintf+0x272>
    1cce:	34 fe       	sbrs	r3, 4
    1cd0:	0a c0       	rjmp	.+20     	; 0x1ce6 <vfprintf+0x278>
    1cd2:	29 2f       	mov	r18, r25
    1cd4:	26 60       	ori	r18, 0x06	; 6
    1cd6:	b2 2e       	mov	r11, r18
    1cd8:	06 c0       	rjmp	.+12     	; 0x1ce6 <vfprintf+0x278>
    1cda:	28 e0       	ldi	r18, 0x08	; 8
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <vfprintf+0x27c>
    1ce0:	20 e1       	ldi	r18, 0x10	; 16
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x27c>
    1ce6:	20 e1       	ldi	r18, 0x10	; 16
    1ce8:	32 e0       	ldi	r19, 0x02	; 2
    1cea:	f8 01       	movw	r30, r16
    1cec:	b7 fe       	sbrs	r11, 7
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <vfprintf+0x290>
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	0c 5f       	subi	r16, 0xFC	; 252
    1cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfc:	06 c0       	rjmp	.+12     	; 0x1d0a <vfprintf+0x29c>
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 5f       	subi	r16, 0xFE	; 254
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	a3 01       	movw	r20, r6
    1d0c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__ultoa_invert>
    1d10:	88 2e       	mov	r8, r24
    1d12:	86 18       	sub	r8, r6
    1d14:	fb 2d       	mov	r31, r11
    1d16:	ff 77       	andi	r31, 0x7F	; 127
    1d18:	3f 2e       	mov	r3, r31
    1d1a:	36 fe       	sbrs	r3, 6
    1d1c:	0d c0       	rjmp	.+26     	; 0x1d38 <vfprintf+0x2ca>
    1d1e:	23 2d       	mov	r18, r3
    1d20:	2e 7f       	andi	r18, 0xFE	; 254
    1d22:	a2 2e       	mov	r10, r18
    1d24:	89 14       	cp	r8, r9
    1d26:	58 f4       	brcc	.+22     	; 0x1d3e <vfprintf+0x2d0>
    1d28:	34 fe       	sbrs	r3, 4
    1d2a:	0b c0       	rjmp	.+22     	; 0x1d42 <vfprintf+0x2d4>
    1d2c:	32 fc       	sbrc	r3, 2
    1d2e:	09 c0       	rjmp	.+18     	; 0x1d42 <vfprintf+0x2d4>
    1d30:	83 2d       	mov	r24, r3
    1d32:	8e 7e       	andi	r24, 0xEE	; 238
    1d34:	a8 2e       	mov	r10, r24
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <vfprintf+0x2d4>
    1d38:	b8 2c       	mov	r11, r8
    1d3a:	a3 2c       	mov	r10, r3
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <vfprintf+0x2d6>
    1d3e:	b8 2c       	mov	r11, r8
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <vfprintf+0x2d6>
    1d42:	b9 2c       	mov	r11, r9
    1d44:	a4 fe       	sbrs	r10, 4
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <vfprintf+0x2f8>
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e8 0d       	add	r30, r8
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 33       	cpi	r24, 0x30	; 48
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <vfprintf+0x2ee>
    1d54:	9a 2d       	mov	r25, r10
    1d56:	99 7e       	andi	r25, 0xE9	; 233
    1d58:	a9 2e       	mov	r10, r25
    1d5a:	09 c0       	rjmp	.+18     	; 0x1d6e <vfprintf+0x300>
    1d5c:	a2 fe       	sbrs	r10, 2
    1d5e:	06 c0       	rjmp	.+12     	; 0x1d6c <vfprintf+0x2fe>
    1d60:	b3 94       	inc	r11
    1d62:	b3 94       	inc	r11
    1d64:	04 c0       	rjmp	.+8      	; 0x1d6e <vfprintf+0x300>
    1d66:	8a 2d       	mov	r24, r10
    1d68:	86 78       	andi	r24, 0x86	; 134
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <vfprintf+0x300>
    1d6c:	b3 94       	inc	r11
    1d6e:	a3 fc       	sbrc	r10, 3
    1d70:	11 c0       	rjmp	.+34     	; 0x1d94 <vfprintf+0x326>
    1d72:	a0 fe       	sbrs	r10, 0
    1d74:	06 c0       	rjmp	.+12     	; 0x1d82 <vfprintf+0x314>
    1d76:	b2 14       	cp	r11, r2
    1d78:	88 f4       	brcc	.+34     	; 0x1d9c <vfprintf+0x32e>
    1d7a:	28 0c       	add	r2, r8
    1d7c:	92 2c       	mov	r9, r2
    1d7e:	9b 18       	sub	r9, r11
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <vfprintf+0x330>
    1d82:	b2 14       	cp	r11, r2
    1d84:	60 f4       	brcc	.+24     	; 0x1d9e <vfprintf+0x330>
    1d86:	b6 01       	movw	r22, r12
    1d88:	80 e2       	ldi	r24, 0x20	; 32
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1d90:	b3 94       	inc	r11
    1d92:	f7 cf       	rjmp	.-18     	; 0x1d82 <vfprintf+0x314>
    1d94:	b2 14       	cp	r11, r2
    1d96:	18 f4       	brcc	.+6      	; 0x1d9e <vfprintf+0x330>
    1d98:	2b 18       	sub	r2, r11
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <vfprintf+0x332>
    1d9c:	98 2c       	mov	r9, r8
    1d9e:	21 2c       	mov	r2, r1
    1da0:	a4 fe       	sbrs	r10, 4
    1da2:	10 c0       	rjmp	.+32     	; 0x1dc4 <vfprintf+0x356>
    1da4:	b6 01       	movw	r22, r12
    1da6:	80 e3       	ldi	r24, 0x30	; 48
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1dae:	a2 fe       	sbrs	r10, 2
    1db0:	17 c0       	rjmp	.+46     	; 0x1de0 <vfprintf+0x372>
    1db2:	a1 fc       	sbrc	r10, 1
    1db4:	03 c0       	rjmp	.+6      	; 0x1dbc <vfprintf+0x34e>
    1db6:	88 e7       	ldi	r24, 0x78	; 120
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <vfprintf+0x352>
    1dbc:	88 e5       	ldi	r24, 0x58	; 88
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	b6 01       	movw	r22, r12
    1dc2:	0c c0       	rjmp	.+24     	; 0x1ddc <vfprintf+0x36e>
    1dc4:	8a 2d       	mov	r24, r10
    1dc6:	86 78       	andi	r24, 0x86	; 134
    1dc8:	59 f0       	breq	.+22     	; 0x1de0 <vfprintf+0x372>
    1dca:	a1 fe       	sbrs	r10, 1
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <vfprintf+0x364>
    1dce:	8b e2       	ldi	r24, 0x2B	; 43
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <vfprintf+0x366>
    1dd2:	80 e2       	ldi	r24, 0x20	; 32
    1dd4:	a7 fc       	sbrc	r10, 7
    1dd6:	8d e2       	ldi	r24, 0x2D	; 45
    1dd8:	b6 01       	movw	r22, r12
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1de0:	89 14       	cp	r8, r9
    1de2:	38 f4       	brcc	.+14     	; 0x1df2 <vfprintf+0x384>
    1de4:	b6 01       	movw	r22, r12
    1de6:	80 e3       	ldi	r24, 0x30	; 48
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1dee:	9a 94       	dec	r9
    1df0:	f7 cf       	rjmp	.-18     	; 0x1de0 <vfprintf+0x372>
    1df2:	8a 94       	dec	r8
    1df4:	f3 01       	movw	r30, r6
    1df6:	e8 0d       	add	r30, r8
    1df8:	f1 1d       	adc	r31, r1
    1dfa:	80 81       	ld	r24, Z
    1dfc:	b6 01       	movw	r22, r12
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1e04:	81 10       	cpse	r8, r1
    1e06:	f5 cf       	rjmp	.-22     	; 0x1df2 <vfprintf+0x384>
    1e08:	22 20       	and	r2, r2
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <vfprintf+0x3a0>
    1e0c:	42 ce       	rjmp	.-892    	; 0x1a92 <vfprintf+0x24>
    1e0e:	b6 01       	movw	r22, r12
    1e10:	80 e2       	ldi	r24, 0x20	; 32
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1e18:	2a 94       	dec	r2
    1e1a:	f6 cf       	rjmp	.-20     	; 0x1e08 <vfprintf+0x39a>
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	86 81       	ldd	r24, Z+6	; 0x06
    1e20:	97 81       	ldd	r25, Z+7	; 0x07
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <vfprintf+0x3ba>
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	9f ef       	ldi	r25, 0xFF	; 255
    1e28:	2b 96       	adiw	r28, 0x0b	; 11
    1e2a:	e2 e1       	ldi	r30, 0x12	; 18
    1e2c:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__epilogue_restores__>

00001e30 <strnlen_P>:
    1e30:	fc 01       	movw	r30, r24
    1e32:	05 90       	lpm	r0, Z+
    1e34:	61 50       	subi	r22, 0x01	; 1
    1e36:	70 40       	sbci	r23, 0x00	; 0
    1e38:	01 10       	cpse	r0, r1
    1e3a:	d8 f7       	brcc	.-10     	; 0x1e32 <strnlen_P+0x2>
    1e3c:	80 95       	com	r24
    1e3e:	90 95       	com	r25
    1e40:	8e 0f       	add	r24, r30
    1e42:	9f 1f       	adc	r25, r31
    1e44:	08 95       	ret

00001e46 <strnlen>:
    1e46:	fc 01       	movw	r30, r24
    1e48:	61 50       	subi	r22, 0x01	; 1
    1e4a:	70 40       	sbci	r23, 0x00	; 0
    1e4c:	01 90       	ld	r0, Z+
    1e4e:	01 10       	cpse	r0, r1
    1e50:	d8 f7       	brcc	.-10     	; 0x1e48 <strnlen+0x2>
    1e52:	80 95       	com	r24
    1e54:	90 95       	com	r25
    1e56:	8e 0f       	add	r24, r30
    1e58:	9f 1f       	adc	r25, r31
    1e5a:	08 95       	ret

00001e5c <fputc>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	fb 01       	movw	r30, r22
    1e66:	23 81       	ldd	r18, Z+3	; 0x03
    1e68:	21 fd       	sbrc	r18, 1
    1e6a:	03 c0       	rjmp	.+6      	; 0x1e72 <fputc+0x16>
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	9f ef       	ldi	r25, 0xFF	; 255
    1e70:	2c c0       	rjmp	.+88     	; 0x1eca <fputc+0x6e>
    1e72:	22 ff       	sbrs	r18, 2
    1e74:	16 c0       	rjmp	.+44     	; 0x1ea2 <fputc+0x46>
    1e76:	46 81       	ldd	r20, Z+6	; 0x06
    1e78:	57 81       	ldd	r21, Z+7	; 0x07
    1e7a:	24 81       	ldd	r18, Z+4	; 0x04
    1e7c:	35 81       	ldd	r19, Z+5	; 0x05
    1e7e:	42 17       	cp	r20, r18
    1e80:	53 07       	cpc	r21, r19
    1e82:	44 f4       	brge	.+16     	; 0x1e94 <fputc+0x38>
    1e84:	a0 81       	ld	r26, Z
    1e86:	b1 81       	ldd	r27, Z+1	; 0x01
    1e88:	9d 01       	movw	r18, r26
    1e8a:	2f 5f       	subi	r18, 0xFF	; 255
    1e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8e:	31 83       	std	Z+1, r19	; 0x01
    1e90:	20 83       	st	Z, r18
    1e92:	8c 93       	st	X, r24
    1e94:	26 81       	ldd	r18, Z+6	; 0x06
    1e96:	37 81       	ldd	r19, Z+7	; 0x07
    1e98:	2f 5f       	subi	r18, 0xFF	; 255
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	37 83       	std	Z+7, r19	; 0x07
    1e9e:	26 83       	std	Z+6, r18	; 0x06
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <fputc+0x6e>
    1ea2:	8b 01       	movw	r16, r22
    1ea4:	ec 01       	movw	r28, r24
    1ea6:	fb 01       	movw	r30, r22
    1ea8:	00 84       	ldd	r0, Z+8	; 0x08
    1eaa:	f1 85       	ldd	r31, Z+9	; 0x09
    1eac:	e0 2d       	mov	r30, r0
    1eae:	09 95       	icall
    1eb0:	89 2b       	or	r24, r25
    1eb2:	e1 f6       	brne	.-72     	; 0x1e6c <fputc+0x10>
    1eb4:	d8 01       	movw	r26, r16
    1eb6:	16 96       	adiw	r26, 0x06	; 6
    1eb8:	8d 91       	ld	r24, X+
    1eba:	9c 91       	ld	r25, X
    1ebc:	17 97       	sbiw	r26, 0x07	; 7
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	17 96       	adiw	r26, 0x07	; 7
    1ec2:	9c 93       	st	X, r25
    1ec4:	8e 93       	st	-X, r24
    1ec6:	16 97       	sbiw	r26, 0x06	; 6
    1ec8:	ce 01       	movw	r24, r28
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	08 95       	ret

00001ed4 <__ultoa_invert>:
    1ed4:	fa 01       	movw	r30, r20
    1ed6:	aa 27       	eor	r26, r26
    1ed8:	28 30       	cpi	r18, 0x08	; 8
    1eda:	51 f1       	breq	.+84     	; 0x1f30 <__ultoa_invert+0x5c>
    1edc:	20 31       	cpi	r18, 0x10	; 16
    1ede:	81 f1       	breq	.+96     	; 0x1f40 <__ultoa_invert+0x6c>
    1ee0:	e8 94       	clt
    1ee2:	6f 93       	push	r22
    1ee4:	6e 7f       	andi	r22, 0xFE	; 254
    1ee6:	6e 5f       	subi	r22, 0xFE	; 254
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	8f 4f       	sbci	r24, 0xFF	; 255
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	af 4f       	sbci	r26, 0xFF	; 255
    1ef0:	b1 e0       	ldi	r27, 0x01	; 1
    1ef2:	3e d0       	rcall	.+124    	; 0x1f70 <__ultoa_invert+0x9c>
    1ef4:	b4 e0       	ldi	r27, 0x04	; 4
    1ef6:	3c d0       	rcall	.+120    	; 0x1f70 <__ultoa_invert+0x9c>
    1ef8:	67 0f       	add	r22, r23
    1efa:	78 1f       	adc	r23, r24
    1efc:	89 1f       	adc	r24, r25
    1efe:	9a 1f       	adc	r25, r26
    1f00:	a1 1d       	adc	r26, r1
    1f02:	68 0f       	add	r22, r24
    1f04:	79 1f       	adc	r23, r25
    1f06:	8a 1f       	adc	r24, r26
    1f08:	91 1d       	adc	r25, r1
    1f0a:	a1 1d       	adc	r26, r1
    1f0c:	6a 0f       	add	r22, r26
    1f0e:	71 1d       	adc	r23, r1
    1f10:	81 1d       	adc	r24, r1
    1f12:	91 1d       	adc	r25, r1
    1f14:	a1 1d       	adc	r26, r1
    1f16:	20 d0       	rcall	.+64     	; 0x1f58 <__ultoa_invert+0x84>
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <__ultoa_invert+0x48>
    1f1a:	68 94       	set
    1f1c:	3f 91       	pop	r19
    1f1e:	2a e0       	ldi	r18, 0x0A	; 10
    1f20:	26 9f       	mul	r18, r22
    1f22:	11 24       	eor	r1, r1
    1f24:	30 19       	sub	r19, r0
    1f26:	30 5d       	subi	r19, 0xD0	; 208
    1f28:	31 93       	st	Z+, r19
    1f2a:	de f6       	brtc	.-74     	; 0x1ee2 <__ultoa_invert+0xe>
    1f2c:	cf 01       	movw	r24, r30
    1f2e:	08 95       	ret
    1f30:	46 2f       	mov	r20, r22
    1f32:	47 70       	andi	r20, 0x07	; 7
    1f34:	40 5d       	subi	r20, 0xD0	; 208
    1f36:	41 93       	st	Z+, r20
    1f38:	b3 e0       	ldi	r27, 0x03	; 3
    1f3a:	0f d0       	rcall	.+30     	; 0x1f5a <__ultoa_invert+0x86>
    1f3c:	c9 f7       	brne	.-14     	; 0x1f30 <__ultoa_invert+0x5c>
    1f3e:	f6 cf       	rjmp	.-20     	; 0x1f2c <__ultoa_invert+0x58>
    1f40:	46 2f       	mov	r20, r22
    1f42:	4f 70       	andi	r20, 0x0F	; 15
    1f44:	40 5d       	subi	r20, 0xD0	; 208
    1f46:	4a 33       	cpi	r20, 0x3A	; 58
    1f48:	18 f0       	brcs	.+6      	; 0x1f50 <__ultoa_invert+0x7c>
    1f4a:	49 5d       	subi	r20, 0xD9	; 217
    1f4c:	31 fd       	sbrc	r19, 1
    1f4e:	40 52       	subi	r20, 0x20	; 32
    1f50:	41 93       	st	Z+, r20
    1f52:	02 d0       	rcall	.+4      	; 0x1f58 <__ultoa_invert+0x84>
    1f54:	a9 f7       	brne	.-22     	; 0x1f40 <__ultoa_invert+0x6c>
    1f56:	ea cf       	rjmp	.-44     	; 0x1f2c <__ultoa_invert+0x58>
    1f58:	b4 e0       	ldi	r27, 0x04	; 4
    1f5a:	a6 95       	lsr	r26
    1f5c:	97 95       	ror	r25
    1f5e:	87 95       	ror	r24
    1f60:	77 95       	ror	r23
    1f62:	67 95       	ror	r22
    1f64:	ba 95       	dec	r27
    1f66:	c9 f7       	brne	.-14     	; 0x1f5a <__ultoa_invert+0x86>
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	61 05       	cpc	r22, r1
    1f6c:	71 05       	cpc	r23, r1
    1f6e:	08 95       	ret
    1f70:	9b 01       	movw	r18, r22
    1f72:	ac 01       	movw	r20, r24
    1f74:	0a 2e       	mov	r0, r26
    1f76:	06 94       	lsr	r0
    1f78:	57 95       	ror	r21
    1f7a:	47 95       	ror	r20
    1f7c:	37 95       	ror	r19
    1f7e:	27 95       	ror	r18
    1f80:	ba 95       	dec	r27
    1f82:	c9 f7       	brne	.-14     	; 0x1f76 <__ultoa_invert+0xa2>
    1f84:	62 0f       	add	r22, r18
    1f86:	73 1f       	adc	r23, r19
    1f88:	84 1f       	adc	r24, r20
    1f8a:	95 1f       	adc	r25, r21
    1f8c:	a0 1d       	adc	r26, r0
    1f8e:	08 95       	ret

00001f90 <__prologue_saves__>:
    1f90:	2f 92       	push	r2
    1f92:	3f 92       	push	r3
    1f94:	4f 92       	push	r4
    1f96:	5f 92       	push	r5
    1f98:	6f 92       	push	r6
    1f9a:	7f 92       	push	r7
    1f9c:	8f 92       	push	r8
    1f9e:	9f 92       	push	r9
    1fa0:	af 92       	push	r10
    1fa2:	bf 92       	push	r11
    1fa4:	cf 92       	push	r12
    1fa6:	df 92       	push	r13
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	ca 1b       	sub	r28, r26
    1fba:	db 0b       	sbc	r29, r27
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	09 94       	ijmp

00001fc8 <__epilogue_restores__>:
    1fc8:	2a 88       	ldd	r2, Y+18	; 0x12
    1fca:	39 88       	ldd	r3, Y+17	; 0x11
    1fcc:	48 88       	ldd	r4, Y+16	; 0x10
    1fce:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fda:	b9 84       	ldd	r11, Y+9	; 0x09
    1fdc:	c8 84       	ldd	r12, Y+8	; 0x08
    1fde:	df 80       	ldd	r13, Y+7	; 0x07
    1fe0:	ee 80       	ldd	r14, Y+6	; 0x06
    1fe2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fe4:	0c 81       	ldd	r16, Y+4	; 0x04
    1fe6:	1b 81       	ldd	r17, Y+3	; 0x03
    1fe8:	aa 81       	ldd	r26, Y+2	; 0x02
    1fea:	b9 81       	ldd	r27, Y+1	; 0x01
    1fec:	ce 0f       	add	r28, r30
    1fee:	d1 1d       	adc	r29, r1
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	ed 01       	movw	r28, r26
    1ffc:	08 95       	ret

00001ffe <_exit>:
    1ffe:	f8 94       	cli

00002000 <__stop_program>:
    2000:	ff cf       	rjmp	.-2      	; 0x2000 <__stop_program>

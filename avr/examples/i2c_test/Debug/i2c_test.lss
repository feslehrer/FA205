
i2c_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000042a  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cad  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fb  00000000  00000000  00001319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000973  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ec  00000000  00000000  00002188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aea  00000000  00000000  000027f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000032dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  8e:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_init>:
// *****************************************************************************************

// ****** Initialiserung I2C-Bus **********************************************
void i2c_init (void)
{
	TWSR &= ~((1<<TWPS0)|(1<<TWPS1));	// Prescaler = 1
  96:	e9 eb       	ldi	r30, 0xB9	; 185
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8c 7f       	andi	r24, 0xFC	; 252
  9e:	80 83       	st	Z, r24
	TWBR = ((F_CPU / _I2C_FREQUENZ_) - 16) / 2;
  a0:	80 ec       	ldi	r24, 0xC0	; 192
  a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  a6:	08 95       	ret

000000a8 <i2c_start>:

// ****** Startbedingung I2C-Bus **********************************************
void i2c_start (void)
{
	/*writing a one to TWINT clears it, TWSTA=Start, TWEN=TWI-enable*/
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// Control Register
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	/*wait, until start condition has been sent --> ACK*/
	while (!(TWCR & (1<<TWINT)));
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 23       	and	r24, r24
  b6:	ec f7       	brge	.-6      	; 0xb2 <i2c_start+0xa>
}
  b8:	08 95       	ret

000000ba <i2c_stop>:

//****** Stoppbedingung I2C-Bus ***********************************************************
void i2c_stop (void)
{
	/*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  ba:	84 e9       	ldi	r24, 0x94	; 148
  bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  c0:	08 95       	ret

000000c2 <i2c_write>:
// * Byte ausgeben an I2C-Bus , Rückgabewert = ack = ACK/NACK
// ****************************************************************************************
uint8_t i2c_write (uint8_t byte)
{
	/*TWDR contains byte to send*/
	TWDR = byte;
  c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	/*send content of TWDR*/
	TWCR = (1<<TWINT) | (1<<TWEN);
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	/*wait, until byte has been sent --> ACK*/
	while (!(TWCR & (1<<TWINT)));
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <i2c_write+0xe>
	// Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
	if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
  d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  da:	88 7f       	andi	r24, 0xF8	; 248
  dc:	88 31       	cpi	r24, 0x18	; 24
  de:	91 f0       	breq	.+36     	; 0x104 <i2c_write+0x42>
  e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e4:	88 7f       	andi	r24, 0xF8	; 248
  e6:	88 32       	cpi	r24, 0x28	; 40
  e8:	79 f0       	breq	.+30     	; 0x108 <i2c_write+0x46>
	if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
  ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ee:	88 7f       	andi	r24, 0xF8	; 248
  f0:	80 32       	cpi	r24, 0x20	; 32
  f2:	61 f0       	breq	.+24     	; 0x10c <i2c_write+0x4a>
  f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	/*send content of TWDR*/
	TWCR = (1<<TWINT) | (1<<TWEN);
	/*wait, until byte has been sent --> ACK*/
	while (!(TWCR & (1<<TWINT)));
	// Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
	if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 33       	cpi	r25, 0x30	; 48
  fe:	39 f0       	breq	.+14     	; 0x10e <i2c_write+0x4c>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
	if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
 10c:	81 e0       	ldi	r24, 0x01	; 1
	return 0;	//Status Register
}
 10e:	08 95       	ret

00000110 <i2c_read>:
//*****************************************************************************************
// * Byte einlesen vom I2C-Bus.
// ****************************************************************************************
uint8_t i2c_read (uint8_t ack)
{
	if (ack == ACK)
 110:	81 11       	cpse	r24, r1
 112:	04 c0       	rjmp	.+8      	; 0x11c <i2c_read+0xc>
		/*send content of TWDR; TWEA = enable ACK*/
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 114:	84 ec       	ldi	r24, 0xC4	; 196
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <i2c_read+0x12>
	else 
		/*send content of TWDR; NACK*/
		TWCR = (1<<TWINT) | (1<<TWEN);
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	/*wait, until byte has been received --> ACK*/
	while (!(TWCR & (1<<TWINT)));
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read+0x16>
	return TWDR;
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 130:	08 95       	ret

00000132 <delay_100us>:

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	69 f0       	breq	.+26     	; 0x150 <delay_100us+0x1e>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	ef e8       	ldi	r30, 0x8F	; 143
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <delay_100us+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <delay_100us+0x12>
 144:	00 00       	nop
	{
		_delay_us(100);
		n++;
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
 14a:	82 17       	cp	r24, r18
 14c:	93 07       	cpc	r25, r19
 14e:	a9 f7       	brne	.-22     	; 0x13a <delay_100us+0x8>
 150:	08 95       	ret

00000152 <delay_ms>:
		n++;
	}
}

void delay_ms( uint16_t millisekunden)
{
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	uint16_t n = 0;
	
	while(n < millisekunden)
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	59 f0       	breq	.+22     	; 0x174 <delay_ms+0x22>
 15e:	8c 01       	movw	r16, r24
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_100us(10);
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 99 00 	call	0x132	; 0x132 <delay_100us>
		n++;
 16c:	21 96       	adiw	r28, 0x01	; 1

void delay_ms( uint16_t millisekunden)
{
	uint16_t n = 0;
	
	while(n < millisekunden)
 16e:	0c 17       	cp	r16, r28
 170:	1d 07       	cpc	r17, r29
 172:	c1 f7       	brne	.-16     	; 0x164 <delay_ms+0x12>
	{
		delay_100us(10);
		n++;
	}
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <setup>:

// Funktionsdefinitionen
void setup (void)
{
  /* Initialisierungen */
  lcd_init();
 17e:	0e 94 41 01 	call	0x282	; 0x282 <lcd_init>
  i2c_init();
 182:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_init>
  
  lcd_clear();
 186:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_clear>
  lcd_setcursor(1,1);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_setcursor>
  lcd_print("**LM75**");
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_print>
 19a:	08 95       	ret

0000019c <lm75_read>:
  }
}

// Einlesen des Temperaturwerts 
uint16_t lm75_read(void)
{
 19c:	cf 93       	push	r28
  uint16_t msb,lsb;
  
  i2c_start();                // Startbedingung
 19e:	0e 94 54 00 	call	0xa8	; 0xa8 <i2c_start>
  i2c_write(ADDR_W);          // Schreibwunsch an LM75 senden
 1a2:	80 e9       	ldi	r24, 0x90	; 144
 1a4:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_write>
  i2c_write(0x00);            // Pointerbyte = 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_write>
  i2c_stop();
 1ae:	0e 94 5d 00 	call	0xba	; 0xba <i2c_stop>
  
  i2c_start();
 1b2:	0e 94 54 00 	call	0xa8	; 0xa8 <i2c_start>
  i2c_write(ADDR_R);          // Lesewunsch an LM75 senden
 1b6:	81 e9       	ldi	r24, 0x91	; 145
 1b8:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_write>
  msb = i2c_read(ACK);        // MSB lesen und weiteren Wert anfordern.
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 88 00 	call	0x110	; 0x110 <i2c_read>
 1c2:	c8 2f       	mov	r28, r24
  lsb = i2c_read(NACK);       // LSB lesen
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <i2c_read>
  i2c_stop();                 // Stoppbedingung
 1ca:	0e 94 5d 00 	call	0xba	; 0xba <i2c_stop>
  
  return msb;                 // Nur MSB (Genauigkeit: +/- 1°C)
}
 1ce:	8c 2f       	mov	r24, r28
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <main>:
  lcd_print("**LM75**");
}

// Funktion main()
int16_t main(void)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	1f 92       	push	r1
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t   wert;
  
  setup();
 1e0:	0e 94 bf 00 	call	0x17e	; 0x17e <setup>
  
  while(1)
  {
    wert = lm75_read();
 1e4:	0e 94 ce 00 	call	0x19c	; 0x19c <lm75_read>
 1e8:	89 83       	std	Y+1, r24	; 0x01
    lcd_setcursor(2,2);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_setcursor>
	
	if (wert > 0x7f)		// Temperatur negativ ?
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	88 23       	and	r24, r24
 1f6:	4c f4       	brge	.+18     	; 0x20a <main+0x34>
	{
		wert = ~wert;
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	80 95       	com	r24
 1fc:	89 83       	std	Y+1, r24	; 0x01
		wert++;				// 2er-Komplement
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	89 83       	std	Y+1, r24	; 0x01
		lcd_char('-');		// Minuszeichen
 204:	8d e2       	ldi	r24, 0x2D	; 45
 206:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_char>
	}		
    lcd_byte(wert);
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_byte>
    lcd_print("°C");
 210:	89 e0       	ldi	r24, 0x09	; 9
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_print>

    delay_ms(100);
 218:	84 e6       	ldi	r24, 0x64	; 100
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 a9 00 	call	0x152	; 0x152 <delay_ms>
  }
 220:	e1 cf       	rjmp	.-62     	; 0x1e4 <main+0xe>

00000222 <lcd_waitwhilebusy>:

   LCD_PORT_RW &= ~(1<<RW);                 // R/W(B.0) = 0  (Schreiben)
   LCD_PORT_RS |=  (1<<RS);                 // RS = 1   (Lesen Daten)
   LCD_PORT_CFG  |=  LCD_PORT_MASK;         // D.7-D.4 wieder als Ausgang 
  #else  // Wenn kein Busy-Flag abgefragt wird!!
   delay_100us(LCD_WAIT);
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 99 00 	call	0x132	; 0x132 <delay_100us>
 22a:	08 95       	ret

0000022c <lowlevel_write>:
  data |=  (1<<EN);             // EN = 1
  port_out(data);
  data &= ~(1<<EN);             // EN = 0
  port_out(data);
#else
  LCD_PORT &= ~LCD_PORT_MASK;
 22c:	9b b1       	in	r25, 0x0b	; 11
 22e:	9f 70       	andi	r25, 0x0F	; 15
 230:	9b b9       	out	0x0b, r25	; 11
  LCD_PORT |= data;
 232:	9b b1       	in	r25, 0x0b	; 11
 234:	89 2b       	or	r24, r25
 236:	8b b9       	out	0x0b, r24	; 11
  //delay_100us(2);
  LCD_PORT_EN |= (1<<EN);       // EN = 1
 238:	28 9a       	sbi	0x05, 0	; 5
  LCD_PORT_EN &= ~(1<<EN);      // EN = 0
 23a:	28 98       	cbi	0x05, 0	; 5
 23c:	08 95       	ret

0000023e <lcd_befehl>:
#define MSB_SHIFT 4
#define LSB_SHIFT 0
#endif

void lcd_befehl (uint8_t befehl)
{
 23e:	cf 93       	push	r28
 240:	c8 2f       	mov	r28, r24
   uint8_t temp;

   lcd_waitwhilebusy();                     // Warten bis LCD bereit!
 242:	0e 94 11 01 	call	0x222	; 0x222 <lcd_waitwhilebusy>
   lowlevel_write(temp);
  #else
   temp = befehl;
   temp &=  0xf0;                           // High-Nibble
   temp >>= MSB_SHIFT;
   LCD_PORT_RS &= ~(1<<RS);                  // Data-Register On
 246:	29 98       	cbi	0x05, 1	; 5
   lowlevel_write(temp);
 248:	8c 2f       	mov	r24, r28
 24a:	80 7f       	andi	r24, 0xF0	; 240
 24c:	0e 94 16 01 	call	0x22c	; 0x22c <lowlevel_write>

   temp = befehl;                           // Low-Nibble
   temp &= 0x0f;
   temp <<= LSB_SHIFT;
   lowlevel_write(temp);
 250:	8c 2f       	mov	r24, r28
 252:	82 95       	swap	r24
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	0e 94 16 01 	call	0x22c	; 0x22c <lowlevel_write>
  #endif
}
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <lcd_daten>:
/*****************************************************************************************
 * 	Gibt das Byte 'daten' ans LCD-Display im 4Bit-Modus aus.
 *    Entweder Busy-Flag des LCD abfragen oder Zeitverzögerung verwenden        
 *****************************************************************************************/
void lcd_daten(uint8_t daten)
{
 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
  uint8_t temp;
	
  lcd_waitwhilebusy();                     // Warten bis LCD bereit!
 262:	0e 94 11 01 	call	0x222	; 0x222 <lcd_waitwhilebusy>
   lowlevel_write(temp);
  #else
   temp = daten;
   temp &=  0xf0;                           // High-Nibble
   temp >>= MSB_SHIFT;
   LCD_PORT_RS |= (1<<RS);                     // Data-Register On
 266:	29 9a       	sbi	0x05, 1	; 5
   lowlevel_write(temp);
 268:	8c 2f       	mov	r24, r28
 26a:	80 7f       	andi	r24, 0xF0	; 240
 26c:	0e 94 16 01 	call	0x22c	; 0x22c <lowlevel_write>

   temp = daten;                            // Low-Nibbel
   temp &= 0x0f;
   temp <<= LSB_SHIFT;
   LCD_PORT_RS |= (1<<RS);                  // Data-Register On
 270:	29 9a       	sbi	0x05, 1	; 5
   lowlevel_write(temp);
 272:	8c 2f       	mov	r24, r28
 274:	82 95       	swap	r24
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	0e 94 16 01 	call	0x22c	; 0x22c <lowlevel_write>
   LCD_PORT_RS &= ~(1<<RS);                 // Data-Register Off
 27c:	29 98       	cbi	0x05, 1	; 5
  #endif
}
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <lcd_init>:
   temp = 0x20;
   temp &= ~(1<<RS);                       // RS = 0  (Befehl)
   temp &= ~(1<<RW);                       // R/W = 0 (schreiben!!)
   lowlevel_write(temp);
  #else  // Display im 4-Bit-Mode am ATmega Port
   LCD_PORT_CFG     |=   LCD_PORT_MASK;    // D.7-D.4 als Ausgang (4 Datenleitungen)
 282:	8a b1       	in	r24, 0x0a	; 10
 284:	80 6f       	ori	r24, 0xF0	; 240
 286:	8a b9       	out	0x0a, r24	; 10
   LCD_PORT_EN_CFG  |=  (1<<EN);           // D.3 als Ausgang ( = 1)
 288:	20 9a       	sbi	0x04, 0	; 4
   LCD_PORT_RS_CFG  |=  (1<<RS);           // D.2 als Ausgang
 28a:	21 9a       	sbi	0x04, 1	; 4
   #ifdef LCD_BUSY
    LCD_PORT_RW_CFG  |=  (1<<RW);          // B.0 als Ausgang
    LCD_PORT_RW &= ~(1<<RW);               // R/W(B.0) = 0 (schreiben!!)
   #endif
   delay_ms(LCD_WAIT*6);
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 a9 00 	call	0x152	; 0x152 <delay_ms>
   temp = 0x30;
   temp &=  0xf0;                          // High-Nibble
   temp >>= MSB_SHIFT;
   lowlevel_write(temp);                   // 1. aufwecken!
 294:	80 e3       	ldi	r24, 0x30	; 48
 296:	0e 94 16 01 	call	0x22c	; 0x22c <lowlevel_write>
  
   delay_ms(LCD_WAIT*2);
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 a9 00 	call	0x152	; 0x152 <delay_ms>
   lowlevel_write(temp);                   // 2. aufwecken!
 2a2:	80 e3       	ldi	r24, 0x30	; 48
 2a4:	0e 94 16 01 	call	0x22c	; 0x22c <lowlevel_write>
  
   delay_ms(LCD_WAIT);
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 a9 00 	call	0x152	; 0x152 <delay_ms>
   lowlevel_write(temp);                   // 3. aufwecken!
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	0e 94 16 01 	call	0x22c	; 0x22c <lowlevel_write>

   delay_ms(LCD_WAIT);
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 a9 00 	call	0x152	; 0x152 <delay_ms>
   temp = 0x20;
   temp &=  0xf0;
   temp >>= MSB_SHIFT;
   lowlevel_write(temp);
 2be:	80 e2       	ldi	r24, 0x20	; 32
 2c0:	0e 94 16 01 	call	0x22c	; 0x22c <lowlevel_write>
  #endif
  // Ab hier Busy-Flag Abfrage möglich	
  lcd_befehl (0x28);                       // Function set 4 bits  													
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_befehl>
  lcd_befehl (CURSOR);                     // Display AN, Cursor AUS													
 2ca:	8c e0       	ldi	r24, 0x0C	; 12
 2cc:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_befehl>
  lcd_befehl (DISPLAY);                    // Not Shifted Display, Increment				
 2d0:	84 e1       	ldi	r24, 0x14	; 20
 2d2:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_befehl>
 2d6:	08 95       	ret

000002d8 <lcd_clear>:

// Ab hier sind alle Funktionen Controllerunabhängig!!!!
/******************************************************************************************
 * Display löschen	                                                                                                      
 ******************************************************************************************/
void lcd_clear (void)     { lcd_befehl(0x01); }
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_befehl>
 2de:	08 95       	ret

000002e0 <lcd_setcursor>:
 ******************************************************************************************/
void lcd_setcursor (uint8_t zeile, uint8_t spalte)
{
  uint8_t position;
	
  switch(zeile)
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <lcd_setcursor+0x10>
 2e4:	84 30       	cpi	r24, 0x04	; 4
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <lcd_setcursor+0x14>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	31 f4       	brne	.+12     	; 0x2f8 <lcd_setcursor+0x18>
  {
    case 1:   position = ZEILE1; break;
    case 2:   position = ZEILE2; break;	
 2ec:	90 e4       	ldi	r25, 0x40	; 64
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <lcd_setcursor+0x1a>
    case 3:   position = ZEILE3; break;
 2f0:	90 e1       	ldi	r25, 0x10	; 16
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <lcd_setcursor+0x1a>
    case 4:   position = ZEILE4; break;
 2f4:	90 e5       	ldi	r25, 0x50	; 80
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <lcd_setcursor+0x1a>
{
  uint8_t position;
	
  switch(zeile)
  {
    case 1:   position = ZEILE1; break;
 2f8:	90 e0       	ldi	r25, 0x00	; 0
    default:  position = ZEILE1; break;		
  }
	
  position += (spalte-1);
		
  lcd_befehl ( position | 0x80 );          // 0x80 = Kennung für DD RAM address set
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	86 0f       	add	r24, r22
 2fe:	89 0f       	add	r24, r25
 300:	80 68       	ori	r24, 0x80	; 128
 302:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_befehl>
 306:	08 95       	ret

00000308 <lcd_lookup>:
Eingang:      ASCII-Code
Ausgang:      Display-Code
==============================================================*/
uint8_t lcd_lookup(uint8_t ascii)
{
  switch (ascii)
 308:	86 3d       	cpi	r24, 0xD6	; 214
 30a:	09 f1       	breq	.+66     	; 0x34e <lcd_lookup+0x46>
 30c:	68 f4       	brcc	.+26     	; 0x328 <lcd_lookup+0x20>
 30e:	80 3b       	cpi	r24, 0xB0	; 176
 310:	51 f1       	breq	.+84     	; 0x366 <lcd_lookup+0x5e>
 312:	28 f4       	brcc	.+10     	; 0x31e <lcd_lookup+0x16>
 314:	8c 35       	cpi	r24, 0x5C	; 92
 316:	19 f1       	breq	.+70     	; 0x35e <lcd_lookup+0x56>
 318:	80 38       	cpi	r24, 0x80	; 128
 31a:	19 f1       	breq	.+70     	; 0x362 <lcd_lookup+0x5a>
 31c:	08 95       	ret
 31e:	85 3b       	cpi	r24, 0xB5	; 181
 320:	e1 f0       	breq	.+56     	; 0x35a <lcd_lookup+0x52>
 322:	84 3c       	cpi	r24, 0xC4	; 196
 324:	71 f0       	breq	.+28     	; 0x342 <lcd_lookup+0x3a>
 326:	08 95       	ret
 328:	84 3e       	cpi	r24, 0xE4	; 228
 32a:	59 f0       	breq	.+22     	; 0x342 <lcd_lookup+0x3a>
 32c:	28 f4       	brcc	.+10     	; 0x338 <lcd_lookup+0x30>
 32e:	8c 3d       	cpi	r24, 0xDC	; 220
 330:	81 f0       	breq	.+32     	; 0x352 <lcd_lookup+0x4a>
 332:	8f 3d       	cpi	r24, 0xDF	; 223
 334:	81 f0       	breq	.+32     	; 0x356 <lcd_lookup+0x4e>
 336:	08 95       	ret
 338:	86 3f       	cpi	r24, 0xF6	; 246
 33a:	29 f0       	breq	.+10     	; 0x346 <lcd_lookup+0x3e>
 33c:	8c 3f       	cpi	r24, 0xFC	; 252
 33e:	29 f0       	breq	.+10     	; 0x34a <lcd_lookup+0x42>
 340:	08 95       	ret
  {
    case 0xb0: return 0xdf;  // '°'
    case 'ä':  return 0xe1;
 342:	81 ee       	ldi	r24, 0xE1	; 225
 344:	08 95       	ret
    case 'ö':  return 0xef;
 346:	8f ee       	ldi	r24, 0xEF	; 239
 348:	08 95       	ret
    case 'ü':  return 0xf5;
 34a:	85 ef       	ldi	r24, 0xF5	; 245
 34c:	08 95       	ret
    case 'Ä':  return 0xe1;
    case 'Ö':  return 0xef;
 34e:	8f ee       	ldi	r24, 0xEF	; 239
 350:	08 95       	ret
    case 'Ü':  return 0xf5;
 352:	85 ef       	ldi	r24, 0xF5	; 245
 354:	08 95       	ret
    case 'ß':  return 0xe2;
 356:	82 ee       	ldi	r24, 0xE2	; 226
 358:	08 95       	ret
    case 'µ':  return 0xe4;
 35a:	84 ee       	ldi	r24, 0xE4	; 228
 35c:	08 95       	ret
    case '\\': return 0xa4;
 35e:	84 ea       	ldi	r24, 0xA4	; 164
 360:	08 95       	ret
    case '':  return 0xd3;
 362:	83 ed       	ldi	r24, 0xD3	; 211
 364:	08 95       	ret
==============================================================*/
uint8_t lcd_lookup(uint8_t ascii)
{
  switch (ascii)
  {
    case 0xb0: return 0xdf;  // '°'
 366:	8f ed       	ldi	r24, 0xDF	; 223
    case 'µ':  return 0xe4;
    case '\\': return 0xa4;
    case '':  return 0xd3;
  }
  return ascii;
}
 368:	08 95       	ret

0000036a <lcd_char>:
 * 	Ausgabe eines Zeichens an das LCD-Display                                                          
 *  Entweder Busy-Flag des LCD abfragen oder Zeitverzögerung verwenden         
 ******************************************************************************************/
void lcd_char (uint8_t zeichen)
{
  zeichen = lcd_lookup(zeichen);           // Umlaute und Sonderzeichen ersetzen!
 36a:	0e 94 84 01 	call	0x308	; 0x308 <lcd_lookup>
  lcd_daten(zeichen);
 36e:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_daten>
 372:	08 95       	ret

00000374 <lcd_print>:

/*****************************************************************************************
 * \0-terminierten Text an das LCD-Display ausgeben. 
 ******************************************************************************************/
void lcd_print (uint8_t text[])
{				
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
  while (*text != '\0')                   // Text													
 37a:	88 81       	ld	r24, Y
 37c:	88 23       	and	r24, r24
 37e:	31 f0       	breq	.+12     	; 0x38c <lcd_print+0x18>
 380:	21 96       	adiw	r28, 0x01	; 1
    lcd_char (*text++);                   // zeichenweise ausgeben 	
 382:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_char>
/*****************************************************************************************
 * \0-terminierten Text an das LCD-Display ausgeben. 
 ******************************************************************************************/
void lcd_print (uint8_t text[])
{				
  while (*text != '\0')                   // Text													
 386:	89 91       	ld	r24, Y+
 388:	81 11       	cpse	r24, r1
 38a:	fb cf       	rjmp	.-10     	; 0x382 <lcd_print+0xe>
    lcd_char (*text++);                   // zeichenweise ausgeben 	
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <lcd_byte>:
                 Display. Führende Nullen werden zu blank.
Eingang:         Byte
Ausgang:         ---
==============================================================*/
void lcd_byte(uint8_t val)
{
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	00 d0       	rcall	.+0      	; 0x39a <lcd_byte+0x8>
 39a:	1f 92       	push	r1
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
  uint8_t buffer[3];
  uint8_t n = 0;	
 3a0:	20 e0       	ldi	r18, 0x00	; 0
	
  do
  {
    buffer[n++] = val%10 + '0';
 3a2:	5d ec       	ldi	r21, 0xCD	; 205
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	92 0f       	add	r25, r18
 3a8:	e1 e0       	ldi	r30, 0x01	; 1
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	ec 0f       	add	r30, r28
 3ae:	fd 1f       	adc	r31, r29
 3b0:	e2 0f       	add	r30, r18
 3b2:	f1 1d       	adc	r31, r1
 3b4:	85 9f       	mul	r24, r21
 3b6:	21 2d       	mov	r18, r1
 3b8:	11 24       	eor	r1, r1
 3ba:	26 95       	lsr	r18
 3bc:	26 95       	lsr	r18
 3be:	26 95       	lsr	r18
 3c0:	42 2f       	mov	r20, r18
 3c2:	44 0f       	add	r20, r20
 3c4:	34 2f       	mov	r19, r20
 3c6:	33 0f       	add	r19, r19
 3c8:	33 0f       	add	r19, r19
 3ca:	34 0f       	add	r19, r20
 3cc:	83 1b       	sub	r24, r19
 3ce:	80 5d       	subi	r24, 0xD0	; 208
 3d0:	80 83       	st	Z, r24
  } while ((val /= 10) > 0);
 3d2:	82 2f       	mov	r24, r18
  uint8_t buffer[3];
  uint8_t n = 0;	
	
  do
  {
    buffer[n++] = val%10 + '0';
 3d4:	29 2f       	mov	r18, r25
  } while ((val /= 10) > 0);
 3d6:	81 11       	cpse	r24, r1
 3d8:	e5 cf       	rjmp	.-54     	; 0x3a4 <lcd_byte+0x12>
				
  while (n<3)                             // Rest von buffer mit blank füllen
 3da:	93 30       	cpi	r25, 0x03	; 3
 3dc:	70 f4       	brcc	.+28     	; 0x3fa <lcd_byte+0x68>
  {
    buffer[n++] = ' ';					
 3de:	80 e2       	ldi	r24, 0x20	; 32
 3e0:	11 e0       	ldi	r17, 0x01	; 1
 3e2:	19 0f       	add	r17, r25
 3e4:	e1 e0       	ldi	r30, 0x01	; 1
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ec 0f       	add	r30, r28
 3ea:	fd 1f       	adc	r31, r29
 3ec:	e9 0f       	add	r30, r25
 3ee:	f1 1d       	adc	r31, r1
 3f0:	80 83       	st	Z, r24
 3f2:	91 2f       	mov	r25, r17
  do
  {
    buffer[n++] = val%10 + '0';
  } while ((val /= 10) > 0);
				
  while (n<3)                             // Rest von buffer mit blank füllen
 3f4:	13 30       	cpi	r17, 0x03	; 3
 3f6:	a1 f7       	brne	.-24     	; 0x3e0 <lcd_byte+0x4e>
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__FUSE_REGION_LENGTH__>
  {
    buffer[n++] = ' ';					
  }

  while (n > 0)                           // Ausgabe auf das Display (umgekehrt)
 3fa:	99 23       	and	r25, r25
 3fc:	69 f0       	breq	.+26     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
  uint8_t buffer[3];
  uint8_t n = 0;	
	
  do
  {
    buffer[n++] = val%10 + '0';
 3fe:	19 2f       	mov	r17, r25
    buffer[n++] = ' ';					
  }

  while (n > 0)                           // Ausgabe auf das Display (umgekehrt)
  {
    n--;
 400:	11 50       	subi	r17, 0x01	; 1
    lcd_char(buffer[n]);
 402:	e1 e0       	ldi	r30, 0x01	; 1
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ec 0f       	add	r30, r28
 408:	fd 1f       	adc	r31, r29
 40a:	e1 0f       	add	r30, r17
 40c:	f1 1d       	adc	r31, r1
 40e:	80 81       	ld	r24, Z
 410:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_char>
  while (n<3)                             // Rest von buffer mit blank füllen
  {
    buffer[n++] = ' ';					
  }

  while (n > 0)                           // Ausgabe auf das Display (umgekehrt)
 414:	11 11       	cpse	r17, r1
 416:	f4 cf       	rjmp	.-24     	; 0x400 <__FUSE_REGION_LENGTH__>
  {
    n--;
    lcd_char(buffer[n]);
  }
}
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>

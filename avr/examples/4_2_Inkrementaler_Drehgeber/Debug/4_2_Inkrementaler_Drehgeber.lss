
4_2_Inkrementaler_Drehgeber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000087c  00000910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800112  00800112  00000922  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024e1  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f31  00000000  00000000  000031dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001764  00000000  00000000  0000410e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000924  00000000  00000000  00005874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009bc  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001efd  00000000  00000000  00006b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  00008a51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_1>
   8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <main>
  9e:	0c 94 3c 04 	jmp	0x878	; 0x878 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	#ifdef _ATMEGA328_
		#ifdef _ATMEGA328PB_
		  TWSR0 &= ~((1<<TWPS0)|(1<<TWPS1));	// Prescaler = 1
		  TWBR0 = ((F_CPU / _I2C_FREQUENZ_) - 16) / 2;
		#else
		  TWSR &= ~((1<<TWPS0)|(1<<TWPS1));	// Prescaler = 1
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
		  TWBR = ((F_CPU / _I2C_FREQUENZ_) - 16) / 2;
  b0:	80 ec       	ldi	r24, 0xC0	; 192
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  b6:	08 95       	ret

000000b8 <i2c_start>:
			TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// Control Register
			/*wait, until start condition has been sent --> ACK*/
			while (!(TWCR0 & (1<<TWINT)));
		#else
			/*writing a one to TWINT clears it, TWSTA=Start, TWEN=TWI-enable*/
			TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// Control Register
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			/*wait, until start condition has been sent --> ACK*/
			while (!(TWCR & (1<<TWINT)));
  be:	ec eb       	ldi	r30, 0xBC	; 188
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <i2c_start+0xa>
		#endif
	#endif
}
  c8:	08 95       	ret

000000ca <i2c_stop>:
  	#ifdef _ATMEGA328PB_
  	  /*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
  	  TWCR0 = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    #else
		  /*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
		  TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  ca:	84 e9       	ldi	r24, 0x94	; 148
  cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d0:	08 95       	ret

000000d2 <i2c_write>:
      if (((TWSR0 & 0xf8)== 0x18) || ((TWSR0 & 0xf8)== 0x28)) return ACK;
      if (((TWSR0 & 0xf8)== 0x20) || ((TWSR0 & 0xf8)== 0x30)) return NACK;
      return 0;	//Status Register
    #else
		  /*TWDR contains byte to send*/
		  TWDR = byte;
  d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		  /*send content of TWDR*/
		  TWCR = (1<<TWINT) | (1<<TWEN);
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		  /*wait, until byte has been sent --> ACK*/
		  while (!(TWCR & (1<<TWINT)));
  dc:	ec eb       	ldi	r30, 0xBC	; 188
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 23       	and	r24, r24
  e4:	ec f7       	brge	.-6      	; 0xe0 <i2c_write+0xe>
		  // Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
		  if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
  e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	88 31       	cpi	r24, 0x18	; 24
  ee:	91 f0       	breq	.+36     	; 0x114 <i2c_write+0x42>
  f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	88 32       	cpi	r24, 0x28	; 40
  f8:	79 f0       	breq	.+30     	; 0x118 <i2c_write+0x46>
		  if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
  fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fe:	88 7f       	andi	r24, 0xF8	; 248
 100:	80 32       	cpi	r24, 0x20	; 32
 102:	61 f0       	breq	.+24     	; 0x11c <i2c_write+0x4a>
 104:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
		  /*send content of TWDR*/
		  TWCR = (1<<TWINT) | (1<<TWEN);
		  /*wait, until byte has been sent --> ACK*/
		  while (!(TWCR & (1<<TWINT)));
		  // Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
		  if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
 108:	98 7f       	andi	r25, 0xF8	; 248
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 33       	cpi	r25, 0x30	; 48
 10e:	39 f0       	breq	.+14     	; 0x11e <i2c_write+0x4c>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
		  if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
 11c:	81 e0       	ldi	r24, 0x01	; 1
		  return 0;	//Status Register
    #endif
	#endif
}
 11e:	08 95       	ret

00000120 <delay_100us>:

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	61 f0       	breq	.+24     	; 0x13c <delay_100us+0x1c>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 128:	40 e9       	ldi	r20, 0x90	; 144
 12a:	51 e0       	ldi	r21, 0x01	; 1
 12c:	fa 01       	movw	r30, r20
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <delay_100us+0xe>
	{
		_delay_us(100);
		n++;
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
 136:	82 17       	cp	r24, r18
 138:	93 07       	cpc	r25, r19
 13a:	c1 f7       	brne	.-16     	; 0x12c <delay_100us+0xc>
 13c:	08 95       	ret

0000013e <delay_ms>:
		n++;
	}
}

void delay_ms( uint16_t millisekunden)
{
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	uint16_t n = 0;
	
	while(n < millisekunden)
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	59 f0       	breq	.+22     	; 0x160 <delay_ms+0x22>
 14a:	8c 01       	movw	r16, r24
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_100us(10);
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 90 00 	call	0x120	; 0x120 <delay_100us>
		n++;
 158:	21 96       	adiw	r28, 0x01	; 1

void delay_ms( uint16_t millisekunden)
{
	uint16_t n = 0;
	
	while(n < millisekunden)
 15a:	0c 17       	cp	r16, r28
 15c:	1d 07       	cpc	r17, r29
 15e:	c1 f7       	brne	.-16     	; 0x150 <delay_ms+0x12>
	{
		delay_100us(10);
		n++;
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <ext_interrupt_init>:

void serial_interrupt_init( void (*sr) (void))
{ 
	rs232_init();  // Serielle Schnittstelle initialisieren
	my_datareceived = sr;
}
 16a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <my_interrupt0+0x1>
 16e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <my_interrupt0>
 172:	e9 e6       	ldi	r30, 0x69	; 105
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
 17c:	80 81       	ld	r24, Z
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <__vector_1>:
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
 1a6:	e8 98       	cbi	0x1d, 0	; 29
 1a8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <my_interrupt0>
 1ac:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <my_interrupt0+0x1>
 1b0:	09 95       	icall
 1b2:	e8 9a       	sbi	0x1d, 0	; 29
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <ext_interrupt_enable>:
 1d6:	e8 9a       	sbi	0x1d, 0	; 29
 1d8:	78 94       	sei
 1da:	08 95       	ret

000001dc <ext_interrupt1_init>:
 1dc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <my_interrupt1+0x1>
 1e0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <my_interrupt1>
 1e4:	e9 e6       	ldi	r30, 0x69	; 105
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 60       	ori	r24, 0x08	; 8
 1ec:	80 83       	st	Z, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret

000001f6 <__vector_2>:
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
 218:	e9 98       	cbi	0x1d, 1	; 29
 21a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <my_interrupt1>
 21e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <my_interrupt1+0x1>
 222:	09 95       	icall
 224:	e9 9a       	sbi	0x1d, 1	; 29
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <ext_interrupt1_enable>:
 248:	e9 9a       	sbi	0x1d, 1	; 29
 24a:	78 94       	sei
 24c:	08 95       	ret

0000024e <__vector_14>:
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
 274:	ce e6       	ldi	r28, 0x6E	; 110
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	88 81       	ld	r24, Y
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	88 83       	st	Y, r24
 27e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <my_timer>
 282:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <my_timer+0x1>
 286:	09 95       	icall
 288:	88 81       	ld	r24, Y
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	88 83       	st	Y, r24
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_18>:

ISR(USART_RX_vect)                  // Interrupt-Vektor
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	//UCSR0B &= ~(1<<RXCIE0);         // Empfangsinterrupt ausschalten
	my_datareceived();                // Aufruf der Benutzer-ISR
 2d6:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <my_datareceived>
 2da:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <my_datareceived+0x1>
 2de:	09 95       	icall
  //UCSR0B |= (1<<RXCIE0);          // Empfangsinterrupt einschalten
}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <bit_init>:
  if      (byte_adr == &PORTD)   DDRD = reg_config;
  else if (byte_adr == &PORTB)   DDRB = reg_config;
  else if (byte_adr == &PORTC)   DDRC = reg_config;

  #ifndef NOPULLUPS
   if (direction == IN) *byte_adr = 0xff;	// interne Pullups aktivieren
 302:	41 30       	cpi	r20, 0x01	; 1
 304:	51 f5       	brne	.+84     	; 0x35a <bit_init+0x58>
 306:	8b 32       	cpi	r24, 0x2B	; 43
 308:	91 05       	cpc	r25, r1
 30a:	59 f4       	brne	.+22     	; 0x322 <bit_init+0x20>
 30c:	2a b1       	in	r18, 0x0a	; 10
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <bit_init+0x16>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <bit_init+0x12>
 31c:	82 2b       	or	r24, r18
 31e:	8a b9       	out	0x0a, r24	; 10
 320:	08 95       	ret
 322:	85 32       	cpi	r24, 0x25	; 37
 324:	91 05       	cpc	r25, r1
 326:	59 f4       	brne	.+22     	; 0x33e <bit_init+0x3c>
 328:	24 b1       	in	r18, 0x04	; 4
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <bit_init+0x32>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <bit_init+0x2e>
 338:	82 2b       	or	r24, r18
 33a:	84 b9       	out	0x04, r24	; 4
 33c:	08 95       	ret
 33e:	88 97       	sbiw	r24, 0x28	; 40
 340:	09 f0       	breq	.+2      	; 0x344 <bit_init+0x42>
 342:	47 c0       	rjmp	.+142    	; 0x3d2 <bit_init+0xd0>
 344:	27 b1       	in	r18, 0x07	; 7
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <bit_init+0x4e>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <bit_init+0x4a>
 354:	82 2b       	or	r24, r18
 356:	87 b9       	out	0x07, r24	; 7
 358:	08 95       	ret
 35a:	8b 32       	cpi	r24, 0x2B	; 43
 35c:	91 05       	cpc	r25, r1
 35e:	69 f4       	brne	.+26     	; 0x37a <bit_init+0x78>
 360:	5a b1       	in	r21, 0x0a	; 10
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	06 2e       	mov	r0, r22
 368:	02 c0       	rjmp	.+4      	; 0x36e <bit_init+0x6c>
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <bit_init+0x68>
 372:	20 95       	com	r18
 374:	25 23       	and	r18, r21
 376:	2a b9       	out	0x0a, r18	; 10
 378:	1f c0       	rjmp	.+62     	; 0x3b8 <bit_init+0xb6>
 37a:	85 32       	cpi	r24, 0x25	; 37
 37c:	91 05       	cpc	r25, r1
 37e:	69 f4       	brne	.+26     	; 0x39a <bit_init+0x98>
 380:	54 b1       	in	r21, 0x04	; 4
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	06 2e       	mov	r0, r22
 388:	02 c0       	rjmp	.+4      	; 0x38e <bit_init+0x8c>
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <bit_init+0x88>
 392:	20 95       	com	r18
 394:	25 23       	and	r18, r21
 396:	24 b9       	out	0x04, r18	; 4
 398:	0f c0       	rjmp	.+30     	; 0x3b8 <bit_init+0xb6>
 39a:	88 32       	cpi	r24, 0x28	; 40
 39c:	91 05       	cpc	r25, r1
 39e:	61 f4       	brne	.+24     	; 0x3b8 <bit_init+0xb6>
 3a0:	57 b1       	in	r21, 0x07	; 7
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	06 2e       	mov	r0, r22
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <bit_init+0xac>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <bit_init+0xa8>
 3b2:	20 95       	com	r18
 3b4:	25 23       	and	r18, r21
 3b6:	27 b9       	out	0x07, r18	; 7
 3b8:	41 11       	cpse	r20, r1
 3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <bit_init+0xd0>
 3bc:	fc 01       	movw	r30, r24
 3be:	40 81       	ld	r20, Z
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <bit_init+0xc8>
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <bit_init+0xc4>
 3ce:	24 2b       	or	r18, r20
 3d0:	20 83       	st	Z, r18
 3d2:	08 95       	ret

000003d4 <bit_read>:
  #endif
}

uint8_t bit_read(volatile uint8_t *byte_adr, uint8_t bit_nr)
{
  if      (byte_adr == &PORTD)   return ((PIND>>bit_nr) & 0x01);
 3d4:	8b 32       	cpi	r24, 0x2B	; 43
 3d6:	91 05       	cpc	r25, r1
 3d8:	49 f4       	brne	.+18     	; 0x3ec <bit_read+0x18>
 3da:	89 b1       	in	r24, 0x09	; 9
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <bit_read+0x10>
 3e0:	95 95       	asr	r25
 3e2:	87 95       	ror	r24
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <bit_read+0xc>
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	08 95       	ret
  else if (byte_adr == &PORTB)   return ((PINB>>bit_nr) & 0x01);
 3ec:	85 32       	cpi	r24, 0x25	; 37
 3ee:	91 05       	cpc	r25, r1
 3f0:	49 f4       	brne	.+18     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f2:	83 b1       	in	r24, 0x03	; 3
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <bit_read+0x28>
 3f8:	95 95       	asr	r25
 3fa:	87 95       	ror	r24
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <bit_read+0x24>
 400:	81 70       	andi	r24, 0x01	; 1
 402:	08 95       	ret
  else if (byte_adr == &PORTC)   return ((PINC>>bit_nr) & 0x01);
 404:	88 97       	sbiw	r24, 0x28	; 40
 406:	49 f4       	brne	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 408:	86 b1       	in	r24, 0x06	; 6
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	95 95       	asr	r25
 410:	87 95       	ror	r24
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	81 70       	andi	r24, 0x01	; 1
 418:	08 95       	ret
  else return 0;
 41a:	80 e0       	ldi	r24, 0x00	; 0
}
 41c:	08 95       	ret

0000041e <lcd_waitwhilebusy>:
  while (n > 0)                           // Ausgabe auf das Display (umgekehrt)
  {
    n--;
    lcd_char(buffer[n]);
  }
}
 41e:	8a e0       	ldi	r24, 0x0A	; 10
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 90 00 	call	0x120	; 0x120 <delay_100us>
 426:	08 95       	ret

00000428 <port_out>:
 428:	cf 93       	push	r28
 42a:	c8 2f       	mov	r28, r24
 42c:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_start>
 430:	8e e4       	ldi	r24, 0x4E	; 78
 432:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
 436:	8c 2f       	mov	r24, r28
 438:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
 43c:	0e 94 65 00 	call	0xca	; 0xca <i2c_stop>
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <lowlevel_write>:
 444:	cf 93       	push	r28
 446:	c8 2f       	mov	r28, r24
 448:	84 60       	ori	r24, 0x04	; 4
 44a:	0e 94 14 02 	call	0x428	; 0x428 <port_out>
 44e:	8c 2f       	mov	r24, r28
 450:	8b 7f       	andi	r24, 0xFB	; 251
 452:	0e 94 14 02 	call	0x428	; 0x428 <port_out>
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <lcd_befehl>:
 45a:	cf 93       	push	r28
 45c:	c8 2f       	mov	r28, r24
 45e:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_waitwhilebusy>
 462:	8c 2f       	mov	r24, r28
 464:	80 7f       	andi	r24, 0xF0	; 240
 466:	0e 94 22 02 	call	0x444	; 0x444 <lowlevel_write>
 46a:	8c 2f       	mov	r24, r28
 46c:	82 95       	swap	r24
 46e:	80 7f       	andi	r24, 0xF0	; 240
 470:	0e 94 22 02 	call	0x444	; 0x444 <lowlevel_write>
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <lcd_daten>:
 478:	cf 93       	push	r28
 47a:	c8 2f       	mov	r28, r24
 47c:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_waitwhilebusy>
 480:	8c 2f       	mov	r24, r28
 482:	80 7f       	andi	r24, 0xF0	; 240
 484:	81 60       	ori	r24, 0x01	; 1
 486:	0e 94 22 02 	call	0x444	; 0x444 <lowlevel_write>
 48a:	8c 2f       	mov	r24, r28
 48c:	82 95       	swap	r24
 48e:	80 7f       	andi	r24, 0xF0	; 240
 490:	81 60       	ori	r24, 0x01	; 1
 492:	0e 94 22 02 	call	0x444	; 0x444 <lowlevel_write>
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <lcd_init>:
 49a:	8c e3       	ldi	r24, 0x3C	; 60
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
 4a2:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 4a6:	80 e3       	ldi	r24, 0x30	; 48
 4a8:	0e 94 22 02 	call	0x444	; 0x444 <lowlevel_write>
 4ac:	84 e1       	ldi	r24, 0x14	; 20
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	0e 94 22 02 	call	0x444	; 0x444 <lowlevel_write>
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
 4c2:	80 e3       	ldi	r24, 0x30	; 48
 4c4:	0e 94 22 02 	call	0x444	; 0x444 <lowlevel_write>
 4c8:	8a e0       	ldi	r24, 0x0A	; 10
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
 4d0:	80 e2       	ldi	r24, 0x20	; 32
 4d2:	0e 94 22 02 	call	0x444	; 0x444 <lowlevel_write>
 4d6:	88 e2       	ldi	r24, 0x28	; 40
 4d8:	0e 94 2d 02 	call	0x45a	; 0x45a <lcd_befehl>
 4dc:	8c e0       	ldi	r24, 0x0C	; 12
 4de:	0e 94 2d 02 	call	0x45a	; 0x45a <lcd_befehl>
 4e2:	84 e1       	ldi	r24, 0x14	; 20
 4e4:	0e 94 2d 02 	call	0x45a	; 0x45a <lcd_befehl>
 4e8:	08 95       	ret

000004ea <lcd_clear>:
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 2d 02 	call	0x45a	; 0x45a <lcd_befehl>
 4f0:	08 95       	ret

000004f2 <lcd_setcursor>:
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	31 f0       	breq	.+12     	; 0x502 <lcd_setcursor+0x10>
 4f6:	84 30       	cpi	r24, 0x04	; 4
 4f8:	31 f0       	breq	.+12     	; 0x506 <lcd_setcursor+0x14>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	31 f4       	brne	.+12     	; 0x50a <lcd_setcursor+0x18>
 4fe:	90 e4       	ldi	r25, 0x40	; 64
 500:	05 c0       	rjmp	.+10     	; 0x50c <lcd_setcursor+0x1a>
 502:	90 e1       	ldi	r25, 0x10	; 16
 504:	03 c0       	rjmp	.+6      	; 0x50c <lcd_setcursor+0x1a>
 506:	90 e5       	ldi	r25, 0x50	; 80
 508:	01 c0       	rjmp	.+2      	; 0x50c <lcd_setcursor+0x1a>
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	86 0f       	add	r24, r22
 510:	89 0f       	add	r24, r25
 512:	80 68       	ori	r24, 0x80	; 128
 514:	0e 94 2d 02 	call	0x45a	; 0x45a <lcd_befehl>
 518:	08 95       	ret

0000051a <lcd_lookup>:
 51a:	8c 35       	cpi	r24, 0x5C	; 92
 51c:	19 f0       	breq	.+6      	; 0x524 <lcd_lookup+0xa>
 51e:	80 3b       	cpi	r24, 0xB0	; 176
 520:	19 f0       	breq	.+6      	; 0x528 <lcd_lookup+0xe>
 522:	08 95       	ret
 524:	84 ea       	ldi	r24, 0xA4	; 164
 526:	08 95       	ret
 528:	8f ed       	ldi	r24, 0xDF	; 223
 52a:	08 95       	ret

0000052c <lcd_char>:
 52c:	0e 94 8d 02 	call	0x51a	; 0x51a <lcd_lookup>
 530:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_daten>
 534:	08 95       	ret

00000536 <lcd_print>:
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	ec 01       	movw	r28, r24
 53c:	88 81       	ld	r24, Y
 53e:	88 23       	and	r24, r24
 540:	31 f0       	breq	.+12     	; 0x54e <lcd_print+0x18>
 542:	21 96       	adiw	r28, 0x01	; 1
 544:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_char>
 548:	89 91       	ld	r24, Y+
 54a:	81 11       	cpse	r24, r1
 54c:	fb cf       	rjmp	.-10     	; 0x544 <lcd_print+0xe>
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <lcd_int>:
                 Display. Führende Nullen werden zu blank.
Eingang:         Byte
Ausgang:         ---
==============================================================*/
void lcd_int(uint16_t val)
{	
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	00 d0       	rcall	.+0      	; 0x55e <lcd_int+0xa>
 55e:	00 d0       	rcall	.+0      	; 0x560 <lcd_int+0xc>
 560:	1f 92       	push	r1
 562:	cd b7       	in	r28, 0x3d	; 61
 564:	de b7       	in	r29, 0x3e	; 62
 566:	fc 01       	movw	r30, r24
  uint8_t buffer[5];
  uint8_t n = 0;	
 568:	80 e0       	ldi	r24, 0x00	; 0
	
  do
  {
    buffer[n++] = val%10 + '0';
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	48 0f       	add	r20, r24
 56e:	01 e0       	ldi	r16, 0x01	; 1
 570:	10 e0       	ldi	r17, 0x00	; 0
 572:	0c 0f       	add	r16, r28
 574:	1d 1f       	adc	r17, r29
 576:	08 0f       	add	r16, r24
 578:	11 1d       	adc	r17, r1
 57a:	9f 01       	movw	r18, r30
 57c:	ad ec       	ldi	r26, 0xCD	; 205
 57e:	bc ec       	ldi	r27, 0xCC	; 204
 580:	0e 94 2d 04 	call	0x85a	; 0x85a <__umulhisi3>
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	96 95       	lsr	r25
 58a:	87 95       	ror	r24
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	9c 01       	movw	r18, r24
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	82 0f       	add	r24, r18
 5a4:	93 1f       	adc	r25, r19
 5a6:	9f 01       	movw	r18, r30
 5a8:	28 1b       	sub	r18, r24
 5aa:	39 0b       	sbc	r19, r25
 5ac:	c9 01       	movw	r24, r18
 5ae:	80 5d       	subi	r24, 0xD0	; 208
 5b0:	d8 01       	movw	r26, r16
 5b2:	8c 93       	st	X, r24
  } while ((val /= 10) > 0);
 5b4:	9f 01       	movw	r18, r30
 5b6:	ad ec       	ldi	r26, 0xCD	; 205
 5b8:	bc ec       	ldi	r27, 0xCC	; 204
 5ba:	0e 94 2d 04 	call	0x85a	; 0x85a <__umulhisi3>
 5be:	fc 01       	movw	r30, r24
 5c0:	f6 95       	lsr	r31
 5c2:	e7 95       	ror	r30
 5c4:	f6 95       	lsr	r31
 5c6:	e7 95       	ror	r30
 5c8:	f6 95       	lsr	r31
 5ca:	e7 95       	ror	r30
  uint8_t buffer[5];
  uint8_t n = 0;	
	
  do
  {
    buffer[n++] = val%10 + '0';
 5cc:	84 2f       	mov	r24, r20
  } while ((val /= 10) > 0);
 5ce:	30 97       	sbiw	r30, 0x00	; 0
 5d0:	61 f6       	brne	.-104    	; 0x56a <lcd_int+0x16>
		
  while (n<5)                   // Rest von buffer mit blank füllen
 5d2:	45 30       	cpi	r20, 0x05	; 5
 5d4:	70 f4       	brcc	.+28     	; 0x5f2 <lcd_int+0x9e>
  {
    buffer[n++] = ' ';					
 5d6:	80 e2       	ldi	r24, 0x20	; 32
 5d8:	11 e0       	ldi	r17, 0x01	; 1
 5da:	14 0f       	add	r17, r20
 5dc:	e1 e0       	ldi	r30, 0x01	; 1
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	ec 0f       	add	r30, r28
 5e2:	fd 1f       	adc	r31, r29
 5e4:	e4 0f       	add	r30, r20
 5e6:	f1 1d       	adc	r31, r1
 5e8:	80 83       	st	Z, r24
 5ea:	41 2f       	mov	r20, r17
  do
  {
    buffer[n++] = val%10 + '0';
  } while ((val /= 10) > 0);
		
  while (n<5)                   // Rest von buffer mit blank füllen
 5ec:	15 30       	cpi	r17, 0x05	; 5
 5ee:	a1 f7       	brne	.-24     	; 0x5d8 <lcd_int+0x84>
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <lcd_int+0xa4>
  {
    buffer[n++] = ' ';					
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
 5f2:	44 23       	and	r20, r20
 5f4:	69 f0       	breq	.+26     	; 0x610 <lcd_int+0xbc>
  uint8_t buffer[5];
  uint8_t n = 0;	
	
  do
  {
    buffer[n++] = val%10 + '0';
 5f6:	14 2f       	mov	r17, r20
    buffer[n++] = ' ';					
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
  {
    n--;
 5f8:	11 50       	subi	r17, 0x01	; 1
    lcd_char(buffer[n]);
 5fa:	e1 e0       	ldi	r30, 0x01	; 1
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	ec 0f       	add	r30, r28
 600:	fd 1f       	adc	r31, r29
 602:	e1 0f       	add	r30, r17
 604:	f1 1d       	adc	r31, r1
 606:	80 81       	ld	r24, Z
 608:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_char>
  while (n<5)                   // Rest von buffer mit blank füllen
  {
    buffer[n++] = ' ';					
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
 60c:	11 11       	cpse	r17, r1
 60e:	f4 cf       	rjmp	.-24     	; 0x5f8 <lcd_int+0xa4>
  {
    n--;
    lcd_char(buffer[n]);
  }
}
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	1f 91       	pop	r17
 620:	0f 91       	pop	r16
 622:	08 95       	ret

00000624 <ext_interrupt_isr>:
  }
}

void ext_interrupt_isr(void)
{   
  if (bit_read(B1_A) == 0)
 624:	62 e0       	ldi	r22, 0x02	; 2
 626:	8b e2       	ldi	r24, 0x2B	; 43
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <bit_read>
 62e:	81 11       	cpse	r24, r1
 630:	29 c0       	rjmp	.+82     	; 0x684 <ext_interrupt_isr+0x60>
  {  // Interrupt bei fallender Flanke an A
    if (bit_read(B1_B) == 1)
 632:	63 e0       	ldi	r22, 0x03	; 3
 634:	8b e2       	ldi	r24, 0x2B	; 43
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <bit_read>
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	89 f4       	brne	.+34     	; 0x662 <ext_interrupt_isr+0x3e>
    {
      if (counts != 0)  counts--;
 640:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 644:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 648:	89 2b       	or	r24, r25
 64a:	09 f4       	brne	.+2      	; 0x64e <ext_interrupt_isr+0x2a>
 64c:	42 c0       	rjmp	.+132    	; 0x6d2 <ext_interrupt_isr+0xae>
 64e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 652:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 65c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 660:	08 95       	ret
    }
    else
    {
      if (counts < MAXCOUNTS ) counts++;
 662:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 666:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 66a:	80 3d       	cpi	r24, 0xD0	; 208
 66c:	97 40       	sbci	r25, 0x07	; 7
 66e:	88 f5       	brcc	.+98     	; 0x6d2 <ext_interrupt_isr+0xae>
 670:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 674:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 67e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 682:	08 95       	ret
    }
  }  
  else
  {  //Interrupt bei steigender Flanke an A
    if (bit_read(B1_B) == 0)
 684:	63 e0       	ldi	r22, 0x03	; 3
 686:	8b e2       	ldi	r24, 0x2B	; 43
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <bit_read>
 68e:	81 11       	cpse	r24, r1
 690:	10 c0       	rjmp	.+32     	; 0x6b2 <ext_interrupt_isr+0x8e>
    {
      if (counts != 0)  counts--;
 692:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 696:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 69a:	89 2b       	or	r24, r25
 69c:	d1 f0       	breq	.+52     	; 0x6d2 <ext_interrupt_isr+0xae>
 69e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 6a2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 6a6:	01 97       	sbiw	r24, 0x01	; 1
 6a8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 6ac:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 6b0:	08 95       	ret
    }
    else
    {
      if (counts < MAXCOUNTS ) counts++;
 6b2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 6b6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 6ba:	80 3d       	cpi	r24, 0xD0	; 208
 6bc:	97 40       	sbci	r25, 0x07	; 7
 6be:	48 f4       	brcc	.+18     	; 0x6d2 <ext_interrupt_isr+0xae>
 6c0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 6c4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 6ce:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 6d2:	08 95       	ret

000006d4 <ext_interrupt1_isr>:
  }
}

void ext_interrupt1_isr(void)
{       
  if (bit_read(B1_B) == 0) 
 6d4:	63 e0       	ldi	r22, 0x03	; 3
 6d6:	8b e2       	ldi	r24, 0x2B	; 43
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <bit_read>
 6de:	81 11       	cpse	r24, r1
 6e0:	29 c0       	rjmp	.+82     	; 0x734 <ext_interrupt1_isr+0x60>
  {  // Interrupt bei fallender Flanke an B
    if (bit_read(B1_A) == 0)
 6e2:	62 e0       	ldi	r22, 0x02	; 2
 6e4:	8b e2       	ldi	r24, 0x2B	; 43
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <bit_read>
 6ec:	81 11       	cpse	r24, r1
 6ee:	11 c0       	rjmp	.+34     	; 0x712 <ext_interrupt1_isr+0x3e>
    {
      if (counts != 0)  counts--;
 6f0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 6f4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 6f8:	89 2b       	or	r24, r25
 6fa:	09 f4       	brne	.+2      	; 0x6fe <ext_interrupt1_isr+0x2a>
 6fc:	42 c0       	rjmp	.+132    	; 0x782 <ext_interrupt1_isr+0xae>
 6fe:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 702:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 70c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 710:	08 95       	ret
    }
    else  
    {
      if (counts < MAXCOUNTS ) counts++;
 712:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 716:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 71a:	80 3d       	cpi	r24, 0xD0	; 208
 71c:	97 40       	sbci	r25, 0x07	; 7
 71e:	88 f5       	brcc	.+98     	; 0x782 <ext_interrupt1_isr+0xae>
 720:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 724:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 72e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 732:	08 95       	ret
    }
  }
  else   
  {  // Interrupt bei steigender Flanke an B
    if (bit_read(B1_A) == 1)
 734:	62 e0       	ldi	r22, 0x02	; 2
 736:	8b e2       	ldi	r24, 0x2B	; 43
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <bit_read>
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	81 f4       	brne	.+32     	; 0x762 <ext_interrupt1_isr+0x8e>
    {
      if (counts != 0)  counts--;
 742:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 746:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 74a:	89 2b       	or	r24, r25
 74c:	d1 f0       	breq	.+52     	; 0x782 <ext_interrupt1_isr+0xae>
 74e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 752:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 75c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 760:	08 95       	ret
    }
    else
    {
      if (counts < MAXCOUNTS ) counts++;
 762:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 766:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 76a:	80 3d       	cpi	r24, 0xD0	; 208
 76c:	97 40       	sbci	r25, 0x07	; 7
 76e:	48 f4       	brcc	.+18     	; 0x782 <ext_interrupt1_isr+0xae>
 770:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 774:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 778:	01 96       	adiw	r24, 0x01	; 1
 77a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 77e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 782:	08 95       	ret

00000784 <setup>:

volatile uint16_t counts = 0;

void setup (void)
{  /* Initialisierungen */
  bit_init(B1_B,IN);
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	63 e0       	ldi	r22, 0x03	; 3
 788:	8b e2       	ldi	r24, 0x2B	; 43
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 81 01 	call	0x302	; 0x302 <bit_init>
  bit_init(B1_A,IN);
 790:	40 e0       	ldi	r20, 0x00	; 0
 792:	62 e0       	ldi	r22, 0x02	; 2
 794:	8b e2       	ldi	r24, 0x2B	; 43
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 81 01 	call	0x302	; 0x302 <bit_init>
  bit_init(Reset,IN);
 79c:	40 e0       	ldi	r20, 0x00	; 0
 79e:	62 e0       	ldi	r22, 0x02	; 2
 7a0:	85 e2       	ldi	r24, 0x25	; 37
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 81 01 	call	0x302	; 0x302 <bit_init>
  
  lcd_init();
 7a8:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_init>
  lcd_clear();
 7ac:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_clear>
  lcd_setcursor(1,1);
 7b0:	61 e0       	ldi	r22, 0x01	; 1
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_setcursor>
  lcd_print("counts =");
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_print>
  lcd_setcursor(2,1);
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	82 e0       	ldi	r24, 0x02	; 2
 7c4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_setcursor>
  lcd_print("turns  =");
 7c8:	89 e0       	ldi	r24, 0x09	; 9
 7ca:	91 e0       	ldi	r25, 0x01	; 1
 7cc:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_print>
  ext_interrupt_init(ext_interrupt_isr);
 7d0:	82 e1       	ldi	r24, 0x12	; 18
 7d2:	93 e0       	ldi	r25, 0x03	; 3
 7d4:	0e 94 b5 00 	call	0x16a	; 0x16a <ext_interrupt_init>
  ext_interrupt1_init(ext_interrupt1_isr);
 7d8:	8a e6       	ldi	r24, 0x6A	; 106
 7da:	93 e0       	ldi	r25, 0x03	; 3
 7dc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <ext_interrupt1_init>
 7e0:	08 95       	ret

000007e2 <main>:
}

// Funktion main()
void main(void)
{
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	00 d0       	rcall	.+0      	; 0x7e8 <main+0x6>
 7e8:	cd b7       	in	r28, 0x3d	; 61
 7ea:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t turns, wert;

  setup();
 7ec:	0e 94 c2 03 	call	0x784	; 0x784 <setup>
  ext_interrupt_enable();
 7f0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ext_interrupt_enable>
  ext_interrupt1_enable();
 7f4:	0e 94 24 01 	call	0x248	; 0x248 <ext_interrupt1_enable>
  
  while(1)                          // Endlosschleife loop()
  {
    lcd_setcursor(1,9);
 7f8:	69 e0       	ldi	r22, 0x09	; 9
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_setcursor>
    lcd_int(counts);
 800:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 804:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 808:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_int>
    turns = counts / M;
 80c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
 810:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
 814:	ab ea       	ldi	r26, 0xAB	; 171
 816:	ba ea       	ldi	r27, 0xAA	; 170
 818:	0e 94 2d 04 	call	0x85a	; 0x85a <__umulhisi3>
 81c:	00 24       	eor	r0, r0
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	00 1c       	adc	r0, r0
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	00 1c       	adc	r0, r0
 82a:	89 2f       	mov	r24, r25
 82c:	90 2d       	mov	r25, r0
 82e:	9a 83       	std	Y+2, r25	; 0x02
 830:	89 83       	std	Y+1, r24	; 0x01
    lcd_setcursor(2,9);		
 832:	69 e0       	ldi	r22, 0x09	; 9
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_setcursor>
    lcd_int(turns);
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	9a 81       	ldd	r25, Y+2	; 0x02
 83e:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_int>

    if (!bit_read(Reset)) counts = 0;  // Reset, wenn Drehknopf gedrückt!
 842:	62 e0       	ldi	r22, 0x02	; 2
 844:	85 e2       	ldi	r24, 0x25	; 37
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <bit_read>
 84c:	81 11       	cpse	r24, r1
 84e:	d4 cf       	rjmp	.-88     	; 0x7f8 <main+0x16>
 850:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 854:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 858:	cf cf       	rjmp	.-98     	; 0x7f8 <main+0x16>

0000085a <__umulhisi3>:
 85a:	a2 9f       	mul	r26, r18
 85c:	b0 01       	movw	r22, r0
 85e:	b3 9f       	mul	r27, r19
 860:	c0 01       	movw	r24, r0
 862:	a3 9f       	mul	r26, r19
 864:	70 0d       	add	r23, r0
 866:	81 1d       	adc	r24, r1
 868:	11 24       	eor	r1, r1
 86a:	91 1d       	adc	r25, r1
 86c:	b2 9f       	mul	r27, r18
 86e:	70 0d       	add	r23, r0
 870:	81 1d       	adc	r24, r1
 872:	11 24       	eor	r1, r1
 874:	91 1d       	adc	r25, r1
 876:	08 95       	ret

00000878 <_exit>:
 878:	f8 94       	cli

0000087a <__stop_program>:
 87a:	ff cf       	rjmp	.-2      	; 0x87a <__stop_program>

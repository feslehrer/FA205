
extInterrupt_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000726  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  000007c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010bf  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068e  00000000  00000000  00001b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000781  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dba  00000000  00000000  000032ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  000040b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  9e:	0c 94 91 03 	jmp	0x722	; 0x722 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
// *****************************************************************************************

// ****** Initialiserung I2C-Bus **********************************************
void i2c_init (void)
{
	TWSR &= ~((1<<TWPS0)|(1<<TWPS1));	// Prescaler = 1
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
	TWBR = ((F_CPU / _I2C_FREQUENZ_) - 16) / 2;
  b0:	80 ec       	ldi	r24, 0xC0	; 192
  b2:	80 93 b8 00 	sts	0x00B8, r24
  b6:	08 95       	ret

000000b8 <i2c_start>:

// ****** Startbedingung I2C-Bus **********************************************
void i2c_start (void)
{
	/*writing a one to TWINT clears it, TWSTA=Start, TWEN=TWI-enable*/
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		// Control Register
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24
	/*wait, until start condition has been sent --> ACK*/
	while (!(TWCR & (1<<TWINT)));
  be:	ec eb       	ldi	r30, 0xBC	; 188
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <i2c_start+0xa>
}
  c8:	08 95       	ret

000000ca <i2c_stop>:

//****** Stoppbedingung I2C-Bus ***********************************************************
void i2c_stop (void)
{
	/*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  ca:	84 e9       	ldi	r24, 0x94	; 148
  cc:	80 93 bc 00 	sts	0x00BC, r24
  d0:	08 95       	ret

000000d2 <i2c_write>:
// * Byte ausgeben an I2C-Bus , Rückgabewert = ack = ACK/NACK
// ****************************************************************************************
uint8_t i2c_write (uint8_t byte)
{
	/*TWDR contains byte to send*/
	TWDR = byte;
  d2:	80 93 bb 00 	sts	0x00BB, r24
	/*send content of TWDR*/
	TWCR = (1<<TWINT) | (1<<TWEN);
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24
	/*wait, until byte has been sent --> ACK*/
	while (!(TWCR & (1<<TWINT)));
  dc:	ec eb       	ldi	r30, 0xBC	; 188
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 23       	and	r24, r24
  e4:	ec f7       	brge	.-6      	; 0xe0 <i2c_write+0xe>
	// Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
	if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
  e6:	80 91 b9 00 	lds	r24, 0x00B9
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	88 31       	cpi	r24, 0x18	; 24
  ee:	91 f0       	breq	.+36     	; 0x114 <i2c_write+0x42>
  f0:	80 91 b9 00 	lds	r24, 0x00B9
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	88 32       	cpi	r24, 0x28	; 40
  f8:	79 f0       	breq	.+30     	; 0x118 <i2c_write+0x46>
	if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
  fa:	80 91 b9 00 	lds	r24, 0x00B9
  fe:	88 7f       	andi	r24, 0xF8	; 248
 100:	80 32       	cpi	r24, 0x20	; 32
 102:	61 f0       	breq	.+24     	; 0x11c <i2c_write+0x4a>
 104:	90 91 b9 00 	lds	r25, 0x00B9
 108:	98 7f       	andi	r25, 0xF8	; 248
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 33       	cpi	r25, 0x30	; 48
 10e:	39 f0       	breq	.+14     	; 0x11e <i2c_write+0x4c>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
	/*send content of TWDR*/
	TWCR = (1<<TWINT) | (1<<TWEN);
	/*wait, until byte has been sent --> ACK*/
	while (!(TWCR & (1<<TWINT)));
	// Abfrage der TWI-Statuscodes (ATmega128 Manual S.214)
	if (((TWSR & 0xf8)== 0x18) || ((TWSR & 0xf8)== 0x28)) return ACK;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
	if (((TWSR & 0xf8)== 0x20) || ((TWSR & 0xf8)== 0x30)) return NACK;
 11c:	81 e0       	ldi	r24, 0x01	; 1
	return 0;	//Status Register
}
 11e:	08 95       	ret

00000120 <delay_100us>:

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	69 f0       	breq	.+26     	; 0x13e <delay_100us+0x1e>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	ef e8       	ldi	r30, 0x8F	; 143
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <delay_100us+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <delay_100us+0x12>
 132:	00 00       	nop
	{
		_delay_us(100);
		n++;
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255

void delay_100us( uint16_t mikrosekunden)
{
	uint16_t n = 0;

	while(n < mikrosekunden)
 138:	28 17       	cp	r18, r24
 13a:	39 07       	cpc	r19, r25
 13c:	a9 f7       	brne	.-22     	; 0x128 <delay_100us+0x8>
 13e:	08 95       	ret

00000140 <delay_ms>:
		n++;
	}
}

void delay_ms( uint16_t millisekunden)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
	uint16_t n = 0;
	
	while(n < millisekunden)
 148:	00 97       	sbiw	r24, 0x00	; 0
 14a:	59 f0       	breq	.+22     	; 0x162 <delay_ms+0x22>
 14c:	8c 01       	movw	r16, r24
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_100us(10);
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 90 00 	call	0x120	; 0x120 <delay_100us>
		n++;
 15a:	21 96       	adiw	r28, 0x01	; 1

void delay_ms( uint16_t millisekunden)
{
	uint16_t n = 0;
	
	while(n < millisekunden)
 15c:	c0 17       	cp	r28, r16
 15e:	d1 07       	cpc	r29, r17
 160:	c1 f7       	brne	.-16     	; 0x152 <delay_ms+0x12>
	{
		delay_100us(10);
		n++;
	}
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <ext_interrupt_isr>:
// Interrupt-Serviceroutine
// Die Funktion ext_interrupt_isr() wird bei fallender Flanke an P3.2 aufgerufen!
// Funktionskopf (Name) darf nicht geändert werden!!!
void ext_interrupt_isr(void)
{
	delay_ms(40);                              // Taster-Entprellung
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 a0 00 	call	0x140	; 0x140 <delay_ms>
	i++;
 174:	80 91 0a 01 	lds	r24, 0x010A
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	80 93 0a 01 	sts	0x010A, r24
 17e:	08 95       	ret

00000180 <setup>:
uint8_t i = 0;

// Funktionen
void setup (void)              /* Initialisierungen */
{
  lcd_init();
 180:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_init>
  ext_interrupt_init( ext_interrupt_isr );     // Interrupt initialisieren
 184:	86 eb       	ldi	r24, 0xB6	; 182
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 07 01 	call	0x20e	; 0x20e <ext_interrupt_init>
  bit_init(LED,E1,OUT);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 a8 01 	call	0x350	; 0x350 <bit_init>

  lcd_clear();
 198:	0e 94 b7 02 	call	0x56e	; 0x56e <lcd_clear>
  lcd_setcursor(1,1);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_setcursor>
  lcd_print("Int Test");
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 05 03 	call	0x60a	; 0x60a <lcd_print>
  
  ext_interrupt_enable();                      // Interrupt freigeben
 1ac:	0e 94 3d 01 	call	0x27a	; 0x27a <ext_interrupt_enable>
 1b0:	08 95       	ret

000001b2 <main>:
}

// Funktion main()
int main (void)
{
  setup();
 1b2:	0e 94 c0 00 	call	0x180	; 0x180 <setup>
	
  while(1)                                     // Endlosschleife
  {
    lcd_setcursor(2,4);                        // Anzahl der Interrupts anzeigen
 1b6:	64 e0       	ldi	r22, 0x04	; 4
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_setcursor>
    lcd_int(i);
 1be:	80 91 0a 01 	lds	r24, 0x010A
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 14 03 	call	0x628	; 0x628 <lcd_int>
    bit_write(LED,E1,~bit_read(LED,E1));
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 11 02 	call	0x422	; 0x422 <bit_read>
 1d2:	48 2f       	mov	r20, r24
 1d4:	40 95       	com	r20
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 36 02 	call	0x46c	; 0x46c <bit_write>
    lcd_setcursor(2,1);                        // Aktivitätsanzeige
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_setcursor>
    lcd_char('*');
 1e8:	8a e2       	ldi	r24, 0x2A	; 42
 1ea:	0e 94 00 03 	call	0x600	; 0x600 <lcd_char>
    delay_ms(500);
 1ee:	84 ef       	ldi	r24, 0xF4	; 244
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 a0 00 	call	0x140	; 0x140 <delay_ms>
    lcd_setcursor(2,1);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_setcursor>
    lcd_char(' ');
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	0e 94 00 03 	call	0x600	; 0x600 <lcd_char>
    delay_ms(500);
 204:	84 ef       	ldi	r24, 0xF4	; 244
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 a0 00 	call	0x140	; 0x140 <delay_ms>
  }
 20c:	d4 cf       	rjmp	.-88     	; 0x1b6 <main+0x4>

0000020e <ext_interrupt_init>:
void (*my_interrupt) (void);
void (*my_timer)     (void);

void ext_interrupt_init( void (*ip) (void) )
{
  my_interrupt = ip;
 20e:	90 93 0e 01 	sts	0x010E, r25
 212:	80 93 0d 01 	sts	0x010D, r24
  _INT_CONFIG_ |= (1<<ISC01);
 216:	e9 e6       	ldi	r30, 0x69	; 105
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	80 83       	st	Z, r24
  //_INT_CONFIG_ |= (1<<ISC00);   //auf steigende Flanke triggern
  _INT_CONFIG_ &= ~(1<<ISC00);    //auf fallende Flanke triggern
 220:	80 81       	ld	r24, Z
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	80 83       	st	Z, r24
 226:	08 95       	ret

00000228 <__vector_1>:
}

ISR(INT0_vect)                    // Interrupt-Vektor
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
  _INT_ENABLE_ &= ~(1<<INT0);     // ext. Interrupt deaktivieren
 24a:	e8 98       	cbi	0x1d, 0	; 29
  my_interrupt();                 // Aufruf der Benutzer-ISR
 24c:	e0 91 0d 01 	lds	r30, 0x010D
 250:	f0 91 0e 01 	lds	r31, 0x010E
 254:	09 95       	icall
  _INT_ENABLE_ |= (1<<INT0);      // ext. Interrupt aktivieren
 256:	e8 9a       	sbi	0x1d, 0	; 29
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <ext_interrupt_enable>:

void ext_interrupt_enable( void )
{
  _INT_ENABLE_ |= (1<<INT0);      // ext. Interrupt aktivieren
 27a:	e8 9a       	sbi	0x1d, 0	; 29
  sei();                          // Globale Interruptfreigabe
 27c:	78 94       	sei
 27e:	08 95       	ret

00000280 <__vector_14>:

// Die timer-Interrupt-Serviceroutine timer1ms_isr() muss
// selbst geschrieben werden!!

ISR(TIMER0_COMPA_vect)        // Timer0-Interrupt im Autoreload-mode (CTC)
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	2f 93       	push	r18
 28c:	3f 93       	push	r19
 28e:	4f 93       	push	r20
 290:	5f 93       	push	r21
 292:	6f 93       	push	r22
 294:	7f 93       	push	r23
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
  _TIMER_ENABLE_ &= ~(1<<_TIMER_INT_FLAG_); // Timer Interrupt sperren
 2a6:	ce e6       	ldi	r28, 0x6E	; 110
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	88 81       	ld	r24, Y
 2ac:	8d 7f       	andi	r24, 0xFD	; 253
 2ae:	88 83       	st	Y, r24
  my_timer();                    // aufrufen der Interrupt-Serviceroutine
 2b0:	e0 91 0b 01 	lds	r30, 0x010B
 2b4:	f0 91 0c 01 	lds	r31, 0x010C
 2b8:	09 95       	icall
  _TIMER_ENABLE_ |= (1<<_TIMER_INT_FLAG_);  // Timer Interrupt aktivieren
 2ba:	88 81       	ld	r24, Y
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	88 83       	st	Y, r24
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_16>:

ISR(TIMER0_OVF_vect)        // Timer0-Interrupt im Normal-mode
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
  _TIMER_CNT_ = PRELOAD;         // Preloadwert
 30c:	89 ef       	ldi	r24, 0xF9	; 249
 30e:	86 bd       	out	0x26, r24	; 38
  _TIMER_ENABLE_ &= ~(1<<_TIMER_INT_FLAG_); // Timer Interrupt sperren
 310:	ce e6       	ldi	r28, 0x6E	; 110
 312:	d0 e0       	ldi	r29, 0x00	; 0
 314:	88 81       	ld	r24, Y
 316:	8d 7f       	andi	r24, 0xFD	; 253
 318:	88 83       	st	Y, r24
  my_timer();                    // aufrufen der Interrupt-Serviceroutine
 31a:	e0 91 0b 01 	lds	r30, 0x010B
 31e:	f0 91 0c 01 	lds	r31, 0x010C
 322:	09 95       	icall
  _TIMER_ENABLE_ |= (1<<_TIMER_INT_FLAG_);  // Timer Interrupt aktivieren
 324:	88 81       	ld	r24, Y
 326:	82 60       	ori	r24, 0x02	; 2
 328:	88 83       	st	Y, r24
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	7f 91       	pop	r23
 33c:	6f 91       	pop	r22
 33e:	5f 91       	pop	r21
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <bit_init>:
//***************************************************************
// ab hier Funktionen für Port-Ein-/Ausgabe
//***************************************************************
void bit_init(volatile uint8_t *byte_adr, uint8_t bit_nr, uint8_t direction)
{
  if (direction == OUT)
 350:	41 30       	cpi	r20, 0x01	; 1
 352:	51 f5       	brne	.+84     	; 0x3a8 <bit_init+0x58>
  {
    if      (byte_adr == &PORTD)  DDRD |= (0x01<<bit_nr);
 354:	8b 32       	cpi	r24, 0x2B	; 43
 356:	91 05       	cpc	r25, r1
 358:	59 f4       	brne	.+22     	; 0x370 <bit_init+0x20>
 35a:	2a b1       	in	r18, 0x0a	; 10
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <bit_init+0x16>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <bit_init+0x12>
 36a:	82 2b       	or	r24, r18
 36c:	8a b9       	out	0x0a, r24	; 10
 36e:	08 95       	ret
    else if (byte_adr == &PORTB)  DDRB |= (0x01<<bit_nr);
 370:	85 32       	cpi	r24, 0x25	; 37
 372:	91 05       	cpc	r25, r1
 374:	59 f4       	brne	.+22     	; 0x38c <bit_init+0x3c>
 376:	24 b1       	in	r18, 0x04	; 4
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <bit_init+0x32>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <bit_init+0x2e>
 386:	82 2b       	or	r24, r18
 388:	84 b9       	out	0x04, r24	; 4
 38a:	08 95       	ret
    else if (byte_adr == &PORTC)  DDRC |= (0x01<<bit_nr);
 38c:	88 97       	sbiw	r24, 0x28	; 40
 38e:	09 f0       	breq	.+2      	; 0x392 <bit_init+0x42>
 390:	47 c0       	rjmp	.+142    	; 0x420 <bit_init+0xd0>
 392:	27 b1       	in	r18, 0x07	; 7
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <bit_init+0x4e>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <bit_init+0x4a>
 3a2:	82 2b       	or	r24, r18
 3a4:	87 b9       	out	0x07, r24	; 7
 3a6:	08 95       	ret
  }
  else
  {
    if      (byte_adr == &PORTD)  DDRD &= ~(0x01<<bit_nr);
 3a8:	8b 32       	cpi	r24, 0x2B	; 43
 3aa:	91 05       	cpc	r25, r1
 3ac:	69 f4       	brne	.+26     	; 0x3c8 <bit_init+0x78>
 3ae:	5a b1       	in	r21, 0x0a	; 10
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	06 2e       	mov	r0, r22
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <bit_init+0x6c>
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <bit_init+0x68>
 3c0:	20 95       	com	r18
 3c2:	25 23       	and	r18, r21
 3c4:	2a b9       	out	0x0a, r18	; 10
 3c6:	1f c0       	rjmp	.+62     	; 0x406 <bit_init+0xb6>
    else if (byte_adr == &PORTB)  DDRB &= ~(0x01<<bit_nr);
 3c8:	85 32       	cpi	r24, 0x25	; 37
 3ca:	91 05       	cpc	r25, r1
 3cc:	69 f4       	brne	.+26     	; 0x3e8 <bit_init+0x98>
 3ce:	54 b1       	in	r21, 0x04	; 4
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	06 2e       	mov	r0, r22
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <bit_init+0x8c>
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <bit_init+0x88>
 3e0:	20 95       	com	r18
 3e2:	25 23       	and	r18, r21
 3e4:	24 b9       	out	0x04, r18	; 4
 3e6:	0f c0       	rjmp	.+30     	; 0x406 <bit_init+0xb6>
    else if (byte_adr == &PORTC)  DDRC &= ~(0x01<<bit_nr);
 3e8:	88 32       	cpi	r24, 0x28	; 40
 3ea:	91 05       	cpc	r25, r1
 3ec:	61 f4       	brne	.+24     	; 0x406 <bit_init+0xb6>
 3ee:	57 b1       	in	r21, 0x07	; 7
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	06 2e       	mov	r0, r22
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <bit_init+0xac>
 3f8:	22 0f       	add	r18, r18
 3fa:	33 1f       	adc	r19, r19
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <bit_init+0xa8>
 400:	20 95       	com	r18
 402:	25 23       	and	r18, r21
 404:	27 b9       	out	0x07, r18	; 7
  }
  #ifndef	NOPULLUPS
   if (direction == IN) *byte_adr |= (0x01<<bit_nr);			// internen Pullup aktivieren
 406:	41 11       	cpse	r20, r1
 408:	0b c0       	rjmp	.+22     	; 0x420 <bit_init+0xd0>
 40a:	fc 01       	movw	r30, r24
 40c:	40 81       	ld	r20, Z
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <bit_init+0xc8>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <bit_init+0xc4>
 41c:	24 2b       	or	r18, r20
 41e:	20 83       	st	Z, r18
 420:	08 95       	ret

00000422 <bit_read>:
  #endif
}

uint8_t bit_read(volatile uint8_t *byte_adr, uint8_t bit_nr)
{
  if      (byte_adr == &PORTD)   return ((PIND>>bit_nr) & 0x01);
 422:	8b 32       	cpi	r24, 0x2B	; 43
 424:	91 05       	cpc	r25, r1
 426:	49 f4       	brne	.+18     	; 0x43a <bit_read+0x18>
 428:	89 b1       	in	r24, 0x09	; 9
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <bit_read+0x10>
 42e:	95 95       	asr	r25
 430:	87 95       	ror	r24
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <bit_read+0xc>
 436:	81 70       	andi	r24, 0x01	; 1
 438:	08 95       	ret
  else if (byte_adr == &PORTB)   return ((PINB>>bit_nr) & 0x01);
 43a:	85 32       	cpi	r24, 0x25	; 37
 43c:	91 05       	cpc	r25, r1
 43e:	49 f4       	brne	.+18     	; 0x452 <bit_read+0x30>
 440:	83 b1       	in	r24, 0x03	; 3
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <bit_read+0x28>
 446:	95 95       	asr	r25
 448:	87 95       	ror	r24
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <bit_read+0x24>
 44e:	81 70       	andi	r24, 0x01	; 1
 450:	08 95       	ret
  else if (byte_adr == &PORTC)   return ((PINC>>bit_nr) & 0x01);
 452:	88 97       	sbiw	r24, 0x28	; 40
 454:	49 f4       	brne	.+18     	; 0x468 <bit_read+0x46>
 456:	86 b1       	in	r24, 0x06	; 6
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <bit_read+0x3e>
 45c:	95 95       	asr	r25
 45e:	87 95       	ror	r24
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <bit_read+0x3a>
 464:	81 70       	andi	r24, 0x01	; 1
 466:	08 95       	ret
  else return 0;
 468:	80 e0       	ldi	r24, 0x00	; 0
}
 46a:	08 95       	ret

0000046c <bit_write>:

void bit_write(volatile uint8_t *byte_adr, uint8_t bit_nr, uint8_t val)
{
 46c:	fc 01       	movw	r30, r24
  val &= 0x01;
  if (val == 1)
 46e:	40 ff       	sbrs	r20, 0
 470:	0b c0       	rjmp	.+22     	; 0x488 <bit_write+0x1c>
    *byte_adr |= (0x01<<bit_nr);
 472:	20 81       	ld	r18, Z
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <bit_write+0x12>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <bit_write+0xe>
 482:	82 2b       	or	r24, r18
 484:	80 83       	st	Z, r24
 486:	08 95       	ret
  else
    *byte_adr &= ~(0x01<<bit_nr);
 488:	90 81       	ld	r25, Z
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <bit_write+0x28>
 490:	22 0f       	add	r18, r18
 492:	33 1f       	adc	r19, r19
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <bit_write+0x24>
 498:	20 95       	com	r18
 49a:	29 23       	and	r18, r25
 49c:	20 83       	st	Z, r18
 49e:	08 95       	ret

000004a0 <lcd_waitwhilebusy>:

   LCD_PORT_RW &= ~(1<<RW);                 // R/W(B.0) = 0  (Schreiben)
   LCD_PORT_RS |=  (1<<RS);                 // RS = 1   (Lesen Daten)
   LCD_PORT_CFG  |=  LCD_PORT_MASK;         // D.7-D.4 wieder als Ausgang 
  #else  // Wenn kein Busy-Flag abgefragt wird!!
   delay_100us(LCD_WAIT);
 4a0:	88 e0       	ldi	r24, 0x08	; 8
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 90 00 	call	0x120	; 0x120 <delay_100us>
 4a8:	08 95       	ret

000004aa <port_out>:
}

#ifdef LCD_I2C
// 8-Bit Portausgabe (PCF8574) über I2C-Bus
void port_out(uint8_t wert)
{
 4aa:	cf 93       	push	r28
 4ac:	c8 2f       	mov	r28, r24
  i2c_start();                // Startbedingung    
 4ae:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_start>
  i2c_write(LCD_ADDR_W);      // Schreibwunsch an Port-Expander senden
 4b2:	8e e4       	ldi	r24, 0x4E	; 78
 4b4:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
  //delay_100us(2);
  i2c_write(wert);            // port0 ausgeben
 4b8:	8c 2f       	mov	r24, r28
 4ba:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_write>
  i2c_stop();                 // Stoppbedingung
 4be:	0e 94 65 00 	call	0xca	; 0xca <i2c_stop>
}
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <lowlevel_write>:
#endif

void lowlevel_write(uint8_t data)
{
 4c6:	cf 93       	push	r28
 4c8:	c8 2f       	mov	r28, r24
#ifdef LCD_I2C
  data |=  (1<<BL);             // BL = on (Backlight)
  data |=  (1<<EN);             // EN = 1
  port_out(data);
 4ca:	8c 60       	ori	r24, 0x0C	; 12
 4cc:	0e 94 55 02 	call	0x4aa	; 0x4aa <port_out>
  data &= ~(1<<EN);             // EN = 0
 4d0:	8c 2f       	mov	r24, r28
 4d2:	8b 7f       	andi	r24, 0xFB	; 251
  port_out(data);
 4d4:	88 60       	ori	r24, 0x08	; 8
 4d6:	0e 94 55 02 	call	0x4aa	; 0x4aa <port_out>
  LCD_PORT |= data;
  //delay_100us(2);
  LCD_PORT_EN |= (1<<EN);       // EN = 1
  LCD_PORT_EN &= ~(1<<EN);      // EN = 0
#endif
}
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <lcd_befehl>:
#define MSB_SHIFT 4
#define LSB_SHIFT 0
#endif

void lcd_befehl (uint8_t befehl)
{
 4de:	cf 93       	push	r28
 4e0:	c8 2f       	mov	r28, r24
   uint8_t temp;

   lcd_waitwhilebusy();                     // Warten bis LCD bereit!
 4e2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_waitwhilebusy>

  #ifdef LCD_I2C		
   temp = befehl;
   temp &=  0xf0;                           // High-Nibble   	
   temp &= ~(1<<RS);                       // RS = 0  (Befehl)
   lowlevel_write(temp);
 4e6:	8c 2f       	mov	r24, r28
 4e8:	80 7f       	andi	r24, 0xF0	; 240
 4ea:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lowlevel_write>

   temp = befehl;                           // Low-Nibble
   temp &= 0x0f;
   temp <<= 4;
   temp &= ~(1<<RS);                       // RS = 0  (Befehl)
   lowlevel_write(temp);
 4ee:	8c 2f       	mov	r24, r28
 4f0:	82 95       	swap	r24
 4f2:	80 7f       	andi	r24, 0xF0	; 240
 4f4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lowlevel_write>
   temp = befehl;                           // Low-Nibble
   temp &= 0x0f;
   temp <<= LSB_SHIFT;
   lowlevel_write(temp);
  #endif
}
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <lcd_daten>:
/*****************************************************************************************
 * 	Gibt das Byte 'daten' ans LCD-Display im 4Bit-Modus aus.
 *    Entweder Busy-Flag des LCD abfragen oder Zeitverzögerung verwenden        
 *****************************************************************************************/
void lcd_daten(uint8_t daten)
{
 4fc:	cf 93       	push	r28
 4fe:	c8 2f       	mov	r28, r24
  uint8_t temp;
	
  lcd_waitwhilebusy();                     // Warten bis LCD bereit!
 500:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_waitwhilebusy>
  #ifdef LCD_I2C	
   temp = daten ;
   temp &=  0xf0;                           // High-Nibble
 504:	8c 2f       	mov	r24, r28
 506:	80 7f       	andi	r24, 0xF0	; 240
 
   temp |=  (1<<RS);                       // RS = 1  (Daten)
   lowlevel_write(temp);
 508:	81 60       	ori	r24, 0x01	; 1
 50a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lowlevel_write>

   temp = daten;                            // Low-Nibbel
   temp &= 0x0f;

   temp <<= 4;
 50e:	8c 2f       	mov	r24, r28
 510:	82 95       	swap	r24
 512:	80 7f       	andi	r24, 0xF0	; 240
   temp |=  (1<<RS);                       // RS = 1  (Daten)
   lowlevel_write(temp);
 514:	81 60       	ori	r24, 0x01	; 1
 516:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lowlevel_write>
   temp <<= LSB_SHIFT;
   LCD_PORT_RS |= (1<<RS);                  // Data-Register On
   lowlevel_write(temp);
   LCD_PORT_RS &= ~(1<<RS);                 // Data-Register Off
  #endif
}
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <lcd_init>:
void lcd_init (void)	
{ 
  uint8_t temp;

  #ifdef LCD_I2C
   delay_ms(LCD_WAIT*6);	
 51e:	80 e3       	ldi	r24, 0x30	; 48
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 a0 00 	call	0x140	; 0x140 <delay_ms>
   temp = 0x30;
   i2c_init();
 526:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
   temp &= ~(1<<RS);                       // RS = 0  (Befehl)
   temp &= ~(1<<RW);                       // R/W = 0 (schreiben!!)
   lowlevel_write(temp);                   // 1. aufwecken!
 52a:	80 e3       	ldi	r24, 0x30	; 48
 52c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lowlevel_write>
	
   delay_ms(LCD_WAIT*2);	
 530:	80 e1       	ldi	r24, 0x10	; 16
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 a0 00 	call	0x140	; 0x140 <delay_ms>
   lowlevel_write(temp);                   // 2. aufwecken!
 538:	80 e3       	ldi	r24, 0x30	; 48
 53a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lowlevel_write>

   delay_ms(LCD_WAIT);
 53e:	88 e0       	ldi	r24, 0x08	; 8
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 a0 00 	call	0x140	; 0x140 <delay_ms>
   lowlevel_write(temp);                   // 3. aufwecken!
 546:	80 e3       	ldi	r24, 0x30	; 48
 548:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lowlevel_write>

   delay_ms(LCD_WAIT);
 54c:	88 e0       	ldi	r24, 0x08	; 8
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 a0 00 	call	0x140	; 0x140 <delay_ms>
   temp = 0x20;
   temp &= ~(1<<RS);                       // RS = 0  (Befehl)
   temp &= ~(1<<RW);                       // R/W = 0 (schreiben!!)
   lowlevel_write(temp);
 554:	80 e2       	ldi	r24, 0x20	; 32
 556:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lowlevel_write>
   temp &=  0xf0;
   temp >>= MSB_SHIFT;
   lowlevel_write(temp);
  #endif
  // Ab hier Busy-Flag Abfrage möglich	
  lcd_befehl (0x28);                       // Function set 4 bits  													
 55a:	88 e2       	ldi	r24, 0x28	; 40
 55c:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_befehl>
  lcd_befehl (CURSOR);                     // Display AN, Cursor AUS													
 560:	8c e0       	ldi	r24, 0x0C	; 12
 562:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_befehl>
  lcd_befehl (DISPLAY);                    // Not Shifted Display, Increment				
 566:	84 e1       	ldi	r24, 0x14	; 20
 568:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_befehl>
 56c:	08 95       	ret

0000056e <lcd_clear>:

// Ab hier sind alle Funktionen Controllerunabhängig!!!!
/******************************************************************************************
 * Display löschen	                                                                                                      
 ******************************************************************************************/
void lcd_clear (void)     { lcd_befehl(0x01); }
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_befehl>
 574:	08 95       	ret

00000576 <lcd_setcursor>:
 ******************************************************************************************/
void lcd_setcursor (uint8_t zeile, uint8_t spalte)
{
  uint8_t position;
	
  switch(zeile)
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	31 f0       	breq	.+12     	; 0x586 <lcd_setcursor+0x10>
 57a:	84 30       	cpi	r24, 0x04	; 4
 57c:	31 f0       	breq	.+12     	; 0x58a <lcd_setcursor+0x14>
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	31 f4       	brne	.+12     	; 0x58e <lcd_setcursor+0x18>
  {
    case 1:   position = ZEILE1; break;
    case 2:   position = ZEILE2; break;	
 582:	90 e4       	ldi	r25, 0x40	; 64
 584:	05 c0       	rjmp	.+10     	; 0x590 <lcd_setcursor+0x1a>
    case 3:   position = ZEILE3; break;
 586:	90 e1       	ldi	r25, 0x10	; 16
 588:	03 c0       	rjmp	.+6      	; 0x590 <lcd_setcursor+0x1a>
    case 4:   position = ZEILE4; break;
 58a:	90 e5       	ldi	r25, 0x50	; 80
 58c:	01 c0       	rjmp	.+2      	; 0x590 <lcd_setcursor+0x1a>
{
  uint8_t position;
	
  switch(zeile)
  {
    case 1:   position = ZEILE1; break;
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	86 0f       	add	r24, r22
    case 3:   position = ZEILE3; break;
    case 4:   position = ZEILE4; break;
    default:  position = ZEILE1; break;		
  }
	
  position += (spalte-1);
 594:	89 0f       	add	r24, r25
		
  lcd_befehl ( position | 0x80 );          // 0x80 = Kennung für DD RAM address set
 596:	80 68       	ori	r24, 0x80	; 128
 598:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_befehl>
 59c:	08 95       	ret

0000059e <lcd_lookup>:
Eingang:      ASCII-Code
Ausgang:      Display-Code
==============================================================*/
uint8_t lcd_lookup(uint8_t ascii)
{
  switch (ascii)
 59e:	86 3d       	cpi	r24, 0xD6	; 214
 5a0:	09 f1       	breq	.+66     	; 0x5e4 <lcd_lookup+0x46>
 5a2:	68 f4       	brcc	.+26     	; 0x5be <lcd_lookup+0x20>
 5a4:	80 3b       	cpi	r24, 0xB0	; 176
 5a6:	51 f1       	breq	.+84     	; 0x5fc <lcd_lookup+0x5e>
 5a8:	28 f4       	brcc	.+10     	; 0x5b4 <lcd_lookup+0x16>
 5aa:	8c 35       	cpi	r24, 0x5C	; 92
 5ac:	19 f1       	breq	.+70     	; 0x5f4 <lcd_lookup+0x56>
 5ae:	80 38       	cpi	r24, 0x80	; 128
 5b0:	19 f1       	breq	.+70     	; 0x5f8 <lcd_lookup+0x5a>
 5b2:	08 95       	ret
 5b4:	85 3b       	cpi	r24, 0xB5	; 181
 5b6:	e1 f0       	breq	.+56     	; 0x5f0 <lcd_lookup+0x52>
 5b8:	84 3c       	cpi	r24, 0xC4	; 196
 5ba:	71 f0       	breq	.+28     	; 0x5d8 <lcd_lookup+0x3a>
 5bc:	08 95       	ret
 5be:	84 3e       	cpi	r24, 0xE4	; 228
 5c0:	59 f0       	breq	.+22     	; 0x5d8 <lcd_lookup+0x3a>
 5c2:	28 f4       	brcc	.+10     	; 0x5ce <lcd_lookup+0x30>
 5c4:	8c 3d       	cpi	r24, 0xDC	; 220
 5c6:	81 f0       	breq	.+32     	; 0x5e8 <lcd_lookup+0x4a>
 5c8:	8f 3d       	cpi	r24, 0xDF	; 223
 5ca:	81 f0       	breq	.+32     	; 0x5ec <lcd_lookup+0x4e>
 5cc:	08 95       	ret
 5ce:	86 3f       	cpi	r24, 0xF6	; 246
 5d0:	29 f0       	breq	.+10     	; 0x5dc <lcd_lookup+0x3e>
 5d2:	8c 3f       	cpi	r24, 0xFC	; 252
 5d4:	29 f0       	breq	.+10     	; 0x5e0 <lcd_lookup+0x42>
 5d6:	08 95       	ret
  {
    case 0xb0: return 0xdf;  // '°'
    case 'ä':  return 0xe1;
 5d8:	81 ee       	ldi	r24, 0xE1	; 225
 5da:	08 95       	ret
    case 'ö':  return 0xef;
 5dc:	8f ee       	ldi	r24, 0xEF	; 239
 5de:	08 95       	ret
    case 'ü':  return 0xf5;
 5e0:	85 ef       	ldi	r24, 0xF5	; 245
 5e2:	08 95       	ret
    case 'Ä':  return 0xe1;
    case 'Ö':  return 0xef;
 5e4:	8f ee       	ldi	r24, 0xEF	; 239
 5e6:	08 95       	ret
    case 'Ü':  return 0xf5;
 5e8:	85 ef       	ldi	r24, 0xF5	; 245
 5ea:	08 95       	ret
    case 'ß':  return 0xe2;
 5ec:	82 ee       	ldi	r24, 0xE2	; 226
 5ee:	08 95       	ret
    case 'µ':  return 0xe4;
 5f0:	84 ee       	ldi	r24, 0xE4	; 228
 5f2:	08 95       	ret
    case '\\': return 0xa4;
 5f4:	84 ea       	ldi	r24, 0xA4	; 164
 5f6:	08 95       	ret
    case '':  return 0xd3;
 5f8:	83 ed       	ldi	r24, 0xD3	; 211
 5fa:	08 95       	ret
==============================================================*/
uint8_t lcd_lookup(uint8_t ascii)
{
  switch (ascii)
  {
    case 0xb0: return 0xdf;  // '°'
 5fc:	8f ed       	ldi	r24, 0xDF	; 223
    case 'µ':  return 0xe4;
    case '\\': return 0xa4;
    case '':  return 0xd3;
  }
  return ascii;
}
 5fe:	08 95       	ret

00000600 <lcd_char>:
 * 	Ausgabe eines Zeichens an das LCD-Display                                                          
 *  Entweder Busy-Flag des LCD abfragen oder Zeitverzögerung verwenden         
 ******************************************************************************************/
void lcd_char (uint8_t zeichen)
{
  zeichen = lcd_lookup(zeichen);           // Umlaute und Sonderzeichen ersetzen!
 600:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_lookup>
  lcd_daten(zeichen);
 604:	0e 94 7e 02 	call	0x4fc	; 0x4fc <lcd_daten>
 608:	08 95       	ret

0000060a <lcd_print>:

/*****************************************************************************************
 * \0-terminierten Text an das LCD-Display ausgeben. 
 ******************************************************************************************/
void lcd_print (uint8_t text[])
{				
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	ec 01       	movw	r28, r24
  while (*text != '\0')                   // Text													
 610:	88 81       	ld	r24, Y
 612:	88 23       	and	r24, r24
 614:	31 f0       	breq	.+12     	; 0x622 <lcd_print+0x18>
 616:	21 96       	adiw	r28, 0x01	; 1
    lcd_char (*text++);                   // zeichenweise ausgeben 	
 618:	0e 94 00 03 	call	0x600	; 0x600 <lcd_char>
/*****************************************************************************************
 * \0-terminierten Text an das LCD-Display ausgeben. 
 ******************************************************************************************/
void lcd_print (uint8_t text[])
{				
  while (*text != '\0')                   // Text													
 61c:	89 91       	ld	r24, Y+
 61e:	81 11       	cpse	r24, r1
 620:	fb cf       	rjmp	.-10     	; 0x618 <lcd_print+0xe>
    lcd_char (*text++);                   // zeichenweise ausgeben 	
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <lcd_int>:
                 Display. Führende Nullen werden zu blank.
Eingang:         Byte
Ausgang:         ---
==============================================================*/
void lcd_int(uint16_t val)
{	
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	00 d0       	rcall	.+0      	; 0x636 <lcd_int+0xe>
 636:	00 d0       	rcall	.+0      	; 0x638 <lcd_int+0x10>
 638:	1f 92       	push	r1
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	8c 01       	movw	r16, r24
  uint8_t buffer[5];
  uint8_t n = 0;	
 640:	80 e0       	ldi	r24, 0x00	; 0
	
  do
  {
    buffer[n++] = val%10 + '0';
 642:	e1 e0       	ldi	r30, 0x01	; 1
 644:	e8 0f       	add	r30, r24
 646:	ee 24       	eor	r14, r14
 648:	e3 94       	inc	r14
 64a:	f1 2c       	mov	r15, r1
 64c:	ec 0e       	add	r14, r28
 64e:	fd 1e       	adc	r15, r29
 650:	e8 0e       	add	r14, r24
 652:	f1 1c       	adc	r15, r1
 654:	98 01       	movw	r18, r16
 656:	ad ec       	ldi	r26, 0xCD	; 205
 658:	bc ec       	ldi	r27, 0xCC	; 204
 65a:	0e 94 82 03 	call	0x704	; 0x704 <__umulhisi3>
 65e:	ac 01       	movw	r20, r24
 660:	56 95       	lsr	r21
 662:	47 95       	ror	r20
 664:	56 95       	lsr	r21
 666:	47 95       	ror	r20
 668:	56 95       	lsr	r21
 66a:	47 95       	ror	r20
 66c:	ca 01       	movw	r24, r20
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	44 0f       	add	r20, r20
 674:	55 1f       	adc	r21, r21
 676:	44 0f       	add	r20, r20
 678:	55 1f       	adc	r21, r21
 67a:	44 0f       	add	r20, r20
 67c:	55 1f       	adc	r21, r21
 67e:	48 0f       	add	r20, r24
 680:	59 1f       	adc	r21, r25
 682:	c8 01       	movw	r24, r16
 684:	84 1b       	sub	r24, r20
 686:	95 0b       	sbc	r25, r21
 688:	80 5d       	subi	r24, 0xD0	; 208
 68a:	d7 01       	movw	r26, r14
 68c:	8c 93       	st	X, r24
  } while ((val /= 10) > 0);
 68e:	ad ec       	ldi	r26, 0xCD	; 205
 690:	bc ec       	ldi	r27, 0xCC	; 204
 692:	0e 94 82 03 	call	0x704	; 0x704 <__umulhisi3>
 696:	8c 01       	movw	r16, r24
 698:	16 95       	lsr	r17
 69a:	07 95       	ror	r16
 69c:	16 95       	lsr	r17
 69e:	07 95       	ror	r16
 6a0:	16 95       	lsr	r17
 6a2:	07 95       	ror	r16
  uint8_t buffer[5];
  uint8_t n = 0;	
	
  do
  {
    buffer[n++] = val%10 + '0';
 6a4:	8e 2f       	mov	r24, r30
  } while ((val /= 10) > 0);
 6a6:	01 15       	cp	r16, r1
 6a8:	11 05       	cpc	r17, r1
 6aa:	59 f6       	brne	.-106    	; 0x642 <lcd_int+0x1a>
		
  while (n<5)                   // Rest von buffer mit blank füllen
 6ac:	e5 30       	cpi	r30, 0x05	; 5
 6ae:	78 f4       	brcc	.+30     	; 0x6ce <lcd_int+0xa6>
  {
    buffer[n++] = ' ';					
 6b0:	80 e2       	ldi	r24, 0x20	; 32
 6b2:	11 e0       	ldi	r17, 0x01	; 1
 6b4:	1e 0f       	add	r17, r30
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	2c 0f       	add	r18, r28
 6bc:	3d 1f       	adc	r19, r29
 6be:	2e 0f       	add	r18, r30
 6c0:	31 1d       	adc	r19, r1
 6c2:	f9 01       	movw	r30, r18
 6c4:	80 83       	st	Z, r24
 6c6:	e1 2f       	mov	r30, r17
  do
  {
    buffer[n++] = val%10 + '0';
  } while ((val /= 10) > 0);
		
  while (n<5)                   // Rest von buffer mit blank füllen
 6c8:	15 30       	cpi	r17, 0x05	; 5
 6ca:	99 f7       	brne	.-26     	; 0x6b2 <lcd_int+0x8a>
 6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <lcd_int+0xac>
  {
    buffer[n++] = ' ';					
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
 6ce:	ee 23       	and	r30, r30
 6d0:	69 f0       	breq	.+26     	; 0x6ec <lcd_int+0xc4>
  uint8_t buffer[5];
  uint8_t n = 0;	
	
  do
  {
    buffer[n++] = val%10 + '0';
 6d2:	1e 2f       	mov	r17, r30
    buffer[n++] = ' ';					
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
  {
    n--;
 6d4:	11 50       	subi	r17, 0x01	; 1
    lcd_char(buffer[n]);
 6d6:	e1 e0       	ldi	r30, 0x01	; 1
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	ec 0f       	add	r30, r28
 6dc:	fd 1f       	adc	r31, r29
 6de:	e1 0f       	add	r30, r17
 6e0:	f1 1d       	adc	r31, r1
 6e2:	80 81       	ld	r24, Z
 6e4:	0e 94 00 03 	call	0x600	; 0x600 <lcd_char>
  while (n<5)                   // Rest von buffer mit blank füllen
  {
    buffer[n++] = ' ';					
  }

  while (n > 0)                 // Ausgabe auf das Display (umgekehrt)
 6e8:	11 11       	cpse	r17, r1
 6ea:	f4 cf       	rjmp	.-24     	; 0x6d4 <lcd_int+0xac>
  {
    n--;
    lcd_char(buffer[n]);
  }
}
 6ec:	0f 90       	pop	r0
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	ff 90       	pop	r15
 700:	ef 90       	pop	r14
 702:	08 95       	ret

00000704 <__umulhisi3>:
 704:	a2 9f       	mul	r26, r18
 706:	b0 01       	movw	r22, r0
 708:	b3 9f       	mul	r27, r19
 70a:	c0 01       	movw	r24, r0
 70c:	a3 9f       	mul	r26, r19
 70e:	70 0d       	add	r23, r0
 710:	81 1d       	adc	r24, r1
 712:	11 24       	eor	r1, r1
 714:	91 1d       	adc	r25, r1
 716:	b2 9f       	mul	r27, r18
 718:	70 0d       	add	r23, r0
 71a:	81 1d       	adc	r24, r1
 71c:	11 24       	eor	r1, r1
 71e:	91 1d       	adc	r25, r1
 720:	08 95       	ret

00000722 <_exit>:
 722:	f8 94       	cli

00000724 <__stop_program>:
 724:	ff cf       	rjmp	.-2      	; 0x724 <__stop_program>

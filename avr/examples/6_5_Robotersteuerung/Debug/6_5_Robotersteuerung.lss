
6_5_Robotersteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000480  00000514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000480  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800124  00800124  00000538  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000156a  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a36  00000000  00000000  00001cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba9  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  000032d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ac  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba3  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00004b13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	b7 c0       	rjmp	.+366    	; 0x174 <__vector_1>
   6:	00 00       	nop
   8:	de c0       	rjmp	.+444    	; 0x1c6 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	ef c0       	rjmp	.+478    	; 0x218 <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	1a c1       	rjmp	.+564    	; 0x27e <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	48 d0       	rcall	.+144    	; 0x12c <main>
  9c:	ef c1       	rjmp	.+990    	; 0x47c <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <setup>:
void robby_richtung(uint8_t dir);

void setup (void)   // Initialisierungen
{ 
  // IR-Sensorsignale
  bit_init(SensorD,IRL,IN);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	8b e2       	ldi	r24, 0x2B	; 43
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	11 d1       	rcall	.+546    	; 0x2cc <bit_init>
  bit_init(SensorD,IRM,IN);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	8b e2       	ldi	r24, 0x2B	; 43
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0c d1       	rcall	.+536    	; 0x2cc <bit_init>
  bit_init(SensorD,IRR,IN);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	67 e0       	ldi	r22, 0x07	; 7
  b8:	8b e2       	ldi	r24, 0x2B	; 43
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	07 d1       	rcall	.+526    	; 0x2cc <bit_init>
  // Motorsignale 
  bit_init(_PORTD_,2,OUT);      // Input 1
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	8b e2       	ldi	r24, 0x2B	; 43
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 d1       	rcall	.+516    	; 0x2cc <bit_init>
  bit_init(_PORTB_,2,OUT);      // Input 2 
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	85 e2       	ldi	r24, 0x25	; 37
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fd d0       	rcall	.+506    	; 0x2cc <bit_init>
  bit_init(_PORTB_,4,OUT);      // Input 3
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	64 e0       	ldi	r22, 0x04	; 4
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	f8 d0       	rcall	.+496    	; 0x2cc <bit_init>
  bit_init(_PORTB_,5,OUT);      // Input 4
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	65 e0       	ldi	r22, 0x05	; 5
  e0:	85 e2       	ldi	r24, 0x25	; 37
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	f3 d0       	rcall	.+486    	; 0x2cc <bit_init>
  // PWM für Motordrehzahl 
  pwm_init();                   // Enable A (pwm)
  e6:	9a d1       	rcall	.+820    	; 0x41c <pwm_init>
  e8:	b1 c1       	rjmp	.+866    	; 0x44c <pwm2_init>
  pwm2_init();                  // Enable B (pwm)
  ea:	08 95       	ret

000000ec <robby_richtung>:
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
//                                     LINKSVOR,RECHTSVOR,LINKSDREH,
//                                     RECHTSDREH,LINKSRUECK,RECHTSRUECK)
void robby_richtung(uint8_t dir)
{
  //Bewegungsrichtung
  bit_write(_PORTD_,2,directions[dir][0]);       // Input 1
  f0:	24 e0       	ldi	r18, 0x04	; 4
  f2:	82 9f       	mul	r24, r18
  f4:	c0 01       	movw	r24, r0
  f6:	11 24       	eor	r1, r1
  f8:	ec 01       	movw	r28, r24
  fa:	c0 50       	subi	r28, 0x00	; 0
  fc:	df 4f       	sbci	r29, 0xFF	; 255
  fe:	48 81       	ld	r20, Y
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	8b e2       	ldi	r24, 0x2B	; 43
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	70 d1       	rcall	.+736    	; 0x3e8 <bit_write>
  bit_write(_PORTB_,2,directions[dir][1]);       // Input 2
 108:	49 81       	ldd	r20, Y+1	; 0x01
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	6b d1       	rcall	.+726    	; 0x3e8 <bit_write>
  bit_write(_PORTB_,4,directions[dir][2]);       // Input 3
 112:	4a 81       	ldd	r20, Y+2	; 0x02
 114:	64 e0       	ldi	r22, 0x04	; 4
 116:	85 e2       	ldi	r24, 0x25	; 37
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	66 d1       	rcall	.+716    	; 0x3e8 <bit_write>
  bit_write(_PORTB_,5,directions[dir][3]);       // Input 4
 11c:	4b 81       	ldd	r20, Y+3	; 0x03
 11e:	65 e0       	ldi	r22, 0x05	; 5
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	61 d1       	rcall	.+706    	; 0x3e8 <bit_write>
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <main>:

int main (void)
{
  uint8_t speed = 180;
  
  setup();
 12c:	b9 df       	rcall	.-142    	; 0xa0 <setup>
  
  pwm_start();
 12e:	85 d1       	rcall	.+778    	; 0x43a <pwm_start>
  pwm2_start();
 130:	9c d1       	rcall	.+824    	; 0x46a <pwm2_start>
  pwm_duty_cycle(speed);
 132:	84 eb       	ldi	r24, 0xB4	; 180
 134:	88 d1       	rcall	.+784    	; 0x446 <pwm_duty_cycle>
  pwm2_duty_cycle(speed);
 136:	84 eb       	ldi	r24, 0xB4	; 180
 138:	9e d1       	rcall	.+828    	; 0x476 <pwm2_duty_cycle>
  
  while(1)
  {  
    if      (bit_read(SensorD,IRM)==0)  robby_richtung(STOPP);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	8b e2       	ldi	r24, 0x2B	; 43
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2e d1       	rcall	.+604    	; 0x39e <bit_read>
 142:	81 11       	cpse	r24, r1
 144:	02 c0       	rjmp	.+4      	; 0x14a <main+0x1e>
 146:	d2 df       	rcall	.-92     	; 0xec <robby_richtung>
 148:	f8 cf       	rjmp	.-16     	; 0x13a <main+0xe>
 14a:	60 e0       	ldi	r22, 0x00	; 0
    else if (bit_read(SensorD,IRL)==0)  robby_richtung(RECHTSDREH);
 14c:	8b e2       	ldi	r24, 0x2B	; 43
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	26 d1       	rcall	.+588    	; 0x39e <bit_read>
 152:	81 11       	cpse	r24, r1
 154:	03 c0       	rjmp	.+6      	; 0x15c <main+0x30>
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	c9 df       	rcall	.-110    	; 0xec <robby_richtung>
 15a:	ef cf       	rjmp	.-34     	; 0x13a <main+0xe>
    else if (bit_read(SensorD,IRR)==0)  robby_richtung(LINKSDREH);
 15c:	67 e0       	ldi	r22, 0x07	; 7
 15e:	8b e2       	ldi	r24, 0x2B	; 43
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	1d d1       	rcall	.+570    	; 0x39e <bit_read>
 164:	81 11       	cpse	r24, r1
 166:	03 c0       	rjmp	.+6      	; 0x16e <main+0x42>
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	c0 df       	rcall	.-128    	; 0xec <robby_richtung>
 16c:	e6 cf       	rjmp	.-52     	; 0x13a <main+0xe>
 16e:	81 e0       	ldi	r24, 0x01	; 1
    else                                robby_richtung(VORWAERTS);
 170:	bd df       	rcall	.-134    	; 0xec <robby_richtung>
 172:	e3 cf       	rjmp	.-58     	; 0x13a <main+0xe>

00000174 <__vector_1>:
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0

void serial_interrupt_init( void (*sr) (void))
{ 
	rs232_init();  // Serielle Schnittstelle initialisieren
	my_datareceived = sr;
}
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
 196:	e8 98       	cbi	0x1d, 0	; 29
 198:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <my_interrupt0>
 19c:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <my_interrupt0+0x1>
 1a0:	09 95       	icall
 1a2:	e8 9a       	sbi	0x1d, 0	; 29
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_2>:
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
 1e8:	e9 98       	cbi	0x1d, 1	; 29
 1ea:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <my_interrupt1>
 1ee:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <my_interrupt1+0x1>
 1f2:	09 95       	icall
 1f4:	e9 9a       	sbi	0x1d, 1	; 29
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_14>:
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
 23e:	ce e6       	ldi	r28, 0x6E	; 110
 240:	d0 e0       	ldi	r29, 0x00	; 0
 242:	88 81       	ld	r24, Y
 244:	8d 7f       	andi	r24, 0xFD	; 253
 246:	88 83       	st	Y, r24
 248:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
 24c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <__data_end+0x1>
 250:	09 95       	icall
 252:	88 81       	ld	r24, Y
 254:	82 60       	ori	r24, 0x02	; 2
 256:	88 83       	st	Y, r24
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_18>:

ISR(USART_RX_vect)                  // Interrupt-Vektor
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	//UCSR0B &= ~(1<<RXCIE0);         // Empfangsinterrupt ausschalten
	my_datareceived();                // Aufruf der Benutzer-ISR
 2a0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <my_datareceived>
 2a4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <my_datareceived+0x1>
 2a8:	09 95       	icall
  //UCSR0B |= (1<<RXCIE0);          // Empfangsinterrupt einschalten
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <bit_init>:
    _TIMER_CONT_A_ |= (1<<_OUT_MODE_BIT_2);
  }

  void pwm2_stop()
  {
    _TIMER_CONT_A_ &= ~(1<<_OUT_MODE_BIT_2);
 2cc:	41 30       	cpi	r20, 0x01	; 1
 2ce:	51 f5       	brne	.+84     	; 0x324 <bit_init+0x58>
 2d0:	8b 32       	cpi	r24, 0x2B	; 43
 2d2:	91 05       	cpc	r25, r1
 2d4:	59 f4       	brne	.+22     	; 0x2ec <bit_init+0x20>
 2d6:	2a b1       	in	r18, 0x0a	; 10
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <bit_init+0x16>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <bit_init+0x12>
 2e6:	82 2b       	or	r24, r18
 2e8:	8a b9       	out	0x0a, r24	; 10
 2ea:	08 95       	ret
 2ec:	85 32       	cpi	r24, 0x25	; 37
 2ee:	91 05       	cpc	r25, r1
 2f0:	59 f4       	brne	.+22     	; 0x308 <bit_init+0x3c>
 2f2:	24 b1       	in	r18, 0x04	; 4
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <bit_init+0x32>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <bit_init+0x2e>
 302:	82 2b       	or	r24, r18
 304:	84 b9       	out	0x04, r24	; 4
 306:	08 95       	ret
 308:	88 97       	sbiw	r24, 0x28	; 40
 30a:	09 f0       	breq	.+2      	; 0x30e <bit_init+0x42>
 30c:	47 c0       	rjmp	.+142    	; 0x39c <bit_init+0xd0>
 30e:	27 b1       	in	r18, 0x07	; 7
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <bit_init+0x4e>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <bit_init+0x4a>
 31e:	82 2b       	or	r24, r18
 320:	87 b9       	out	0x07, r24	; 7
 322:	08 95       	ret
 324:	8b 32       	cpi	r24, 0x2B	; 43
 326:	91 05       	cpc	r25, r1
 328:	69 f4       	brne	.+26     	; 0x344 <bit_init+0x78>
 32a:	5a b1       	in	r21, 0x0a	; 10
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	06 2e       	mov	r0, r22
 332:	02 c0       	rjmp	.+4      	; 0x338 <bit_init+0x6c>
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <bit_init+0x68>
 33c:	20 95       	com	r18
 33e:	25 23       	and	r18, r21
 340:	2a b9       	out	0x0a, r18	; 10
 342:	1f c0       	rjmp	.+62     	; 0x382 <bit_init+0xb6>
 344:	85 32       	cpi	r24, 0x25	; 37
 346:	91 05       	cpc	r25, r1
 348:	69 f4       	brne	.+26     	; 0x364 <bit_init+0x98>
 34a:	54 b1       	in	r21, 0x04	; 4
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	06 2e       	mov	r0, r22
 352:	02 c0       	rjmp	.+4      	; 0x358 <bit_init+0x8c>
 354:	22 0f       	add	r18, r18
 356:	33 1f       	adc	r19, r19
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <bit_init+0x88>
 35c:	20 95       	com	r18
 35e:	25 23       	and	r18, r21
 360:	24 b9       	out	0x04, r18	; 4
 362:	0f c0       	rjmp	.+30     	; 0x382 <bit_init+0xb6>
 364:	88 32       	cpi	r24, 0x28	; 40
 366:	91 05       	cpc	r25, r1
 368:	61 f4       	brne	.+24     	; 0x382 <bit_init+0xb6>
 36a:	57 b1       	in	r21, 0x07	; 7
 36c:	21 e0       	ldi	r18, 0x01	; 1
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	06 2e       	mov	r0, r22
 372:	02 c0       	rjmp	.+4      	; 0x378 <bit_init+0xac>
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <bit_init+0xa8>
 37c:	20 95       	com	r18
 37e:	25 23       	and	r18, r21
 380:	27 b9       	out	0x07, r18	; 7
 382:	41 11       	cpse	r20, r1
 384:	0b c0       	rjmp	.+22     	; 0x39c <bit_init+0xd0>
 386:	fc 01       	movw	r30, r24
 388:	40 81       	ld	r20, Z
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <bit_init+0xc8>
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <bit_init+0xc4>
 398:	24 2b       	or	r18, r20
 39a:	20 83       	st	Z, r18
 39c:	08 95       	ret

0000039e <bit_read>:
 39e:	8b 32       	cpi	r24, 0x2B	; 43
 3a0:	91 05       	cpc	r25, r1
 3a2:	49 f4       	brne	.+18     	; 0x3b6 <bit_read+0x18>
 3a4:	89 b1       	in	r24, 0x09	; 9
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <bit_read+0x10>
 3aa:	95 95       	asr	r25
 3ac:	87 95       	ror	r24
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <bit_read+0xc>
 3b2:	81 70       	andi	r24, 0x01	; 1
 3b4:	08 95       	ret
 3b6:	85 32       	cpi	r24, 0x25	; 37
 3b8:	91 05       	cpc	r25, r1
 3ba:	49 f4       	brne	.+18     	; 0x3ce <bit_read+0x30>
 3bc:	83 b1       	in	r24, 0x03	; 3
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <bit_read+0x28>
 3c2:	95 95       	asr	r25
 3c4:	87 95       	ror	r24
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <bit_read+0x24>
 3ca:	81 70       	andi	r24, 0x01	; 1
 3cc:	08 95       	ret
 3ce:	88 97       	sbiw	r24, 0x28	; 40
 3d0:	49 f4       	brne	.+18     	; 0x3e4 <bit_read+0x46>
 3d2:	86 b1       	in	r24, 0x06	; 6
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <bit_read+0x3e>
 3d8:	95 95       	asr	r25
 3da:	87 95       	ror	r24
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <bit_read+0x3a>
 3e0:	81 70       	andi	r24, 0x01	; 1
 3e2:	08 95       	ret
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret

000003e8 <bit_write>:
 3e8:	fc 01       	movw	r30, r24
 3ea:	40 ff       	sbrs	r20, 0
 3ec:	0b c0       	rjmp	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ee:	20 81       	ld	r18, Z
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <bit_write+0x12>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <bit_write+0xe>
 3fe:	82 2b       	or	r24, r18
 400:	80 83       	st	Z, r24
 402:	08 95       	ret
 404:	90 81       	ld	r25, Z
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	20 95       	com	r18
 416:	29 23       	and	r18, r25
 418:	20 83       	st	Z, r18
 41a:	08 95       	ret

0000041c <pwm_init>:
 41c:	23 9a       	sbi	0x04, 3	; 4
 41e:	e1 eb       	ldi	r30, 0xB1	; 177
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	84 60       	ori	r24, 0x04	; 4
 426:	80 83       	st	Z, r24
 428:	e0 eb       	ldi	r30, 0xB0	; 176
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	83 60       	ori	r24, 0x03	; 3
 430:	80 83       	st	Z, r24
 432:	8f e7       	ldi	r24, 0x7F	; 127
 434:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 438:	08 95       	ret

0000043a <pwm_start>:
 43a:	e0 eb       	ldi	r30, 0xB0	; 176
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	80 68       	ori	r24, 0x80	; 128
 442:	80 83       	st	Z, r24
 444:	08 95       	ret

00000446 <pwm_duty_cycle>:
 446:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 44a:	08 95       	ret

0000044c <pwm2_init>:
 44c:	53 9a       	sbi	0x0a, 3	; 10
 44e:	e1 eb       	ldi	r30, 0xB1	; 177
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	84 60       	ori	r24, 0x04	; 4
 456:	80 83       	st	Z, r24
 458:	e0 eb       	ldi	r30, 0xB0	; 176
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	83 60       	ori	r24, 0x03	; 3
 460:	80 83       	st	Z, r24
 462:	8f e7       	ldi	r24, 0x7F	; 127
 464:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
 468:	08 95       	ret

0000046a <pwm2_start>:
 46a:	e0 eb       	ldi	r30, 0xB0	; 176
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	80 62       	ori	r24, 0x20	; 32
 472:	80 83       	st	Z, r24
 474:	08 95       	ret

00000476 <pwm2_duty_cycle>:
  }
  void pwm2_duty_cycle ( uint8_t value )
  {
    _TIMER_COMPARE_REG_2 = value;//255-value;
 476:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
 47a:	08 95       	ret

0000047c <_exit>:
 47c:	f8 94       	cli

0000047e <__stop_program>:
 47e:	ff cf       	rjmp	.-2      	; 0x47e <__stop_program>
